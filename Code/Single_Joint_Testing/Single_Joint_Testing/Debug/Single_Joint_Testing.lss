
Single_Joint_Testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000778  0000080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000778  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800114  00800114  00000820  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b12  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000830  00000000  00000000  0000140a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ea  00000000  00000000  00001c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00002024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000629  00000000  00000000  000020e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c7  00000000  00000000  00002709  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000028d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	75 c0       	rjmp	.+234    	; 0x102 <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e8 e7       	ldi	r30, 0x78	; 120
  48:	f7 e0       	ldi	r31, 0x07	; 7
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a4 31       	cpi	r26, 0x14	; 20
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a4 e1       	ldi	r26, 0x14	; 20
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a2 32       	cpi	r26, 0x22	; 34
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	17 d0       	rcall	.+46     	; 0x96 <main>
  68:	85 c3       	rjmp	.+1802   	; 0x774 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <uart_putchar>:
}
*/

//Implement the USART putchar function.
void uart_putchar(char c, FILE *stream)
{
  6c:	cf 93       	push	r28
  6e:	c8 2f       	mov	r28, r24
	if (c == '\n') uart_putchar('\r', stream);
  70:	8a 30       	cpi	r24, 0x0A	; 10
  72:	11 f4       	brne	.+4      	; 0x78 <uart_putchar+0xc>
  74:	8d e0       	ldi	r24, 0x0D	; 13
  76:	fa df       	rcall	.-12     	; 0x6c <uart_putchar>
	
	loop_until_bit_is_set(UCSR0A, UDRE0);
  78:	e0 ec       	ldi	r30, 0xC0	; 192
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	85 ff       	sbrs	r24, 5
  80:	fd cf       	rjmp	.-6      	; 0x7c <uart_putchar+0x10>
	UDR0 = c;
  82:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
}
  86:	cf 91       	pop	r28
  88:	08 95       	ret

0000008a <spi_write_read>:
unsigned int count = 0;										//[#] Counter for the number of interrupt cycles.

//Implement the SPI write_read function.
unsigned char spi_write_read(unsigned char spi_data)
{
	SPDR=spi_data;
  8a:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR & (1<<SPIF))==0);	//Wait until the data transfer is complete.
  8c:	0d b4       	in	r0, 0x2d	; 45
  8e:	07 fe       	sbrs	r0, 7
  90:	fd cf       	rjmp	.-6      	; 0x8c <spi_write_read+0x2>
	return SPDR;
  92:	8e b5       	in	r24, 0x2e	; 46
}
  94:	08 95       	ret

00000096 <main>:

int main (void)
{
	
	//Compute the total number of points per cycle.
	num_total = freq_dac/freq_pwm;
  96:	88 e2       	ldi	r24, 0x28	; 40
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <num_total+0x1>
  9e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <num_total>
	
	//Compute the duty cycle conversion factor.
	//duty_cycle_conversion = 1./5.;
	
	//Setup pins for SPI Interface, Chip Select, and Serial Communication.
	DDRB = 0b00101111;		//Set Output Ports for the SPI Interface & Chip Select.
  a2:	8f e2       	ldi	r24, 0x2F	; 47
  a4:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00000000;		//Set port C for ADC.
  a6:	17 b8       	out	0x07, r1	; 7
	DDRD = 0b00000010;		//Set pin 1 on port D as output for serial communication.
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	8a b9       	out	0x0a, r24	; 10
	
	//Initialize the DAC Pins.
	sbi(PORTB,0);			//Set the Chip Select high.
  ac:	28 9a       	sbi	0x05, 0	; 5
	sbi(PORTB,1);			//Set the LDAC high.
  ae:	29 9a       	sbi	0x05, 1	; 5
	
	//Setup for ADC.
	ADCSRA = 0b10000111;	//ADC on, /128 for a 16 MHz clock, interrupt off.
  b0:	87 e8       	ldi	r24, 0x87	; 135
  b2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	
	// Setup for SPI.
	SPCR=0b01010010;
  b6:	82 e5       	ldi	r24, 0x52	; 82
  b8:	8c bd       	out	0x2c, r24	; 44
	SPSR=0b00000000;
  ba:	1d bc       	out	0x2d, r1	; 45
	
	//Setup the timer for the interrupts.
	TCCR1B |= (1 << WGM12);										// Configure timer 1 for CTC mode
  bc:	e1 e8       	ldi	r30, 0x81	; 129
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A);									// Enable CTC interrupt
  c6:	af e6       	ldi	r26, 0x6F	; 111
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	8c 91       	ld	r24, X
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	8c 93       	st	X, r24
	sei();														// Enable global interrupts
  d0:	78 94       	sei
	OCR1A = 15999;												//Set target timer count for 1 kHz interrupt given 16MHz clock & prescaler of 1. Use 3999 for 4 kHz under same conditions. OCR1A = Target_Timer_Count = (Clock_Frequency / (Prescale * Target_Frequency)) – 1
  d2:	8f e7       	ldi	r24, 0x7F	; 127
  d4:	9e e3       	ldi	r25, 0x3E	; 62
  d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
  da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
	TCCR1B |= ((1 << CS10) | (0 << CS11) | (0 << CS12));		//Sets the prescaler to 1.
  de:	80 81       	ld	r24, Z
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	80 83       	st	Z, r24

	//USART Setup
	UBRR0H = MYUBRR >> 8;
  e4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
	UBRR0L = MYUBRR;
  e8:	87 e6       	ldi	r24, 0x67	; 103
  ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ee:	88 e1       	ldi	r24, 0x18	; 24
  f0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
	stdout = &mystdout; //Required for printf init
  f4:	86 e0       	ldi	r24, 0x06	; 6
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__iob+0x3>
  fc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__iob+0x2>
 100:	ff cf       	rjmp	.-2      	; 0x100 <main+0x6a>

00000102 <__vector_11>:
	while(1){}

}

ISR(TIMER1_COMPA_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	3f 93       	push	r19
 110:	4f 93       	push	r20
 112:	5f 93       	push	r21
 114:	6f 93       	push	r22
 116:	7f 93       	push	r23
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31

	
	//Read from the ADC Channels.
	
	//Read in the extensor pressure sensor ADC value from Channel 0.
	ADMUX  = 0b00000000;																//Set the AD input to Channel 0.
 124:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	ADCSRA = ADCSRA | 0b01000000;														// Start AD conversion.  Sets bit 7 to 1 and leaves all other bits the same.
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 64       	ori	r24, 0x40	; 64
 130:	80 83       	st	Z, r24
	while ((ADCSRA & 0b01000000) == 0b01000000);										// Wait while AD conversion is executed.  Waits until bit 7 is set to 1.
 132:	80 81       	ld	r24, Z
 134:	86 fd       	sbrc	r24, 6
 136:	fd cf       	rjmp	.-6      	; 0x132 <__vector_11+0x30>
	extensor_pressure_adc = ADCW;														//[0-1023] Extensor Pressure.  Retrieve the extensor pressure ADC value from Channel 0.
 138:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 13c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
	extensor_pressure_voltage = extensor_pressure_conversion*extensor_pressure_adc;		//[V] Extensor Pressure.  Converts the extensor pressure from an ADC value to a voltage value.
	
	//Read in the flexor pressure sensor ADC value from Channel 1.
	ADMUX  = 0b00000001;																							//Set the AD input to Channel 1.
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	ADCSRA = ADCSRA | 0b01000000;																					// Start AD conversion.  Sets bit 7 to 1 and leaves all other bits the same.
 146:	ea e7       	ldi	r30, 0x7A	; 122
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	80 83       	st	Z, r24
	while ((ADCSRA & 0b01000000) == 0b01000000);																	// Wait while AD conversion is executed.  Waits until bit 7 is set to 1.
 150:	80 81       	ld	r24, Z
 152:	86 fd       	sbrc	r24, 6
 154:	fd cf       	rjmp	.-6      	; 0x150 <__vector_11+0x4e>
	flexor_pressure_adc = ADCW;																						//[0-1023] Flexor Pressure.  Retrieve the flexor pressure ADC value from Channel 1.
 156:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 15a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
	flexor_pressure_voltage = flexor_pressure_conversion*(flexor_pressure_adc - flexor_pressure_offset);			//[V] Flexor Pressure.  Converts the flexor pressure from an ADC value to a voltage value.
	
	//Read in the joint angle potentiometer ADC value from Channel 2.
	ADMUX  = 0b00000010;												//Set the AD input to Channel 2.
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	ADCSRA = ADCSRA | 0b01000000;										// Start AD conversion.  Sets bit 7 to 1 and leaves all other bits the same.
 164:	ea e7       	ldi	r30, 0x7A	; 122
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	80 83       	st	Z, r24
	while ((ADCSRA & 0b01000000) == 0b01000000);						// Wait while AD conversion is executed.  Waits until bit 7 is set to 1.
 16e:	80 81       	ld	r24, Z
 170:	86 fd       	sbrc	r24, 6
 172:	fd cf       	rjmp	.-6      	; 0x16e <__vector_11+0x6c>
	joint_angle_adc = ADCW;												//[0-1023] Joint Angle.  Retrieve the joint angle potentiometer ADC value from Channel 2.
 174:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 178:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
	joint_angle_voltage = joint_angle_conversion*joint_angle_adc;		//[V] Joint Angle.  Converts the joint angle from an ADC value to a voltage value.

	//Set the dac value high.
	dac_data = dac_on_value;
 17c:	8f e9       	ldi	r24, 0x9F	; 159
 17e:	9f e0       	ldi	r25, 0x0F	; 15
 180:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <dac_data+0x1>
 184:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dac_data>
	spi_data_0 = (dac_data & 0x0F00) >> 8;			//Set up the first byte to write by mapping bits 8-11 to the lower 4 bit positions.
	spi_data_0 = spi_data_0 + 0b00110000;			//Now add the upper 4 DAC control bits.
	spi_data_1 = (dac_data & 0xFF);					//Setup the second byte to write by mapping bits 0-7 to the lower 8 bit positions.

	//Write the ADC data to the DAC.
	cbi(PORTB,0);								// Activate the chip - set chip select to zero
 188:	28 98       	cbi	0x05, 0	; 5
	dummy_read = spi_write_read(spi_data_0);	// Write/Read first byte
 18a:	8f e3       	ldi	r24, 0x3F	; 63
 18c:	7e df       	rcall	.-260    	; 0x8a <spi_write_read>
	dummy_read = spi_write_read(spi_data_1);  	// Write/Read second byte
 18e:	8f e9       	ldi	r24, 0x9F	; 159
 190:	7c df       	rcall	.-264    	; 0x8a <spi_write_read>
	sbi(PORTB,0);								// Release the chip  - set chip select to one
 192:	28 9a       	sbi	0x05, 0	; 5
	
	//Cycle the LDAC.
	cbi(PORTB,1);			//Set the LDAC low.
 194:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	00 c0       	rjmp	.+0      	; 0x198 <__vector_11+0x96>
	_delay_ms(0.0001);		//Wait the specified LDAC duration.
	sbi(PORTB,1);			//Set the LDAC high.
 198:	29 9a       	sbi	0x05, 1	; 5
	//printf("Error, vel_Set_v, adc_input, adc_output %d    %d    %d    %d\n", (int) Error,(int) Vel_Set_v,adc_input,adc_output );
	//printf("P_ext = %d, P_flx = %d, theta = %d\n", extensor_pressure_adc, flexor_pressure_adc, joint_angle_adc);
	//printf("P_ext = %d, P_flx = %d, theta = %d\n", (int)(extensor_pressure_voltage*100), (int)(flexor_pressure_voltage*100), (int)(joint_angle_voltage*100));
	//printf("P_ext_adc = %d, P_ext_volt = %d, P_flx_adc = %d, P_flx_volt = %d, theta_adc = %d, theta_volt = %d\n", extensor_pressure_adc, (int)(extensor_pressure_voltage*100), flexor_pressure_adc, (int)(flexor_pressure_voltage*100), joint_angle_adc, (int)(joint_angle_voltage*100));
	
	printf(mychar);
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	9f 93       	push	r25
 1a0:	8f 93       	push	r24
 1a2:	1c d0       	rcall	.+56     	; 0x1dc <printf>

	//uart_putchar(mychar[0], stdout);

	
	//Advance the counter.
	++count;
 1a4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 1a8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 1b2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	
}
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	ff 91       	pop	r31
 1bc:	ef 91       	pop	r30
 1be:	bf 91       	pop	r27
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	7f 91       	pop	r23
 1c8:	6f 91       	pop	r22
 1ca:	5f 91       	pop	r21
 1cc:	4f 91       	pop	r20
 1ce:	3f 91       	pop	r19
 1d0:	2f 91       	pop	r18
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <printf>:
 1dc:	a0 e0       	ldi	r26, 0x00	; 0
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	e3 ef       	ldi	r30, 0xF3	; 243
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	a0 c2       	rjmp	.+1344   	; 0x726 <__prologue_saves__+0x20>
 1e6:	ae 01       	movw	r20, r28
 1e8:	4b 5f       	subi	r20, 0xFB	; 251
 1ea:	5f 4f       	sbci	r21, 0xFF	; 255
 1ec:	fa 01       	movw	r30, r20
 1ee:	61 91       	ld	r22, Z+
 1f0:	71 91       	ld	r23, Z+
 1f2:	af 01       	movw	r20, r30
 1f4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__iob+0x2>
 1f8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__iob+0x3>
 1fc:	02 d0       	rcall	.+4      	; 0x202 <vfprintf>
 1fe:	e2 e0       	ldi	r30, 0x02	; 2
 200:	ae c2       	rjmp	.+1372   	; 0x75e <__epilogue_restores__+0x20>

00000202 <vfprintf>:
 202:	ab e0       	ldi	r26, 0x0B	; 11
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	e6 e0       	ldi	r30, 0x06	; 6
 208:	f1 e0       	ldi	r31, 0x01	; 1
 20a:	7d c2       	rjmp	.+1274   	; 0x706 <__prologue_saves__>
 20c:	6c 01       	movw	r12, r24
 20e:	7b 01       	movw	r14, r22
 210:	8a 01       	movw	r16, r20
 212:	fc 01       	movw	r30, r24
 214:	17 82       	std	Z+7, r1	; 0x07
 216:	16 82       	std	Z+6, r1	; 0x06
 218:	83 81       	ldd	r24, Z+3	; 0x03
 21a:	81 ff       	sbrs	r24, 1
 21c:	bf c1       	rjmp	.+894    	; 0x59c <__stack+0x9d>
 21e:	ce 01       	movw	r24, r28
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	3c 01       	movw	r6, r24
 224:	f6 01       	movw	r30, r12
 226:	93 81       	ldd	r25, Z+3	; 0x03
 228:	f7 01       	movw	r30, r14
 22a:	93 fd       	sbrc	r25, 3
 22c:	85 91       	lpm	r24, Z+
 22e:	93 ff       	sbrs	r25, 3
 230:	81 91       	ld	r24, Z+
 232:	7f 01       	movw	r14, r30
 234:	88 23       	and	r24, r24
 236:	09 f4       	brne	.+2      	; 0x23a <vfprintf+0x38>
 238:	ad c1       	rjmp	.+858    	; 0x594 <__stack+0x95>
 23a:	85 32       	cpi	r24, 0x25	; 37
 23c:	39 f4       	brne	.+14     	; 0x24c <vfprintf+0x4a>
 23e:	93 fd       	sbrc	r25, 3
 240:	85 91       	lpm	r24, Z+
 242:	93 ff       	sbrs	r25, 3
 244:	81 91       	ld	r24, Z+
 246:	7f 01       	movw	r14, r30
 248:	85 32       	cpi	r24, 0x25	; 37
 24a:	21 f4       	brne	.+8      	; 0x254 <vfprintf+0x52>
 24c:	b6 01       	movw	r22, r12
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	c0 d1       	rcall	.+896    	; 0x5d2 <fputc>
 252:	e8 cf       	rjmp	.-48     	; 0x224 <vfprintf+0x22>
 254:	91 2c       	mov	r9, r1
 256:	21 2c       	mov	r2, r1
 258:	31 2c       	mov	r3, r1
 25a:	ff e1       	ldi	r31, 0x1F	; 31
 25c:	f3 15       	cp	r31, r3
 25e:	d8 f0       	brcs	.+54     	; 0x296 <vfprintf+0x94>
 260:	8b 32       	cpi	r24, 0x2B	; 43
 262:	79 f0       	breq	.+30     	; 0x282 <vfprintf+0x80>
 264:	38 f4       	brcc	.+14     	; 0x274 <vfprintf+0x72>
 266:	80 32       	cpi	r24, 0x20	; 32
 268:	79 f0       	breq	.+30     	; 0x288 <vfprintf+0x86>
 26a:	83 32       	cpi	r24, 0x23	; 35
 26c:	a1 f4       	brne	.+40     	; 0x296 <vfprintf+0x94>
 26e:	23 2d       	mov	r18, r3
 270:	20 61       	ori	r18, 0x10	; 16
 272:	1d c0       	rjmp	.+58     	; 0x2ae <vfprintf+0xac>
 274:	8d 32       	cpi	r24, 0x2D	; 45
 276:	61 f0       	breq	.+24     	; 0x290 <vfprintf+0x8e>
 278:	80 33       	cpi	r24, 0x30	; 48
 27a:	69 f4       	brne	.+26     	; 0x296 <vfprintf+0x94>
 27c:	23 2d       	mov	r18, r3
 27e:	21 60       	ori	r18, 0x01	; 1
 280:	16 c0       	rjmp	.+44     	; 0x2ae <vfprintf+0xac>
 282:	83 2d       	mov	r24, r3
 284:	82 60       	ori	r24, 0x02	; 2
 286:	38 2e       	mov	r3, r24
 288:	e3 2d       	mov	r30, r3
 28a:	e4 60       	ori	r30, 0x04	; 4
 28c:	3e 2e       	mov	r3, r30
 28e:	2a c0       	rjmp	.+84     	; 0x2e4 <vfprintf+0xe2>
 290:	f3 2d       	mov	r31, r3
 292:	f8 60       	ori	r31, 0x08	; 8
 294:	1d c0       	rjmp	.+58     	; 0x2d0 <vfprintf+0xce>
 296:	37 fc       	sbrc	r3, 7
 298:	2d c0       	rjmp	.+90     	; 0x2f4 <vfprintf+0xf2>
 29a:	20 ed       	ldi	r18, 0xD0	; 208
 29c:	28 0f       	add	r18, r24
 29e:	2a 30       	cpi	r18, 0x0A	; 10
 2a0:	40 f0       	brcs	.+16     	; 0x2b2 <vfprintf+0xb0>
 2a2:	8e 32       	cpi	r24, 0x2E	; 46
 2a4:	b9 f4       	brne	.+46     	; 0x2d4 <vfprintf+0xd2>
 2a6:	36 fc       	sbrc	r3, 6
 2a8:	75 c1       	rjmp	.+746    	; 0x594 <__stack+0x95>
 2aa:	23 2d       	mov	r18, r3
 2ac:	20 64       	ori	r18, 0x40	; 64
 2ae:	32 2e       	mov	r3, r18
 2b0:	19 c0       	rjmp	.+50     	; 0x2e4 <vfprintf+0xe2>
 2b2:	36 fe       	sbrs	r3, 6
 2b4:	06 c0       	rjmp	.+12     	; 0x2c2 <vfprintf+0xc0>
 2b6:	8a e0       	ldi	r24, 0x0A	; 10
 2b8:	98 9e       	mul	r9, r24
 2ba:	20 0d       	add	r18, r0
 2bc:	11 24       	eor	r1, r1
 2be:	92 2e       	mov	r9, r18
 2c0:	11 c0       	rjmp	.+34     	; 0x2e4 <vfprintf+0xe2>
 2c2:	ea e0       	ldi	r30, 0x0A	; 10
 2c4:	2e 9e       	mul	r2, r30
 2c6:	20 0d       	add	r18, r0
 2c8:	11 24       	eor	r1, r1
 2ca:	22 2e       	mov	r2, r18
 2cc:	f3 2d       	mov	r31, r3
 2ce:	f0 62       	ori	r31, 0x20	; 32
 2d0:	3f 2e       	mov	r3, r31
 2d2:	08 c0       	rjmp	.+16     	; 0x2e4 <vfprintf+0xe2>
 2d4:	8c 36       	cpi	r24, 0x6C	; 108
 2d6:	21 f4       	brne	.+8      	; 0x2e0 <vfprintf+0xde>
 2d8:	83 2d       	mov	r24, r3
 2da:	80 68       	ori	r24, 0x80	; 128
 2dc:	38 2e       	mov	r3, r24
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <vfprintf+0xe2>
 2e0:	88 36       	cpi	r24, 0x68	; 104
 2e2:	41 f4       	brne	.+16     	; 0x2f4 <vfprintf+0xf2>
 2e4:	f7 01       	movw	r30, r14
 2e6:	93 fd       	sbrc	r25, 3
 2e8:	85 91       	lpm	r24, Z+
 2ea:	93 ff       	sbrs	r25, 3
 2ec:	81 91       	ld	r24, Z+
 2ee:	7f 01       	movw	r14, r30
 2f0:	81 11       	cpse	r24, r1
 2f2:	b3 cf       	rjmp	.-154    	; 0x25a <vfprintf+0x58>
 2f4:	98 2f       	mov	r25, r24
 2f6:	9f 7d       	andi	r25, 0xDF	; 223
 2f8:	95 54       	subi	r25, 0x45	; 69
 2fa:	93 30       	cpi	r25, 0x03	; 3
 2fc:	28 f4       	brcc	.+10     	; 0x308 <vfprintf+0x106>
 2fe:	0c 5f       	subi	r16, 0xFC	; 252
 300:	1f 4f       	sbci	r17, 0xFF	; 255
 302:	9f e3       	ldi	r25, 0x3F	; 63
 304:	99 83       	std	Y+1, r25	; 0x01
 306:	0d c0       	rjmp	.+26     	; 0x322 <vfprintf+0x120>
 308:	83 36       	cpi	r24, 0x63	; 99
 30a:	31 f0       	breq	.+12     	; 0x318 <vfprintf+0x116>
 30c:	83 37       	cpi	r24, 0x73	; 115
 30e:	71 f0       	breq	.+28     	; 0x32c <vfprintf+0x12a>
 310:	83 35       	cpi	r24, 0x53	; 83
 312:	09 f0       	breq	.+2      	; 0x316 <vfprintf+0x114>
 314:	55 c0       	rjmp	.+170    	; 0x3c0 <vfprintf+0x1be>
 316:	20 c0       	rjmp	.+64     	; 0x358 <vfprintf+0x156>
 318:	f8 01       	movw	r30, r16
 31a:	80 81       	ld	r24, Z
 31c:	89 83       	std	Y+1, r24	; 0x01
 31e:	0e 5f       	subi	r16, 0xFE	; 254
 320:	1f 4f       	sbci	r17, 0xFF	; 255
 322:	88 24       	eor	r8, r8
 324:	83 94       	inc	r8
 326:	91 2c       	mov	r9, r1
 328:	53 01       	movw	r10, r6
 32a:	12 c0       	rjmp	.+36     	; 0x350 <vfprintf+0x14e>
 32c:	28 01       	movw	r4, r16
 32e:	f2 e0       	ldi	r31, 0x02	; 2
 330:	4f 0e       	add	r4, r31
 332:	51 1c       	adc	r5, r1
 334:	f8 01       	movw	r30, r16
 336:	a0 80       	ld	r10, Z
 338:	b1 80       	ldd	r11, Z+1	; 0x01
 33a:	36 fe       	sbrs	r3, 6
 33c:	03 c0       	rjmp	.+6      	; 0x344 <vfprintf+0x142>
 33e:	69 2d       	mov	r22, r9
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <vfprintf+0x146>
 344:	6f ef       	ldi	r22, 0xFF	; 255
 346:	7f ef       	ldi	r23, 0xFF	; 255
 348:	c5 01       	movw	r24, r10
 34a:	38 d1       	rcall	.+624    	; 0x5bc <strnlen>
 34c:	4c 01       	movw	r8, r24
 34e:	82 01       	movw	r16, r4
 350:	f3 2d       	mov	r31, r3
 352:	ff 77       	andi	r31, 0x7F	; 127
 354:	3f 2e       	mov	r3, r31
 356:	15 c0       	rjmp	.+42     	; 0x382 <vfprintf+0x180>
 358:	28 01       	movw	r4, r16
 35a:	22 e0       	ldi	r18, 0x02	; 2
 35c:	42 0e       	add	r4, r18
 35e:	51 1c       	adc	r5, r1
 360:	f8 01       	movw	r30, r16
 362:	a0 80       	ld	r10, Z
 364:	b1 80       	ldd	r11, Z+1	; 0x01
 366:	36 fe       	sbrs	r3, 6
 368:	03 c0       	rjmp	.+6      	; 0x370 <vfprintf+0x16e>
 36a:	69 2d       	mov	r22, r9
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	02 c0       	rjmp	.+4      	; 0x374 <vfprintf+0x172>
 370:	6f ef       	ldi	r22, 0xFF	; 255
 372:	7f ef       	ldi	r23, 0xFF	; 255
 374:	c5 01       	movw	r24, r10
 376:	17 d1       	rcall	.+558    	; 0x5a6 <strnlen_P>
 378:	4c 01       	movw	r8, r24
 37a:	f3 2d       	mov	r31, r3
 37c:	f0 68       	ori	r31, 0x80	; 128
 37e:	3f 2e       	mov	r3, r31
 380:	82 01       	movw	r16, r4
 382:	33 fc       	sbrc	r3, 3
 384:	19 c0       	rjmp	.+50     	; 0x3b8 <vfprintf+0x1b6>
 386:	82 2d       	mov	r24, r2
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	88 16       	cp	r8, r24
 38c:	99 06       	cpc	r9, r25
 38e:	a0 f4       	brcc	.+40     	; 0x3b8 <vfprintf+0x1b6>
 390:	b6 01       	movw	r22, r12
 392:	80 e2       	ldi	r24, 0x20	; 32
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	1d d1       	rcall	.+570    	; 0x5d2 <fputc>
 398:	2a 94       	dec	r2
 39a:	f5 cf       	rjmp	.-22     	; 0x386 <vfprintf+0x184>
 39c:	f5 01       	movw	r30, r10
 39e:	37 fc       	sbrc	r3, 7
 3a0:	85 91       	lpm	r24, Z+
 3a2:	37 fe       	sbrs	r3, 7
 3a4:	81 91       	ld	r24, Z+
 3a6:	5f 01       	movw	r10, r30
 3a8:	b6 01       	movw	r22, r12
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	12 d1       	rcall	.+548    	; 0x5d2 <fputc>
 3ae:	21 10       	cpse	r2, r1
 3b0:	2a 94       	dec	r2
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	82 1a       	sub	r8, r18
 3b6:	91 08       	sbc	r9, r1
 3b8:	81 14       	cp	r8, r1
 3ba:	91 04       	cpc	r9, r1
 3bc:	79 f7       	brne	.-34     	; 0x39c <vfprintf+0x19a>
 3be:	e1 c0       	rjmp	.+450    	; 0x582 <__stack+0x83>
 3c0:	84 36       	cpi	r24, 0x64	; 100
 3c2:	11 f0       	breq	.+4      	; 0x3c8 <vfprintf+0x1c6>
 3c4:	89 36       	cpi	r24, 0x69	; 105
 3c6:	39 f5       	brne	.+78     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3c8:	f8 01       	movw	r30, r16
 3ca:	37 fe       	sbrs	r3, 7
 3cc:	07 c0       	rjmp	.+14     	; 0x3dc <vfprintf+0x1da>
 3ce:	60 81       	ld	r22, Z
 3d0:	71 81       	ldd	r23, Z+1	; 0x01
 3d2:	82 81       	ldd	r24, Z+2	; 0x02
 3d4:	93 81       	ldd	r25, Z+3	; 0x03
 3d6:	0c 5f       	subi	r16, 0xFC	; 252
 3d8:	1f 4f       	sbci	r17, 0xFF	; 255
 3da:	08 c0       	rjmp	.+16     	; 0x3ec <vfprintf+0x1ea>
 3dc:	60 81       	ld	r22, Z
 3de:	71 81       	ldd	r23, Z+1	; 0x01
 3e0:	07 2e       	mov	r0, r23
 3e2:	00 0c       	add	r0, r0
 3e4:	88 0b       	sbc	r24, r24
 3e6:	99 0b       	sbc	r25, r25
 3e8:	0e 5f       	subi	r16, 0xFE	; 254
 3ea:	1f 4f       	sbci	r17, 0xFF	; 255
 3ec:	f3 2d       	mov	r31, r3
 3ee:	ff 76       	andi	r31, 0x6F	; 111
 3f0:	3f 2e       	mov	r3, r31
 3f2:	97 ff       	sbrs	r25, 7
 3f4:	09 c0       	rjmp	.+18     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f6:	90 95       	com	r25
 3f8:	80 95       	com	r24
 3fa:	70 95       	com	r23
 3fc:	61 95       	neg	r22
 3fe:	7f 4f       	sbci	r23, 0xFF	; 255
 400:	8f 4f       	sbci	r24, 0xFF	; 255
 402:	9f 4f       	sbci	r25, 0xFF	; 255
 404:	f0 68       	ori	r31, 0x80	; 128
 406:	3f 2e       	mov	r3, r31
 408:	2a e0       	ldi	r18, 0x0A	; 10
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	a3 01       	movw	r20, r6
 40e:	1d d1       	rcall	.+570    	; 0x64a <__ultoa_invert>
 410:	88 2e       	mov	r8, r24
 412:	86 18       	sub	r8, r6
 414:	44 c0       	rjmp	.+136    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 416:	85 37       	cpi	r24, 0x75	; 117
 418:	31 f4       	brne	.+12     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41a:	23 2d       	mov	r18, r3
 41c:	2f 7e       	andi	r18, 0xEF	; 239
 41e:	b2 2e       	mov	r11, r18
 420:	2a e0       	ldi	r18, 0x0A	; 10
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	25 c0       	rjmp	.+74     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 426:	93 2d       	mov	r25, r3
 428:	99 7f       	andi	r25, 0xF9	; 249
 42a:	b9 2e       	mov	r11, r25
 42c:	8f 36       	cpi	r24, 0x6F	; 111
 42e:	c1 f0       	breq	.+48     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 430:	18 f4       	brcc	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 432:	88 35       	cpi	r24, 0x58	; 88
 434:	79 f0       	breq	.+30     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 436:	ae c0       	rjmp	.+348    	; 0x594 <__stack+0x95>
 438:	80 37       	cpi	r24, 0x70	; 112
 43a:	19 f0       	breq	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43c:	88 37       	cpi	r24, 0x78	; 120
 43e:	21 f0       	breq	.+8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 440:	a9 c0       	rjmp	.+338    	; 0x594 <__stack+0x95>
 442:	e9 2f       	mov	r30, r25
 444:	e0 61       	ori	r30, 0x10	; 16
 446:	be 2e       	mov	r11, r30
 448:	b4 fe       	sbrs	r11, 4
 44a:	0d c0       	rjmp	.+26     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 44c:	fb 2d       	mov	r31, r11
 44e:	f4 60       	ori	r31, 0x04	; 4
 450:	bf 2e       	mov	r11, r31
 452:	09 c0       	rjmp	.+18     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 454:	34 fe       	sbrs	r3, 4
 456:	0a c0       	rjmp	.+20     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 458:	29 2f       	mov	r18, r25
 45a:	26 60       	ori	r18, 0x06	; 6
 45c:	b2 2e       	mov	r11, r18
 45e:	06 c0       	rjmp	.+12     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 460:	28 e0       	ldi	r18, 0x08	; 8
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	05 c0       	rjmp	.+10     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 466:	20 e1       	ldi	r18, 0x10	; 16
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46c:	20 e1       	ldi	r18, 0x10	; 16
 46e:	32 e0       	ldi	r19, 0x02	; 2
 470:	f8 01       	movw	r30, r16
 472:	b7 fe       	sbrs	r11, 7
 474:	07 c0       	rjmp	.+14     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 476:	60 81       	ld	r22, Z
 478:	71 81       	ldd	r23, Z+1	; 0x01
 47a:	82 81       	ldd	r24, Z+2	; 0x02
 47c:	93 81       	ldd	r25, Z+3	; 0x03
 47e:	0c 5f       	subi	r16, 0xFC	; 252
 480:	1f 4f       	sbci	r17, 0xFF	; 255
 482:	06 c0       	rjmp	.+12     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 484:	60 81       	ld	r22, Z
 486:	71 81       	ldd	r23, Z+1	; 0x01
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 5f       	subi	r16, 0xFE	; 254
 48e:	1f 4f       	sbci	r17, 0xFF	; 255
 490:	a3 01       	movw	r20, r6
 492:	db d0       	rcall	.+438    	; 0x64a <__ultoa_invert>
 494:	88 2e       	mov	r8, r24
 496:	86 18       	sub	r8, r6
 498:	fb 2d       	mov	r31, r11
 49a:	ff 77       	andi	r31, 0x7F	; 127
 49c:	3f 2e       	mov	r3, r31
 49e:	36 fe       	sbrs	r3, 6
 4a0:	0d c0       	rjmp	.+26     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4a2:	23 2d       	mov	r18, r3
 4a4:	2e 7f       	andi	r18, 0xFE	; 254
 4a6:	a2 2e       	mov	r10, r18
 4a8:	89 14       	cp	r8, r9
 4aa:	58 f4       	brcc	.+22     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4ac:	34 fe       	sbrs	r3, 4
 4ae:	0b c0       	rjmp	.+22     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4b0:	32 fc       	sbrc	r3, 2
 4b2:	09 c0       	rjmp	.+18     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4b4:	83 2d       	mov	r24, r3
 4b6:	8e 7e       	andi	r24, 0xEE	; 238
 4b8:	a8 2e       	mov	r10, r24
 4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4bc:	b8 2c       	mov	r11, r8
 4be:	a3 2c       	mov	r10, r3
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c2:	b8 2c       	mov	r11, r8
 4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4c6:	b9 2c       	mov	r11, r9
 4c8:	a4 fe       	sbrs	r10, 4
 4ca:	0f c0       	rjmp	.+30     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4cc:	fe 01       	movw	r30, r28
 4ce:	e8 0d       	add	r30, r8
 4d0:	f1 1d       	adc	r31, r1
 4d2:	80 81       	ld	r24, Z
 4d4:	80 33       	cpi	r24, 0x30	; 48
 4d6:	21 f4       	brne	.+8      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4d8:	9a 2d       	mov	r25, r10
 4da:	99 7e       	andi	r25, 0xE9	; 233
 4dc:	a9 2e       	mov	r10, r25
 4de:	09 c0       	rjmp	.+18     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4e0:	a2 fe       	sbrs	r10, 2
 4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4e4:	b3 94       	inc	r11
 4e6:	b3 94       	inc	r11
 4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4ea:	8a 2d       	mov	r24, r10
 4ec:	86 78       	andi	r24, 0x86	; 134
 4ee:	09 f0       	breq	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f0:	b3 94       	inc	r11
 4f2:	a3 fc       	sbrc	r10, 3
 4f4:	10 c0       	rjmp	.+32     	; 0x516 <__stack+0x17>
 4f6:	a0 fe       	sbrs	r10, 0
 4f8:	06 c0       	rjmp	.+12     	; 0x506 <__stack+0x7>
 4fa:	b2 14       	cp	r11, r2
 4fc:	80 f4       	brcc	.+32     	; 0x51e <__stack+0x1f>
 4fe:	28 0c       	add	r2, r8
 500:	92 2c       	mov	r9, r2
 502:	9b 18       	sub	r9, r11
 504:	0d c0       	rjmp	.+26     	; 0x520 <__stack+0x21>
 506:	b2 14       	cp	r11, r2
 508:	58 f4       	brcc	.+22     	; 0x520 <__stack+0x21>
 50a:	b6 01       	movw	r22, r12
 50c:	80 e2       	ldi	r24, 0x20	; 32
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	60 d0       	rcall	.+192    	; 0x5d2 <fputc>
 512:	b3 94       	inc	r11
 514:	f8 cf       	rjmp	.-16     	; 0x506 <__stack+0x7>
 516:	b2 14       	cp	r11, r2
 518:	18 f4       	brcc	.+6      	; 0x520 <__stack+0x21>
 51a:	2b 18       	sub	r2, r11
 51c:	02 c0       	rjmp	.+4      	; 0x522 <__stack+0x23>
 51e:	98 2c       	mov	r9, r8
 520:	21 2c       	mov	r2, r1
 522:	a4 fe       	sbrs	r10, 4
 524:	0f c0       	rjmp	.+30     	; 0x544 <__stack+0x45>
 526:	b6 01       	movw	r22, r12
 528:	80 e3       	ldi	r24, 0x30	; 48
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	52 d0       	rcall	.+164    	; 0x5d2 <fputc>
 52e:	a2 fe       	sbrs	r10, 2
 530:	16 c0       	rjmp	.+44     	; 0x55e <__stack+0x5f>
 532:	a1 fc       	sbrc	r10, 1
 534:	03 c0       	rjmp	.+6      	; 0x53c <__stack+0x3d>
 536:	88 e7       	ldi	r24, 0x78	; 120
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <__stack+0x41>
 53c:	88 e5       	ldi	r24, 0x58	; 88
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	b6 01       	movw	r22, r12
 542:	0c c0       	rjmp	.+24     	; 0x55c <__stack+0x5d>
 544:	8a 2d       	mov	r24, r10
 546:	86 78       	andi	r24, 0x86	; 134
 548:	51 f0       	breq	.+20     	; 0x55e <__stack+0x5f>
 54a:	a1 fe       	sbrs	r10, 1
 54c:	02 c0       	rjmp	.+4      	; 0x552 <__stack+0x53>
 54e:	8b e2       	ldi	r24, 0x2B	; 43
 550:	01 c0       	rjmp	.+2      	; 0x554 <__stack+0x55>
 552:	80 e2       	ldi	r24, 0x20	; 32
 554:	a7 fc       	sbrc	r10, 7
 556:	8d e2       	ldi	r24, 0x2D	; 45
 558:	b6 01       	movw	r22, r12
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	3a d0       	rcall	.+116    	; 0x5d2 <fputc>
 55e:	89 14       	cp	r8, r9
 560:	30 f4       	brcc	.+12     	; 0x56e <__stack+0x6f>
 562:	b6 01       	movw	r22, r12
 564:	80 e3       	ldi	r24, 0x30	; 48
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	34 d0       	rcall	.+104    	; 0x5d2 <fputc>
 56a:	9a 94       	dec	r9
 56c:	f8 cf       	rjmp	.-16     	; 0x55e <__stack+0x5f>
 56e:	8a 94       	dec	r8
 570:	f3 01       	movw	r30, r6
 572:	e8 0d       	add	r30, r8
 574:	f1 1d       	adc	r31, r1
 576:	80 81       	ld	r24, Z
 578:	b6 01       	movw	r22, r12
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	2a d0       	rcall	.+84     	; 0x5d2 <fputc>
 57e:	81 10       	cpse	r8, r1
 580:	f6 cf       	rjmp	.-20     	; 0x56e <__stack+0x6f>
 582:	22 20       	and	r2, r2
 584:	09 f4       	brne	.+2      	; 0x588 <__stack+0x89>
 586:	4e ce       	rjmp	.-868    	; 0x224 <vfprintf+0x22>
 588:	b6 01       	movw	r22, r12
 58a:	80 e2       	ldi	r24, 0x20	; 32
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	21 d0       	rcall	.+66     	; 0x5d2 <fputc>
 590:	2a 94       	dec	r2
 592:	f7 cf       	rjmp	.-18     	; 0x582 <__stack+0x83>
 594:	f6 01       	movw	r30, r12
 596:	86 81       	ldd	r24, Z+6	; 0x06
 598:	97 81       	ldd	r25, Z+7	; 0x07
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <__stack+0xa1>
 59c:	8f ef       	ldi	r24, 0xFF	; 255
 59e:	9f ef       	ldi	r25, 0xFF	; 255
 5a0:	2b 96       	adiw	r28, 0x0b	; 11
 5a2:	e2 e1       	ldi	r30, 0x12	; 18
 5a4:	cc c0       	rjmp	.+408    	; 0x73e <__epilogue_restores__>

000005a6 <strnlen_P>:
 5a6:	fc 01       	movw	r30, r24
 5a8:	05 90       	lpm	r0, Z+
 5aa:	61 50       	subi	r22, 0x01	; 1
 5ac:	70 40       	sbci	r23, 0x00	; 0
 5ae:	01 10       	cpse	r0, r1
 5b0:	d8 f7       	brcc	.-10     	; 0x5a8 <strnlen_P+0x2>
 5b2:	80 95       	com	r24
 5b4:	90 95       	com	r25
 5b6:	8e 0f       	add	r24, r30
 5b8:	9f 1f       	adc	r25, r31
 5ba:	08 95       	ret

000005bc <strnlen>:
 5bc:	fc 01       	movw	r30, r24
 5be:	61 50       	subi	r22, 0x01	; 1
 5c0:	70 40       	sbci	r23, 0x00	; 0
 5c2:	01 90       	ld	r0, Z+
 5c4:	01 10       	cpse	r0, r1
 5c6:	d8 f7       	brcc	.-10     	; 0x5be <strnlen+0x2>
 5c8:	80 95       	com	r24
 5ca:	90 95       	com	r25
 5cc:	8e 0f       	add	r24, r30
 5ce:	9f 1f       	adc	r25, r31
 5d0:	08 95       	ret

000005d2 <fputc>:
 5d2:	0f 93       	push	r16
 5d4:	1f 93       	push	r17
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	fb 01       	movw	r30, r22
 5dc:	23 81       	ldd	r18, Z+3	; 0x03
 5de:	21 fd       	sbrc	r18, 1
 5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <fputc+0x16>
 5e2:	8f ef       	ldi	r24, 0xFF	; 255
 5e4:	9f ef       	ldi	r25, 0xFF	; 255
 5e6:	2c c0       	rjmp	.+88     	; 0x640 <fputc+0x6e>
 5e8:	22 ff       	sbrs	r18, 2
 5ea:	16 c0       	rjmp	.+44     	; 0x618 <fputc+0x46>
 5ec:	46 81       	ldd	r20, Z+6	; 0x06
 5ee:	57 81       	ldd	r21, Z+7	; 0x07
 5f0:	24 81       	ldd	r18, Z+4	; 0x04
 5f2:	35 81       	ldd	r19, Z+5	; 0x05
 5f4:	42 17       	cp	r20, r18
 5f6:	53 07       	cpc	r21, r19
 5f8:	44 f4       	brge	.+16     	; 0x60a <fputc+0x38>
 5fa:	a0 81       	ld	r26, Z
 5fc:	b1 81       	ldd	r27, Z+1	; 0x01
 5fe:	9d 01       	movw	r18, r26
 600:	2f 5f       	subi	r18, 0xFF	; 255
 602:	3f 4f       	sbci	r19, 0xFF	; 255
 604:	31 83       	std	Z+1, r19	; 0x01
 606:	20 83       	st	Z, r18
 608:	8c 93       	st	X, r24
 60a:	26 81       	ldd	r18, Z+6	; 0x06
 60c:	37 81       	ldd	r19, Z+7	; 0x07
 60e:	2f 5f       	subi	r18, 0xFF	; 255
 610:	3f 4f       	sbci	r19, 0xFF	; 255
 612:	37 83       	std	Z+7, r19	; 0x07
 614:	26 83       	std	Z+6, r18	; 0x06
 616:	14 c0       	rjmp	.+40     	; 0x640 <fputc+0x6e>
 618:	8b 01       	movw	r16, r22
 61a:	ec 01       	movw	r28, r24
 61c:	fb 01       	movw	r30, r22
 61e:	00 84       	ldd	r0, Z+8	; 0x08
 620:	f1 85       	ldd	r31, Z+9	; 0x09
 622:	e0 2d       	mov	r30, r0
 624:	09 95       	icall
 626:	89 2b       	or	r24, r25
 628:	e1 f6       	brne	.-72     	; 0x5e2 <fputc+0x10>
 62a:	d8 01       	movw	r26, r16
 62c:	16 96       	adiw	r26, 0x06	; 6
 62e:	8d 91       	ld	r24, X+
 630:	9c 91       	ld	r25, X
 632:	17 97       	sbiw	r26, 0x07	; 7
 634:	01 96       	adiw	r24, 0x01	; 1
 636:	17 96       	adiw	r26, 0x07	; 7
 638:	9c 93       	st	X, r25
 63a:	8e 93       	st	-X, r24
 63c:	16 97       	sbiw	r26, 0x06	; 6
 63e:	ce 01       	movw	r24, r28
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	1f 91       	pop	r17
 646:	0f 91       	pop	r16
 648:	08 95       	ret

0000064a <__ultoa_invert>:
 64a:	fa 01       	movw	r30, r20
 64c:	aa 27       	eor	r26, r26
 64e:	28 30       	cpi	r18, 0x08	; 8
 650:	51 f1       	breq	.+84     	; 0x6a6 <__ultoa_invert+0x5c>
 652:	20 31       	cpi	r18, 0x10	; 16
 654:	81 f1       	breq	.+96     	; 0x6b6 <__ultoa_invert+0x6c>
 656:	e8 94       	clt
 658:	6f 93       	push	r22
 65a:	6e 7f       	andi	r22, 0xFE	; 254
 65c:	6e 5f       	subi	r22, 0xFE	; 254
 65e:	7f 4f       	sbci	r23, 0xFF	; 255
 660:	8f 4f       	sbci	r24, 0xFF	; 255
 662:	9f 4f       	sbci	r25, 0xFF	; 255
 664:	af 4f       	sbci	r26, 0xFF	; 255
 666:	b1 e0       	ldi	r27, 0x01	; 1
 668:	3e d0       	rcall	.+124    	; 0x6e6 <__ultoa_invert+0x9c>
 66a:	b4 e0       	ldi	r27, 0x04	; 4
 66c:	3c d0       	rcall	.+120    	; 0x6e6 <__ultoa_invert+0x9c>
 66e:	67 0f       	add	r22, r23
 670:	78 1f       	adc	r23, r24
 672:	89 1f       	adc	r24, r25
 674:	9a 1f       	adc	r25, r26
 676:	a1 1d       	adc	r26, r1
 678:	68 0f       	add	r22, r24
 67a:	79 1f       	adc	r23, r25
 67c:	8a 1f       	adc	r24, r26
 67e:	91 1d       	adc	r25, r1
 680:	a1 1d       	adc	r26, r1
 682:	6a 0f       	add	r22, r26
 684:	71 1d       	adc	r23, r1
 686:	81 1d       	adc	r24, r1
 688:	91 1d       	adc	r25, r1
 68a:	a1 1d       	adc	r26, r1
 68c:	20 d0       	rcall	.+64     	; 0x6ce <__ultoa_invert+0x84>
 68e:	09 f4       	brne	.+2      	; 0x692 <__ultoa_invert+0x48>
 690:	68 94       	set
 692:	3f 91       	pop	r19
 694:	2a e0       	ldi	r18, 0x0A	; 10
 696:	26 9f       	mul	r18, r22
 698:	11 24       	eor	r1, r1
 69a:	30 19       	sub	r19, r0
 69c:	30 5d       	subi	r19, 0xD0	; 208
 69e:	31 93       	st	Z+, r19
 6a0:	de f6       	brtc	.-74     	; 0x658 <__ultoa_invert+0xe>
 6a2:	cf 01       	movw	r24, r30
 6a4:	08 95       	ret
 6a6:	46 2f       	mov	r20, r22
 6a8:	47 70       	andi	r20, 0x07	; 7
 6aa:	40 5d       	subi	r20, 0xD0	; 208
 6ac:	41 93       	st	Z+, r20
 6ae:	b3 e0       	ldi	r27, 0x03	; 3
 6b0:	0f d0       	rcall	.+30     	; 0x6d0 <__ultoa_invert+0x86>
 6b2:	c9 f7       	brne	.-14     	; 0x6a6 <__ultoa_invert+0x5c>
 6b4:	f6 cf       	rjmp	.-20     	; 0x6a2 <__ultoa_invert+0x58>
 6b6:	46 2f       	mov	r20, r22
 6b8:	4f 70       	andi	r20, 0x0F	; 15
 6ba:	40 5d       	subi	r20, 0xD0	; 208
 6bc:	4a 33       	cpi	r20, 0x3A	; 58
 6be:	18 f0       	brcs	.+6      	; 0x6c6 <__ultoa_invert+0x7c>
 6c0:	49 5d       	subi	r20, 0xD9	; 217
 6c2:	31 fd       	sbrc	r19, 1
 6c4:	40 52       	subi	r20, 0x20	; 32
 6c6:	41 93       	st	Z+, r20
 6c8:	02 d0       	rcall	.+4      	; 0x6ce <__ultoa_invert+0x84>
 6ca:	a9 f7       	brne	.-22     	; 0x6b6 <__ultoa_invert+0x6c>
 6cc:	ea cf       	rjmp	.-44     	; 0x6a2 <__ultoa_invert+0x58>
 6ce:	b4 e0       	ldi	r27, 0x04	; 4
 6d0:	a6 95       	lsr	r26
 6d2:	97 95       	ror	r25
 6d4:	87 95       	ror	r24
 6d6:	77 95       	ror	r23
 6d8:	67 95       	ror	r22
 6da:	ba 95       	dec	r27
 6dc:	c9 f7       	brne	.-14     	; 0x6d0 <__ultoa_invert+0x86>
 6de:	00 97       	sbiw	r24, 0x00	; 0
 6e0:	61 05       	cpc	r22, r1
 6e2:	71 05       	cpc	r23, r1
 6e4:	08 95       	ret
 6e6:	9b 01       	movw	r18, r22
 6e8:	ac 01       	movw	r20, r24
 6ea:	0a 2e       	mov	r0, r26
 6ec:	06 94       	lsr	r0
 6ee:	57 95       	ror	r21
 6f0:	47 95       	ror	r20
 6f2:	37 95       	ror	r19
 6f4:	27 95       	ror	r18
 6f6:	ba 95       	dec	r27
 6f8:	c9 f7       	brne	.-14     	; 0x6ec <__ultoa_invert+0xa2>
 6fa:	62 0f       	add	r22, r18
 6fc:	73 1f       	adc	r23, r19
 6fe:	84 1f       	adc	r24, r20
 700:	95 1f       	adc	r25, r21
 702:	a0 1d       	adc	r26, r0
 704:	08 95       	ret

00000706 <__prologue_saves__>:
 706:	2f 92       	push	r2
 708:	3f 92       	push	r3
 70a:	4f 92       	push	r4
 70c:	5f 92       	push	r5
 70e:	6f 92       	push	r6
 710:	7f 92       	push	r7
 712:	8f 92       	push	r8
 714:	9f 92       	push	r9
 716:	af 92       	push	r10
 718:	bf 92       	push	r11
 71a:	cf 92       	push	r12
 71c:	df 92       	push	r13
 71e:	ef 92       	push	r14
 720:	ff 92       	push	r15
 722:	0f 93       	push	r16
 724:	1f 93       	push	r17
 726:	cf 93       	push	r28
 728:	df 93       	push	r29
 72a:	cd b7       	in	r28, 0x3d	; 61
 72c:	de b7       	in	r29, 0x3e	; 62
 72e:	ca 1b       	sub	r28, r26
 730:	db 0b       	sbc	r29, r27
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	f8 94       	cli
 736:	de bf       	out	0x3e, r29	; 62
 738:	0f be       	out	0x3f, r0	; 63
 73a:	cd bf       	out	0x3d, r28	; 61
 73c:	09 94       	ijmp

0000073e <__epilogue_restores__>:
 73e:	2a 88       	ldd	r2, Y+18	; 0x12
 740:	39 88       	ldd	r3, Y+17	; 0x11
 742:	48 88       	ldd	r4, Y+16	; 0x10
 744:	5f 84       	ldd	r5, Y+15	; 0x0f
 746:	6e 84       	ldd	r6, Y+14	; 0x0e
 748:	7d 84       	ldd	r7, Y+13	; 0x0d
 74a:	8c 84       	ldd	r8, Y+12	; 0x0c
 74c:	9b 84       	ldd	r9, Y+11	; 0x0b
 74e:	aa 84       	ldd	r10, Y+10	; 0x0a
 750:	b9 84       	ldd	r11, Y+9	; 0x09
 752:	c8 84       	ldd	r12, Y+8	; 0x08
 754:	df 80       	ldd	r13, Y+7	; 0x07
 756:	ee 80       	ldd	r14, Y+6	; 0x06
 758:	fd 80       	ldd	r15, Y+5	; 0x05
 75a:	0c 81       	ldd	r16, Y+4	; 0x04
 75c:	1b 81       	ldd	r17, Y+3	; 0x03
 75e:	aa 81       	ldd	r26, Y+2	; 0x02
 760:	b9 81       	ldd	r27, Y+1	; 0x01
 762:	ce 0f       	add	r28, r30
 764:	d1 1d       	adc	r29, r1
 766:	0f b6       	in	r0, 0x3f	; 63
 768:	f8 94       	cli
 76a:	de bf       	out	0x3e, r29	; 62
 76c:	0f be       	out	0x3f, r0	; 63
 76e:	cd bf       	out	0x3d, r28	; 61
 770:	ed 01       	movw	r28, r26
 772:	08 95       	ret

00000774 <_exit>:
 774:	f8 94       	cli

00000776 <__stop_program>:
 776:	ff cf       	rjmp	.-2      	; 0x776 <__stop_program>
