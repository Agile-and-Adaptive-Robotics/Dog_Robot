
Slave_Micro_Testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001ca  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010e  0080010e  0000026c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d94  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd5  00000000  00000000  000021dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bac  00000000  00000000  00002eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c0  00000000  00000000  00003a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000afc  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015d4  00000000  00000000  00004b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  000060f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	8c c0       	rjmp	.+280    	; 0x130 <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	b5 c0       	rjmp	.+362    	; 0x18e <__vector_17>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea ec       	ldi	r30, 0xCA	; 202
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	ae 30       	cpi	r26, 0x0E	; 14
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	ae e0       	ldi	r26, 0x0E	; 14
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a6 31       	cpi	r26, 0x16	; 22
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	62 d0       	rcall	.+196    	; 0x12c <main>
  68:	ae c0       	rjmp	.+348    	; 0x1c6 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <byte_array2int>:
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <byte_array2int+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	fc 01       	movw	r30, r24
  78:	20 81       	ld	r18, Z
  7a:	29 83       	std	Y+1, r18	; 0x01
  7c:	81 81       	ldd	r24, Z+1	; 0x01
  7e:	8a 83       	std	Y+2, r24	; 0x02
  80:	89 81       	ldd	r24, Y+1	; 0x01
  82:	9a 81       	ldd	r25, Y+2	; 0x02
  84:	0f 90       	pop	r0
  86:	0f 90       	pop	r0
  88:	df 91       	pop	r29
  8a:	cf 91       	pop	r28
  8c:	08 95       	ret

0000008e <uart_putchar>:
  8e:	cf 93       	push	r28
  90:	c8 2f       	mov	r28, r24
  92:	8a 30       	cpi	r24, 0x0A	; 10
  94:	11 f4       	brne	.+4      	; 0x9a <uart_putchar+0xc>
  96:	8d e0       	ldi	r24, 0x0D	; 13
  98:	fa df       	rcall	.-12     	; 0x8e <uart_putchar>
  9a:	e0 ec       	ldi	r30, 0xC0	; 192
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	85 ff       	sbrs	r24, 5
  a2:	fd cf       	rjmp	.-6      	; 0x9e <uart_putchar+0x10>
  a4:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
  a8:	cf 91       	pop	r28
  aa:	08 95       	ret

000000ac <SetupPins>:
  ac:	83 e1       	ldi	r24, 0x13	; 19
  ae:	84 b9       	out	0x04, r24	; 4
  b0:	17 b8       	out	0x07, r1	; 7
  b2:	8e ef       	ldi	r24, 0xFE	; 254
  b4:	8a b9       	out	0x0a, r24	; 10
  b6:	28 98       	cbi	0x05, 0	; 5
  b8:	29 98       	cbi	0x05, 1	; 5
  ba:	2c 98       	cbi	0x05, 4	; 5
  bc:	5a 98       	cbi	0x0b, 2	; 11
  be:	5b 98       	cbi	0x0b, 3	; 11
  c0:	5c 98       	cbi	0x0b, 4	; 11
  c2:	5d 98       	cbi	0x0b, 5	; 11
  c4:	5e 98       	cbi	0x0b, 6	; 11
  c6:	5f 98       	cbi	0x0b, 7	; 11
  c8:	08 95       	ret

000000ca <SetupSPI>:
  ca:	82 ec       	ldi	r24, 0xC2	; 194
  cc:	8c bd       	out	0x2c, r24	; 44
  ce:	8d b5       	in	r24, 0x2d	; 45
  d0:	8e b5       	in	r24, 0x2e	; 46
  d2:	08 95       	ret

000000d4 <SetupTimerInterrupts>:
  d4:	e1 e8       	ldi	r30, 0x81	; 129
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 83       	st	Z, r24
  de:	af e6       	ldi	r26, 0x6F	; 111
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	8c 91       	ld	r24, X
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	8c 93       	st	X, r24
  e8:	8f e7       	ldi	r24, 0x7F	; 127
  ea:	9e e3       	ldi	r25, 0x3E	; 62
  ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
  f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
  f4:	80 81       	ld	r24, Z
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	80 83       	st	Z, r24
  fa:	08 95       	ret

000000fc <SetupUSART>:
  fc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
 100:	80 e1       	ldi	r24, 0x10	; 16
 102:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 106:	88 e1       	ldi	r24, 0x18	; 24
 108:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__iob+0x3>
 114:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__iob+0x2>
 118:	08 95       	ret

0000011a <SetupMicro>:
 11a:	c8 df       	rcall	.-112    	; 0xac <SetupPins>
 11c:	87 e8       	ldi	r24, 0x87	; 135
 11e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
 122:	d3 df       	rcall	.-90     	; 0xca <SetupSPI>
 124:	d7 df       	rcall	.-82     	; 0xd4 <SetupTimerInterrupts>
 126:	ea df       	rcall	.-44     	; 0xfc <SetupUSART>
 128:	78 94       	sei
 12a:	08 95       	ret

0000012c <main>:
//Implement the main function.
int main (void)
{
	
	//Setup the microcontroller.
	SetupMicro();
 12c:	f6 df       	rcall	.-20     	; 0x11a <SetupMicro>
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x2>

00000130 <__vector_11>:

}

//Implement the first timer interrupt function.
ISR(TIMER1_COMPA_vect)
{			
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	3f 93       	push	r19
 13e:	4f 93       	push	r20
 140:	5f 93       	push	r21
 142:	6f 93       	push	r22
 144:	7f 93       	push	r23
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
 14a:	af 93       	push	r26
 14c:	bf 93       	push	r27
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
	
	//Define local variables.
	uint16_t p_desired;
	
	//Convert the current SPI bytes into a SPI value.
	p_desired = byte_array2int(spi_bytes);
 152:	8e e0       	ldi	r24, 0x0E	; 14
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	8a df       	rcall	.-236    	; 0x6c <byte_array2int>
		
	//Determine what to do based on the SPI value.
	if (p_desired >= activation_threshold)
 158:	88 38       	cpi	r24, 0x88	; 136
 15a:	93 41       	sbci	r25, 0x13	; 19
 15c:	10 f0       	brcs	.+4      	; 0x162 <__vector_11+0x32>
	{
		//PORTD |= (1 << 5);
		PORTB |= (1 << 1);
 15e:	29 9a       	sbi	0x05, 1	; 5
 160:	01 c0       	rjmp	.+2      	; 0x164 <__vector_11+0x34>
	}
	else
	{
		//PORTD &= ~(1 << 5);
		PORTB &= ~(1 << 1);
 162:	29 98       	cbi	0x05, 1	; 5
		//PORTD &= ~(1 << 5);
	//}
		
	//PORTD |= (1 << 5);
		
	PORTD ^= (1 << 3);
 164:	9b b1       	in	r25, 0x0b	; 11
 166:	88 e0       	ldi	r24, 0x08	; 8
 168:	89 27       	eor	r24, r25
 16a:	8b b9       	out	0x0b, r24	; 11
	
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_17>:

ISR(SPI_STC_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
 19c:	ef 93       	push	r30
 19e:	ff 93       	push	r31

	//Define local variables.
	unsigned char spi_byte;

	//Read in the SPI value.
	spi_byte = SPDR;
 1a0:	8e b5       	in	r24, 0x2e	; 46
	
	//Cycle the SPI bytes.
	spi_bytes[0] = spi_bytes[1];
 1a2:	ee e0       	ldi	r30, 0x0E	; 14
 1a4:	f1 e0       	ldi	r31, 0x01	; 1
 1a6:	91 81       	ldd	r25, Z+1	; 0x01
 1a8:	90 83       	st	Z, r25
	spi_bytes[1] = spi_byte;
 1aa:	81 83       	std	Z+1, r24	; 0x01
	
	//Toggle Pin D4 to indicate complete SPI transfer.
	PORTD ^= (1 << 4);
 1ac:	9b b1       	in	r25, 0x0b	; 11
 1ae:	80 e1       	ldi	r24, 0x10	; 16
 1b0:	89 27       	eor	r24, r25
 1b2:	8b b9       	out	0x0b, r24	; 11
	//PORTD |= (1 << 4);
	//PORTD &= ~(1 << 4);
	
	////Enable global interrupts.
	//sei();
}
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
