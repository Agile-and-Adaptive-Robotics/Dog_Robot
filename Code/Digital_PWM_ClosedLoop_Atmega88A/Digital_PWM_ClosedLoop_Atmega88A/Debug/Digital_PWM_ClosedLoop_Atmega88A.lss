
Digital_PWM_ClosedLoop_Atmega88A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000672  00000706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000672  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800102  00800102  00000708  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000738  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f3  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000711  00000000  00000000  00001097  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bf  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001b68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f3  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c8  00000000  00000000  00002123  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000023eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	83 c0       	rjmp	.+262    	; 0x11e <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 e7       	ldi	r30, 0x72	; 114
  48:	f6 e0       	ldi	r31, 0x06	; 6
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a6 31       	cpi	r26, 0x16	; 22
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	08 d0       	rcall	.+16     	; 0x78 <main>
  68:	02 c3       	rjmp	.+1540   	; 0x66e <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <spi_write_read>:
const float Kp = 1.0;

// SPI write read function
unsigned char spi_write_read(unsigned char spi_data)
{
	SPDR=spi_data;
  6c:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR & (1<<SPIF))==0);	// Wait until the data transfer is complete.
  6e:	0d b4       	in	r0, 0x2d	; 45
  70:	07 fe       	sbrs	r0, 7
  72:	fd cf       	rjmp	.-6      	; 0x6e <spi_write_read+0x2>
	return SPDR;
  74:	8e b5       	in	r24, 0x2e	; 46
}
  76:	08 95       	ret

00000078 <main>:

int main (void)
{
	
	//Compute the total number of points per cycle.
	num_total = freq_dac/freq_pwm;
  78:	88 e2       	ldi	r24, 0x28	; 40
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <num_total+0x1>
  80:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <num_total>
	
	//Compute the value to which to set the dac when we turn it on.
	dac_on_value = round((5./5.12)*4095);
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 ef       	ldi	r25, 0xF0	; 240
  88:	a9 e7       	ldi	r26, 0x79	; 121
  8a:	b5 e4       	ldi	r27, 0x45	; 69
  8c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <dac_on_value>
  90:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <dac_on_value+0x1>
  94:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <dac_on_value+0x2>
  98:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <dac_on_value+0x3>
	
	//Compute the pressure conversion factor.
	pressure_conversion = 5./1023;
  9c:	8a e0       	ldi	r24, 0x0A	; 10
  9e:	98 e2       	ldi	r25, 0x28	; 40
  a0:	a0 ea       	ldi	r26, 0xA0	; 160
  a2:	bb e3       	ldi	r27, 0x3B	; 59
  a4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pressure_conversion>
  a8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <pressure_conversion+0x1>
  ac:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <pressure_conversion+0x2>
  b0:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <pressure_conversion+0x3>
	
	//Compute the duty cycle conversion factor.
	duty_cycle_conversion = 1./5.;
  b4:	8d ec       	ldi	r24, 0xCD	; 205
  b6:	9c ec       	ldi	r25, 0xCC	; 204
  b8:	ac e4       	ldi	r26, 0x4C	; 76
  ba:	be e3       	ldi	r27, 0x3E	; 62
  bc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <duty_cycle_conversion>
  c0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <duty_cycle_conversion+0x1>
  c4:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <duty_cycle_conversion+0x2>
  c8:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <duty_cycle_conversion+0x3>
	
	//Setup pins for SPI Interface, Chip Select, LEDs, and Serial Communication.
	DDRB = 0b00101111;		//Set Output Ports for the SPI Interface & Chip Select.
  cc:	8f e2       	ldi	r24, 0x2F	; 47
  ce:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00111000;		//Set pins 3, 4, & 5 on Port C as output for LEDs.
  d0:	88 e3       	ldi	r24, 0x38	; 56
  d2:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11100010;		//Set pin 1 on port D as output for serial communication.  Set pins 5, 6, & 7 on Port D as output for LEDs.
  d4:	82 ee       	ldi	r24, 0xE2	; 226
  d6:	8a b9       	out	0x0a, r24	; 10
	
	//Initialize the pin values.
	sbi(PORTB,0);			//Set the Chip Select high.
  d8:	28 9a       	sbi	0x05, 0	; 5
	sbi(PORTB,1);			//Set the LDAC high.
  da:	29 9a       	sbi	0x05, 1	; 5
	
	sbi(PORTC,3);			//Turn Off LEDs.
  dc:	43 9a       	sbi	0x08, 3	; 8
	sbi(PORTC,4);
  de:	44 9a       	sbi	0x08, 4	; 8
	sbi(PORTC,5);
  e0:	45 9a       	sbi	0x08, 5	; 8
	
	sbi(PORTD,5);
  e2:	5d 9a       	sbi	0x0b, 5	; 11
	sbi(PORTD,6);
  e4:	5e 9a       	sbi	0x0b, 6	; 11
	sbi(PORTD,7);
  e6:	5f 9a       	sbi	0x0b, 7	; 11
	
	//Setup for ADC.
	ADCSRA = 0b10000111;	//ADC on, /128 for a 16 MHz clock, interrupt off.
  e8:	87 e8       	ldi	r24, 0x87	; 135
  ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	
	// Setup for SPI.
	SPCR=0b01010010;
  ee:	82 e5       	ldi	r24, 0x52	; 82
  f0:	8c bd       	out	0x2c, r24	; 44
	SPSR=0b00000000;
  f2:	1d bc       	out	0x2d, r1	; 45
	
	//Setup the timer for the interrupts.
	TCCR1B |= (1 << WGM12); // Configure timer 1 for CTC mode
  f4:	e1 e8       	ldi	r30, 0x81	; 129
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
  fe:	af e6       	ldi	r26, 0x6F	; 111
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	8c 91       	ld	r24, X
 104:	82 60       	ori	r24, 0x02	; 2
 106:	8c 93       	st	X, r24

	sei(); // Enable global interrupts
 108:	78 94       	sei
	//OCR1A = 15624;	//Set CTC compare value to 1 Hz at 1MHz AVR clock, with a prescaler of 64			//Original Example.
	//OCR1A = 62499;	//Set CTC compare value to 1 Hz at 16MHz AVR clock, with a prescaler of 256			//1 Hz Example.
	//OCR1A = 1999;		//Set CTC compare value to 1 kHz at 16MHz AVR clock, with a prescaler of 8			//1 kHz Example.
	//OCR1A = 399;		//Set CTC compare value to 5 kHz at 16MHz AVR clock, with a prescaler of 8			//5 kHz Example.
	//OCR1A = 15;			//Set CTC compare value to ~416 kHz at 16MHz AVR clock, with a prescaler of 1	//Fastest Example (~416 kHz).
	OCR1A = 3999;		//16MHz clock, prescaler of 1, 4 kHz interrupt.
 10a:	8f e9       	ldi	r24, 0x9F	; 159
 10c:	9f e0       	ldi	r25, 0x0F	; 15
 10e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 112:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
	
	//TCCR1B |= ((1 << CS10) | (1 << CS11)); // Start timer at Fcpu/64
	//TCCR1B |= ((0 << CS10) | (0 << CS11) | (1 << CS12)); // Start timer at Fcpu/256						//1 Hz Example.
	//TCCR1B |= ((0 << CS10) | (1 << CS11) | (0 << CS12)); // Start timer at Fcpu/8							//1 kHz and 5 kHz Example.
	TCCR1B |= ((1 << CS10) | (0 << CS11) | (0 << CS12)); // Start timer at Fcpu/1							//1 kHz and 5 kHz Example.
 116:	80 81       	ld	r24, Z
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	80 83       	st	Z, r24
 11c:	ff cf       	rjmp	.-2      	; 0x11c <main+0xa4>

0000011e <__vector_11>:
	while(1){}

}

ISR(TIMER1_COMPA_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 92       	push	r8
 12a:	9f 92       	push	r9
 12c:	af 92       	push	r10
 12e:	bf 92       	push	r11
 130:	cf 92       	push	r12
 132:	df 92       	push	r13
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	2f 93       	push	r18
 13e:	3f 93       	push	r19
 140:	4f 93       	push	r20
 142:	5f 93       	push	r21
 144:	6f 93       	push	r22
 146:	7f 93       	push	r23
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
 14c:	af 93       	push	r26
 14e:	bf 93       	push	r27
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31

	
	//Read from the ADC Channels.
	
	//Set the AD Channel.
	ADMUX  = 0b00000000;	//Set the AD input to Channel 0.
 158:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>

	//Start the AD conversion.
	ADCSRA = ADCSRA | 0b01000000;				    // Start AD conversion.  Sets bit 7 to 1 and leaves all other bits the same.
 15c:	ea e7       	ldi	r30, 0x7A	; 122
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	80 64       	ori	r24, 0x40	; 64
 164:	80 83       	st	Z, r24
	while ((ADCSRA & 0b01000000) == 0b01000000);    // Wait while AD conversion is executed.  Waits until bit 7 is set to 1.
 166:	80 81       	ld	r24, Z
 168:	86 fd       	sbrc	r24, 6
 16a:	fd cf       	rjmp	.-6      	; 0x166 <__vector_11+0x48>
	
	//Retrieve the ADC value from Channel 0.
	adc_data1 = ADCW;					//Converts from [0-1023] to [0-4095].
 16c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 170:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
	
	//Set the AD Channel.
	ADMUX  = 0b00000001;	//Set the AD input to Channel 1.
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	
	//Start the AD conversion.
	ADCSRA = ADCSRA | 0b01000000;				    // Start AD conversion.  Sets bit 7 to 1 and leaves all other bits the same.
 17a:	ea e7       	ldi	r30, 0x7A	; 122
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	80 64       	ori	r24, 0x40	; 64
 182:	80 83       	st	Z, r24
	while ((ADCSRA & 0b01000000) == 0b01000000);    // Wait while AD conversion is executed.  Waits until bit 7 is set to 1.
 184:	80 81       	ld	r24, Z
 186:	86 fd       	sbrc	r24, 6
 188:	fd cf       	rjmp	.-6      	; 0x184 <__vector_11+0x66>
	
	//Retrieve the ADC value from Channel 1.
	adc_data2 = ADCW;					//Converts from [0-1023] to [0-4095].
 18a:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 18e:	d0 91 79 00 	lds	r29, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>


	//Compute the Control Signal.
	
	//Convert the adc value for the desired pressure into a voltage.
	p_desired = pressure_conversion*adc_data1;			//[V] Desired Pressure. Converts [0-1023] to [0-5] V.
 192:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <pressure_conversion>
 196:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <pressure_conversion+0x1>
 19a:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <pressure_conversion+0x2>
 19e:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <pressure_conversion+0x3>

	//duty_cycle = (1./1023)*adc_data1;
	//duty_cycle = (1./1023)*adc_data2;

	//Compute the number of points for the given duty cycle.
	num_crit = round(duty_cycle*num_total);
 1a2:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <num_total>
 1a6:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <num_total+0x1>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	25 d1       	rcall	.+586    	; 0x3fa <__floatunsisf>
 1b0:	a7 01       	movw	r20, r14
 1b2:	96 01       	movw	r18, r12
 1b4:	b0 d1       	rcall	.+864    	; 0x516 <__mulsf3>
 1b6:	4b 01       	movw	r8, r22
 1b8:	5c 01       	movw	r10, r24
 1ba:	be 01       	movw	r22, r28
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	1c d1       	rcall	.+568    	; 0x3fa <__floatunsisf>
 1c2:	a7 01       	movw	r20, r14
 1c4:	96 01       	movw	r18, r12
 1c6:	a7 d1       	rcall	.+846    	; 0x516 <__mulsf3>
 1c8:	9b 01       	movw	r18, r22
 1ca:	ac 01       	movw	r20, r24
 1cc:	c5 01       	movw	r24, r10
 1ce:	b4 01       	movw	r22, r8
 1d0:	83 d0       	rcall	.+262    	; 0x2d8 <__subsf3>
 1d2:	2d ec       	ldi	r18, 0xCD	; 205
 1d4:	3c ec       	ldi	r19, 0xCC	; 204
 1d6:	4c e4       	ldi	r20, 0x4C	; 76
 1d8:	5d e3       	ldi	r21, 0x3D	; 61
 1da:	9d d1       	rcall	.+826    	; 0x516 <__mulsf3>
 1dc:	2c e5       	ldi	r18, 0x5C	; 92
 1de:	3f e8       	ldi	r19, 0x8F	; 143
 1e0:	42 e8       	ldi	r20, 0x82	; 130
 1e2:	5e e3       	ldi	r21, 0x3E	; 62
 1e4:	7a d0       	rcall	.+244    	; 0x2da <__addsf3>
 1e6:	6b 01       	movw	r12, r22
 1e8:	7c 01       	movw	r14, r24
 1ea:	b8 01       	movw	r22, r16
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	04 d1       	rcall	.+520    	; 0x3fa <__floatunsisf>
 1f2:	9b 01       	movw	r18, r22
 1f4:	ac 01       	movw	r20, r24
 1f6:	c7 01       	movw	r24, r14
 1f8:	b6 01       	movw	r22, r12
 1fa:	8d d1       	rcall	.+794    	; 0x516 <__mulsf3>
 1fc:	ef d1       	rcall	.+990    	; 0x5dc <round>
 1fe:	d1 d0       	rcall	.+418    	; 0x3a2 <__fixunssfsi>
 200:	9b 01       	movw	r18, r22
 202:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <num_crit+0x1>
 206:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <num_crit>
	
	//Determine whether to turn the output pin on or off.
	if (count >= num_total)								//If the count has reached the maximum value...
 20a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 20e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 212:	80 17       	cp	r24, r16
 214:	91 07       	cpc	r25, r17
 216:	c0 f0       	brcs	.+48     	; 0x248 <__vector_11+0x12a>
	{
		count = 0;								//Reset the counter to zero.
 218:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 21c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		dac_data = dac_on_value;				//Turn the dac output on.
 220:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <dac_on_value>
 224:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <dac_on_value+0x1>
 228:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <dac_on_value+0x2>
 22c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <dac_on_value+0x3>
 230:	b8 d0       	rcall	.+368    	; 0x3a2 <__fixunssfsi>
 232:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <dac_data+0x1>
 236:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <dac_data>
		bDacOn = 1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 242:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 246:	11 c0       	rjmp	.+34     	; 0x26a <__vector_11+0x14c>
	}
	else if ( bDacOn && (count >= num_crit) )			//If we are in the active part of the cycle...
 248:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 24c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
 250:	45 2b       	or	r20, r21
 252:	59 f0       	breq	.+22     	; 0x26a <__vector_11+0x14c>
 254:	82 17       	cp	r24, r18
 256:	93 07       	cpc	r25, r19
 258:	40 f0       	brcs	.+16     	; 0x26a <__vector_11+0x14c>
	{
		dac_data = 0;									//Turn the dac output off.
 25a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <dac_data+0x1>
 25e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dac_data>
		bDacOn = 0;
 262:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 266:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	
	//Output the PWM to the Valve Manifold.
		
	//Convert the ADC data to a form that the DAC will recognize.
	spi_data_0 = 0x00;								//Zero spi_data_0.
	spi_data_0 = (dac_data & 0x0F00) >> 8;			//Set up the first byte to write by mapping bits 8-11 to the lower 4 bit positions.
 26a:	c0 91 04 01 	lds	r28, 0x0104	; 0x800104 <dac_data>
 26e:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <dac_data+0x1>
 272:	ce 01       	movw	r24, r28
 274:	88 27       	eor	r24, r24
 276:	9f 70       	andi	r25, 0x0F	; 15
	spi_data_0 = spi_data_0 + 0b00110000;			//Now add the upper 4 DAC control bits.
	spi_data_1 = (dac_data & 0xFF);					//Setup the second byte to write by mapping bits 0-7 to the lower 8 bit positions.

	//Write the ADC data to the DAC.
	cbi(PORTB,0);								// Activate the chip - set chip select to zero
 278:	28 98       	cbi	0x05, 0	; 5
	dummy_read = spi_write_read(spi_data_0);	// Write/Read first byte
 27a:	80 e3       	ldi	r24, 0x30	; 48
 27c:	89 0f       	add	r24, r25
 27e:	f6 de       	rcall	.-532    	; 0x6c <spi_write_read>
	dummy_read = spi_write_read(spi_data_1);  	// Write/Read second byte
 280:	8c 2f       	mov	r24, r28
 282:	f4 de       	rcall	.-536    	; 0x6c <spi_write_read>
	sbi(PORTB,0);								// Release the chip  - set chip select to one
 284:	28 9a       	sbi	0x05, 0	; 5
	
	//Cycle the LDAC.
	cbi(PORTB,1);			//Set the LDAC low.
 286:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 288:	00 c0       	rjmp	.+0      	; 0x28a <__vector_11+0x16c>
	_delay_ms(0.0001);		//Wait the specified LDAC duration.
	sbi(PORTB,1);			//Set the LDAC high.
 28a:	29 9a       	sbi	0x05, 1	; 5
	
	
	
	//Advance the counter.
	++count;
 28c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 290:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 29a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	
 29e:	ff 91       	pop	r31
 2a0:	ef 91       	pop	r30
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	7f 91       	pop	r23
 2b0:	6f 91       	pop	r22
 2b2:	5f 91       	pop	r21
 2b4:	4f 91       	pop	r20
 2b6:	3f 91       	pop	r19
 2b8:	2f 91       	pop	r18
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	df 90       	pop	r13
 2c4:	cf 90       	pop	r12
 2c6:	bf 90       	pop	r11
 2c8:	af 90       	pop	r10
 2ca:	9f 90       	pop	r9
 2cc:	8f 90       	pop	r8
 2ce:	0f 90       	pop	r0
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	0f 90       	pop	r0
 2d4:	1f 90       	pop	r1
 2d6:	18 95       	reti

000002d8 <__subsf3>:
 2d8:	50 58       	subi	r21, 0x80	; 128

000002da <__addsf3>:
 2da:	bb 27       	eor	r27, r27
 2dc:	aa 27       	eor	r26, r26
 2de:	0e d0       	rcall	.+28     	; 0x2fc <__addsf3x>
 2e0:	e0 c0       	rjmp	.+448    	; 0x4a2 <__fp_round>
 2e2:	d1 d0       	rcall	.+418    	; 0x486 <__fp_pscA>
 2e4:	30 f0       	brcs	.+12     	; 0x2f2 <__addsf3+0x18>
 2e6:	d6 d0       	rcall	.+428    	; 0x494 <__fp_pscB>
 2e8:	20 f0       	brcs	.+8      	; 0x2f2 <__addsf3+0x18>
 2ea:	31 f4       	brne	.+12     	; 0x2f8 <__addsf3+0x1e>
 2ec:	9f 3f       	cpi	r25, 0xFF	; 255
 2ee:	11 f4       	brne	.+4      	; 0x2f4 <__addsf3+0x1a>
 2f0:	1e f4       	brtc	.+6      	; 0x2f8 <__addsf3+0x1e>
 2f2:	c6 c0       	rjmp	.+396    	; 0x480 <__fp_nan>
 2f4:	0e f4       	brtc	.+2      	; 0x2f8 <__addsf3+0x1e>
 2f6:	e0 95       	com	r30
 2f8:	e7 fb       	bst	r30, 7
 2fa:	bc c0       	rjmp	.+376    	; 0x474 <__fp_inf>

000002fc <__addsf3x>:
 2fc:	e9 2f       	mov	r30, r25
 2fe:	e2 d0       	rcall	.+452    	; 0x4c4 <__fp_split3>
 300:	80 f3       	brcs	.-32     	; 0x2e2 <__addsf3+0x8>
 302:	ba 17       	cp	r27, r26
 304:	62 07       	cpc	r22, r18
 306:	73 07       	cpc	r23, r19
 308:	84 07       	cpc	r24, r20
 30a:	95 07       	cpc	r25, r21
 30c:	18 f0       	brcs	.+6      	; 0x314 <__addsf3x+0x18>
 30e:	71 f4       	brne	.+28     	; 0x32c <__addsf3x+0x30>
 310:	9e f5       	brtc	.+102    	; 0x378 <__addsf3x+0x7c>
 312:	fa c0       	rjmp	.+500    	; 0x508 <__fp_zero>
 314:	0e f4       	brtc	.+2      	; 0x318 <__addsf3x+0x1c>
 316:	e0 95       	com	r30
 318:	0b 2e       	mov	r0, r27
 31a:	ba 2f       	mov	r27, r26
 31c:	a0 2d       	mov	r26, r0
 31e:	0b 01       	movw	r0, r22
 320:	b9 01       	movw	r22, r18
 322:	90 01       	movw	r18, r0
 324:	0c 01       	movw	r0, r24
 326:	ca 01       	movw	r24, r20
 328:	a0 01       	movw	r20, r0
 32a:	11 24       	eor	r1, r1
 32c:	ff 27       	eor	r31, r31
 32e:	59 1b       	sub	r21, r25
 330:	99 f0       	breq	.+38     	; 0x358 <__addsf3x+0x5c>
 332:	59 3f       	cpi	r21, 0xF9	; 249
 334:	50 f4       	brcc	.+20     	; 0x34a <__addsf3x+0x4e>
 336:	50 3e       	cpi	r21, 0xE0	; 224
 338:	68 f1       	brcs	.+90     	; 0x394 <__addsf3x+0x98>
 33a:	1a 16       	cp	r1, r26
 33c:	f0 40       	sbci	r31, 0x00	; 0
 33e:	a2 2f       	mov	r26, r18
 340:	23 2f       	mov	r18, r19
 342:	34 2f       	mov	r19, r20
 344:	44 27       	eor	r20, r20
 346:	58 5f       	subi	r21, 0xF8	; 248
 348:	f3 cf       	rjmp	.-26     	; 0x330 <__addsf3x+0x34>
 34a:	46 95       	lsr	r20
 34c:	37 95       	ror	r19
 34e:	27 95       	ror	r18
 350:	a7 95       	ror	r26
 352:	f0 40       	sbci	r31, 0x00	; 0
 354:	53 95       	inc	r21
 356:	c9 f7       	brne	.-14     	; 0x34a <__addsf3x+0x4e>
 358:	7e f4       	brtc	.+30     	; 0x378 <__addsf3x+0x7c>
 35a:	1f 16       	cp	r1, r31
 35c:	ba 0b       	sbc	r27, r26
 35e:	62 0b       	sbc	r22, r18
 360:	73 0b       	sbc	r23, r19
 362:	84 0b       	sbc	r24, r20
 364:	ba f0       	brmi	.+46     	; 0x394 <__addsf3x+0x98>
 366:	91 50       	subi	r25, 0x01	; 1
 368:	a1 f0       	breq	.+40     	; 0x392 <__addsf3x+0x96>
 36a:	ff 0f       	add	r31, r31
 36c:	bb 1f       	adc	r27, r27
 36e:	66 1f       	adc	r22, r22
 370:	77 1f       	adc	r23, r23
 372:	88 1f       	adc	r24, r24
 374:	c2 f7       	brpl	.-16     	; 0x366 <__addsf3x+0x6a>
 376:	0e c0       	rjmp	.+28     	; 0x394 <__addsf3x+0x98>
 378:	ba 0f       	add	r27, r26
 37a:	62 1f       	adc	r22, r18
 37c:	73 1f       	adc	r23, r19
 37e:	84 1f       	adc	r24, r20
 380:	48 f4       	brcc	.+18     	; 0x394 <__addsf3x+0x98>
 382:	87 95       	ror	r24
 384:	77 95       	ror	r23
 386:	67 95       	ror	r22
 388:	b7 95       	ror	r27
 38a:	f7 95       	ror	r31
 38c:	9e 3f       	cpi	r25, 0xFE	; 254
 38e:	08 f0       	brcs	.+2      	; 0x392 <__addsf3x+0x96>
 390:	b3 cf       	rjmp	.-154    	; 0x2f8 <__addsf3+0x1e>
 392:	93 95       	inc	r25
 394:	88 0f       	add	r24, r24
 396:	08 f0       	brcs	.+2      	; 0x39a <__addsf3x+0x9e>
 398:	99 27       	eor	r25, r25
 39a:	ee 0f       	add	r30, r30
 39c:	97 95       	ror	r25
 39e:	87 95       	ror	r24
 3a0:	08 95       	ret

000003a2 <__fixunssfsi>:
 3a2:	98 d0       	rcall	.+304    	; 0x4d4 <__fp_splitA>
 3a4:	88 f0       	brcs	.+34     	; 0x3c8 <__fixunssfsi+0x26>
 3a6:	9f 57       	subi	r25, 0x7F	; 127
 3a8:	90 f0       	brcs	.+36     	; 0x3ce <__fixunssfsi+0x2c>
 3aa:	b9 2f       	mov	r27, r25
 3ac:	99 27       	eor	r25, r25
 3ae:	b7 51       	subi	r27, 0x17	; 23
 3b0:	a0 f0       	brcs	.+40     	; 0x3da <__fixunssfsi+0x38>
 3b2:	d1 f0       	breq	.+52     	; 0x3e8 <__fixunssfsi+0x46>
 3b4:	66 0f       	add	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	88 1f       	adc	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	1a f0       	brmi	.+6      	; 0x3c4 <__fixunssfsi+0x22>
 3be:	ba 95       	dec	r27
 3c0:	c9 f7       	brne	.-14     	; 0x3b4 <__fixunssfsi+0x12>
 3c2:	12 c0       	rjmp	.+36     	; 0x3e8 <__fixunssfsi+0x46>
 3c4:	b1 30       	cpi	r27, 0x01	; 1
 3c6:	81 f0       	breq	.+32     	; 0x3e8 <__fixunssfsi+0x46>
 3c8:	9f d0       	rcall	.+318    	; 0x508 <__fp_zero>
 3ca:	b1 e0       	ldi	r27, 0x01	; 1
 3cc:	08 95       	ret
 3ce:	9c c0       	rjmp	.+312    	; 0x508 <__fp_zero>
 3d0:	67 2f       	mov	r22, r23
 3d2:	78 2f       	mov	r23, r24
 3d4:	88 27       	eor	r24, r24
 3d6:	b8 5f       	subi	r27, 0xF8	; 248
 3d8:	39 f0       	breq	.+14     	; 0x3e8 <__fixunssfsi+0x46>
 3da:	b9 3f       	cpi	r27, 0xF9	; 249
 3dc:	cc f3       	brlt	.-14     	; 0x3d0 <__fixunssfsi+0x2e>
 3de:	86 95       	lsr	r24
 3e0:	77 95       	ror	r23
 3e2:	67 95       	ror	r22
 3e4:	b3 95       	inc	r27
 3e6:	d9 f7       	brne	.-10     	; 0x3de <__fixunssfsi+0x3c>
 3e8:	3e f4       	brtc	.+14     	; 0x3f8 <__fixunssfsi+0x56>
 3ea:	90 95       	com	r25
 3ec:	80 95       	com	r24
 3ee:	70 95       	com	r23
 3f0:	61 95       	neg	r22
 3f2:	7f 4f       	sbci	r23, 0xFF	; 255
 3f4:	8f 4f       	sbci	r24, 0xFF	; 255
 3f6:	9f 4f       	sbci	r25, 0xFF	; 255
 3f8:	08 95       	ret

000003fa <__floatunsisf>:
 3fa:	e8 94       	clt
 3fc:	09 c0       	rjmp	.+18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

000003fe <__floatsisf>:
 3fe:	97 fb       	bst	r25, 7
 400:	3e f4       	brtc	.+14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 402:	90 95       	com	r25
 404:	80 95       	com	r24
 406:	70 95       	com	r23
 408:	61 95       	neg	r22
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	8f 4f       	sbci	r24, 0xFF	; 255
 40e:	9f 4f       	sbci	r25, 0xFF	; 255
 410:	99 23       	and	r25, r25
 412:	a9 f0       	breq	.+42     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 414:	f9 2f       	mov	r31, r25
 416:	96 e9       	ldi	r25, 0x96	; 150
 418:	bb 27       	eor	r27, r27
 41a:	93 95       	inc	r25
 41c:	f6 95       	lsr	r31
 41e:	87 95       	ror	r24
 420:	77 95       	ror	r23
 422:	67 95       	ror	r22
 424:	b7 95       	ror	r27
 426:	f1 11       	cpse	r31, r1
 428:	f8 cf       	rjmp	.-16     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 42a:	fa f4       	brpl	.+62     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 42c:	bb 0f       	add	r27, r27
 42e:	11 f4       	brne	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	60 ff       	sbrs	r22, 0
 432:	1b c0       	rjmp	.+54     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 434:	6f 5f       	subi	r22, 0xFF	; 255
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	8f 4f       	sbci	r24, 0xFF	; 255
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	16 c0       	rjmp	.+44     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 43e:	88 23       	and	r24, r24
 440:	11 f0       	breq	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	96 e9       	ldi	r25, 0x96	; 150
 444:	11 c0       	rjmp	.+34     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 446:	77 23       	and	r23, r23
 448:	21 f0       	breq	.+8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44a:	9e e8       	ldi	r25, 0x8E	; 142
 44c:	87 2f       	mov	r24, r23
 44e:	76 2f       	mov	r23, r22
 450:	05 c0       	rjmp	.+10     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 452:	66 23       	and	r22, r22
 454:	71 f0       	breq	.+28     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 456:	96 e8       	ldi	r25, 0x86	; 134
 458:	86 2f       	mov	r24, r22
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	2a f0       	brmi	.+10     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 460:	9a 95       	dec	r25
 462:	66 0f       	add	r22, r22
 464:	77 1f       	adc	r23, r23
 466:	88 1f       	adc	r24, r24
 468:	da f7       	brpl	.-10     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 46a:	88 0f       	add	r24, r24
 46c:	96 95       	lsr	r25
 46e:	87 95       	ror	r24
 470:	97 f9       	bld	r25, 7
 472:	08 95       	ret

00000474 <__fp_inf>:
 474:	97 f9       	bld	r25, 7
 476:	9f 67       	ori	r25, 0x7F	; 127
 478:	80 e8       	ldi	r24, 0x80	; 128
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	08 95       	ret

00000480 <__fp_nan>:
 480:	9f ef       	ldi	r25, 0xFF	; 255
 482:	80 ec       	ldi	r24, 0xC0	; 192
 484:	08 95       	ret

00000486 <__fp_pscA>:
 486:	00 24       	eor	r0, r0
 488:	0a 94       	dec	r0
 48a:	16 16       	cp	r1, r22
 48c:	17 06       	cpc	r1, r23
 48e:	18 06       	cpc	r1, r24
 490:	09 06       	cpc	r0, r25
 492:	08 95       	ret

00000494 <__fp_pscB>:
 494:	00 24       	eor	r0, r0
 496:	0a 94       	dec	r0
 498:	12 16       	cp	r1, r18
 49a:	13 06       	cpc	r1, r19
 49c:	14 06       	cpc	r1, r20
 49e:	05 06       	cpc	r0, r21
 4a0:	08 95       	ret

000004a2 <__fp_round>:
 4a2:	09 2e       	mov	r0, r25
 4a4:	03 94       	inc	r0
 4a6:	00 0c       	add	r0, r0
 4a8:	11 f4       	brne	.+4      	; 0x4ae <__fp_round+0xc>
 4aa:	88 23       	and	r24, r24
 4ac:	52 f0       	brmi	.+20     	; 0x4c2 <__fp_round+0x20>
 4ae:	bb 0f       	add	r27, r27
 4b0:	40 f4       	brcc	.+16     	; 0x4c2 <__fp_round+0x20>
 4b2:	bf 2b       	or	r27, r31
 4b4:	11 f4       	brne	.+4      	; 0x4ba <__fp_round+0x18>
 4b6:	60 ff       	sbrs	r22, 0
 4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <__fp_round+0x20>
 4ba:	6f 5f       	subi	r22, 0xFF	; 255
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255
 4be:	8f 4f       	sbci	r24, 0xFF	; 255
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	08 95       	ret

000004c4 <__fp_split3>:
 4c4:	57 fd       	sbrc	r21, 7
 4c6:	90 58       	subi	r25, 0x80	; 128
 4c8:	44 0f       	add	r20, r20
 4ca:	55 1f       	adc	r21, r21
 4cc:	59 f0       	breq	.+22     	; 0x4e4 <__fp_splitA+0x10>
 4ce:	5f 3f       	cpi	r21, 0xFF	; 255
 4d0:	71 f0       	breq	.+28     	; 0x4ee <__fp_splitA+0x1a>
 4d2:	47 95       	ror	r20

000004d4 <__fp_splitA>:
 4d4:	88 0f       	add	r24, r24
 4d6:	97 fb       	bst	r25, 7
 4d8:	99 1f       	adc	r25, r25
 4da:	61 f0       	breq	.+24     	; 0x4f4 <__fp_splitA+0x20>
 4dc:	9f 3f       	cpi	r25, 0xFF	; 255
 4de:	79 f0       	breq	.+30     	; 0x4fe <__fp_splitA+0x2a>
 4e0:	87 95       	ror	r24
 4e2:	08 95       	ret
 4e4:	12 16       	cp	r1, r18
 4e6:	13 06       	cpc	r1, r19
 4e8:	14 06       	cpc	r1, r20
 4ea:	55 1f       	adc	r21, r21
 4ec:	f2 cf       	rjmp	.-28     	; 0x4d2 <__fp_split3+0xe>
 4ee:	46 95       	lsr	r20
 4f0:	f1 df       	rcall	.-30     	; 0x4d4 <__fp_splitA>
 4f2:	08 c0       	rjmp	.+16     	; 0x504 <__stack+0x5>
 4f4:	16 16       	cp	r1, r22
 4f6:	17 06       	cpc	r1, r23
 4f8:	18 06       	cpc	r1, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	f1 cf       	rjmp	.-30     	; 0x4e0 <__fp_splitA+0xc>
 4fe:	86 95       	lsr	r24
 500:	71 05       	cpc	r23, r1
 502:	61 05       	cpc	r22, r1
 504:	08 94       	sec
 506:	08 95       	ret

00000508 <__fp_zero>:
 508:	e8 94       	clt

0000050a <__fp_szero>:
 50a:	bb 27       	eor	r27, r27
 50c:	66 27       	eor	r22, r22
 50e:	77 27       	eor	r23, r23
 510:	cb 01       	movw	r24, r22
 512:	97 f9       	bld	r25, 7
 514:	08 95       	ret

00000516 <__mulsf3>:
 516:	0b d0       	rcall	.+22     	; 0x52e <__mulsf3x>
 518:	c4 cf       	rjmp	.-120    	; 0x4a2 <__fp_round>
 51a:	b5 df       	rcall	.-150    	; 0x486 <__fp_pscA>
 51c:	28 f0       	brcs	.+10     	; 0x528 <__mulsf3+0x12>
 51e:	ba df       	rcall	.-140    	; 0x494 <__fp_pscB>
 520:	18 f0       	brcs	.+6      	; 0x528 <__mulsf3+0x12>
 522:	95 23       	and	r25, r21
 524:	09 f0       	breq	.+2      	; 0x528 <__mulsf3+0x12>
 526:	a6 cf       	rjmp	.-180    	; 0x474 <__fp_inf>
 528:	ab cf       	rjmp	.-170    	; 0x480 <__fp_nan>
 52a:	11 24       	eor	r1, r1
 52c:	ee cf       	rjmp	.-36     	; 0x50a <__fp_szero>

0000052e <__mulsf3x>:
 52e:	ca df       	rcall	.-108    	; 0x4c4 <__fp_split3>
 530:	a0 f3       	brcs	.-24     	; 0x51a <__mulsf3+0x4>

00000532 <__mulsf3_pse>:
 532:	95 9f       	mul	r25, r21
 534:	d1 f3       	breq	.-12     	; 0x52a <__mulsf3+0x14>
 536:	95 0f       	add	r25, r21
 538:	50 e0       	ldi	r21, 0x00	; 0
 53a:	55 1f       	adc	r21, r21
 53c:	62 9f       	mul	r22, r18
 53e:	f0 01       	movw	r30, r0
 540:	72 9f       	mul	r23, r18
 542:	bb 27       	eor	r27, r27
 544:	f0 0d       	add	r31, r0
 546:	b1 1d       	adc	r27, r1
 548:	63 9f       	mul	r22, r19
 54a:	aa 27       	eor	r26, r26
 54c:	f0 0d       	add	r31, r0
 54e:	b1 1d       	adc	r27, r1
 550:	aa 1f       	adc	r26, r26
 552:	64 9f       	mul	r22, r20
 554:	66 27       	eor	r22, r22
 556:	b0 0d       	add	r27, r0
 558:	a1 1d       	adc	r26, r1
 55a:	66 1f       	adc	r22, r22
 55c:	82 9f       	mul	r24, r18
 55e:	22 27       	eor	r18, r18
 560:	b0 0d       	add	r27, r0
 562:	a1 1d       	adc	r26, r1
 564:	62 1f       	adc	r22, r18
 566:	73 9f       	mul	r23, r19
 568:	b0 0d       	add	r27, r0
 56a:	a1 1d       	adc	r26, r1
 56c:	62 1f       	adc	r22, r18
 56e:	83 9f       	mul	r24, r19
 570:	a0 0d       	add	r26, r0
 572:	61 1d       	adc	r22, r1
 574:	22 1f       	adc	r18, r18
 576:	74 9f       	mul	r23, r20
 578:	33 27       	eor	r19, r19
 57a:	a0 0d       	add	r26, r0
 57c:	61 1d       	adc	r22, r1
 57e:	23 1f       	adc	r18, r19
 580:	84 9f       	mul	r24, r20
 582:	60 0d       	add	r22, r0
 584:	21 1d       	adc	r18, r1
 586:	82 2f       	mov	r24, r18
 588:	76 2f       	mov	r23, r22
 58a:	6a 2f       	mov	r22, r26
 58c:	11 24       	eor	r1, r1
 58e:	9f 57       	subi	r25, 0x7F	; 127
 590:	50 40       	sbci	r21, 0x00	; 0
 592:	8a f0       	brmi	.+34     	; 0x5b6 <__mulsf3_pse+0x84>
 594:	e1 f0       	breq	.+56     	; 0x5ce <__mulsf3_pse+0x9c>
 596:	88 23       	and	r24, r24
 598:	4a f0       	brmi	.+18     	; 0x5ac <__mulsf3_pse+0x7a>
 59a:	ee 0f       	add	r30, r30
 59c:	ff 1f       	adc	r31, r31
 59e:	bb 1f       	adc	r27, r27
 5a0:	66 1f       	adc	r22, r22
 5a2:	77 1f       	adc	r23, r23
 5a4:	88 1f       	adc	r24, r24
 5a6:	91 50       	subi	r25, 0x01	; 1
 5a8:	50 40       	sbci	r21, 0x00	; 0
 5aa:	a9 f7       	brne	.-22     	; 0x596 <__mulsf3_pse+0x64>
 5ac:	9e 3f       	cpi	r25, 0xFE	; 254
 5ae:	51 05       	cpc	r21, r1
 5b0:	70 f0       	brcs	.+28     	; 0x5ce <__mulsf3_pse+0x9c>
 5b2:	60 cf       	rjmp	.-320    	; 0x474 <__fp_inf>
 5b4:	aa cf       	rjmp	.-172    	; 0x50a <__fp_szero>
 5b6:	5f 3f       	cpi	r21, 0xFF	; 255
 5b8:	ec f3       	brlt	.-6      	; 0x5b4 <__mulsf3_pse+0x82>
 5ba:	98 3e       	cpi	r25, 0xE8	; 232
 5bc:	dc f3       	brlt	.-10     	; 0x5b4 <__mulsf3_pse+0x82>
 5be:	86 95       	lsr	r24
 5c0:	77 95       	ror	r23
 5c2:	67 95       	ror	r22
 5c4:	b7 95       	ror	r27
 5c6:	f7 95       	ror	r31
 5c8:	e7 95       	ror	r30
 5ca:	9f 5f       	subi	r25, 0xFF	; 255
 5cc:	c1 f7       	brne	.-16     	; 0x5be <__mulsf3_pse+0x8c>
 5ce:	fe 2b       	or	r31, r30
 5d0:	88 0f       	add	r24, r24
 5d2:	91 1d       	adc	r25, r1
 5d4:	96 95       	lsr	r25
 5d6:	87 95       	ror	r24
 5d8:	97 f9       	bld	r25, 7
 5da:	08 95       	ret

000005dc <round>:
 5dc:	7b df       	rcall	.-266    	; 0x4d4 <__fp_splitA>
 5de:	e0 f0       	brcs	.+56     	; 0x618 <round+0x3c>
 5e0:	9e 37       	cpi	r25, 0x7E	; 126
 5e2:	d8 f0       	brcs	.+54     	; 0x61a <round+0x3e>
 5e4:	96 39       	cpi	r25, 0x96	; 150
 5e6:	b8 f4       	brcc	.+46     	; 0x616 <round+0x3a>
 5e8:	9e 38       	cpi	r25, 0x8E	; 142
 5ea:	48 f4       	brcc	.+18     	; 0x5fe <round+0x22>
 5ec:	67 2f       	mov	r22, r23
 5ee:	78 2f       	mov	r23, r24
 5f0:	88 27       	eor	r24, r24
 5f2:	98 5f       	subi	r25, 0xF8	; 248
 5f4:	f9 cf       	rjmp	.-14     	; 0x5e8 <round+0xc>
 5f6:	86 95       	lsr	r24
 5f8:	77 95       	ror	r23
 5fa:	67 95       	ror	r22
 5fc:	93 95       	inc	r25
 5fe:	95 39       	cpi	r25, 0x95	; 149
 600:	d0 f3       	brcs	.-12     	; 0x5f6 <round+0x1a>
 602:	b6 2f       	mov	r27, r22
 604:	b1 70       	andi	r27, 0x01	; 1
 606:	6b 0f       	add	r22, r27
 608:	71 1d       	adc	r23, r1
 60a:	81 1d       	adc	r24, r1
 60c:	20 f4       	brcc	.+8      	; 0x616 <round+0x3a>
 60e:	87 95       	ror	r24
 610:	77 95       	ror	r23
 612:	67 95       	ror	r22
 614:	93 95       	inc	r25
 616:	02 c0       	rjmp	.+4      	; 0x61c <__fp_mintl>
 618:	1c c0       	rjmp	.+56     	; 0x652 <__fp_mpack>
 61a:	77 cf       	rjmp	.-274    	; 0x50a <__fp_szero>

0000061c <__fp_mintl>:
 61c:	88 23       	and	r24, r24
 61e:	71 f4       	brne	.+28     	; 0x63c <__fp_mintl+0x20>
 620:	77 23       	and	r23, r23
 622:	21 f0       	breq	.+8      	; 0x62c <__fp_mintl+0x10>
 624:	98 50       	subi	r25, 0x08	; 8
 626:	87 2b       	or	r24, r23
 628:	76 2f       	mov	r23, r22
 62a:	07 c0       	rjmp	.+14     	; 0x63a <__fp_mintl+0x1e>
 62c:	66 23       	and	r22, r22
 62e:	11 f4       	brne	.+4      	; 0x634 <__fp_mintl+0x18>
 630:	99 27       	eor	r25, r25
 632:	0d c0       	rjmp	.+26     	; 0x64e <__fp_mintl+0x32>
 634:	90 51       	subi	r25, 0x10	; 16
 636:	86 2b       	or	r24, r22
 638:	70 e0       	ldi	r23, 0x00	; 0
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	2a f0       	brmi	.+10     	; 0x648 <__fp_mintl+0x2c>
 63e:	9a 95       	dec	r25
 640:	66 0f       	add	r22, r22
 642:	77 1f       	adc	r23, r23
 644:	88 1f       	adc	r24, r24
 646:	da f7       	brpl	.-10     	; 0x63e <__fp_mintl+0x22>
 648:	88 0f       	add	r24, r24
 64a:	96 95       	lsr	r25
 64c:	87 95       	ror	r24
 64e:	97 f9       	bld	r25, 7
 650:	08 95       	ret

00000652 <__fp_mpack>:
 652:	9f 3f       	cpi	r25, 0xFF	; 255
 654:	31 f0       	breq	.+12     	; 0x662 <__fp_mpack_finite+0xc>

00000656 <__fp_mpack_finite>:
 656:	91 50       	subi	r25, 0x01	; 1
 658:	20 f4       	brcc	.+8      	; 0x662 <__fp_mpack_finite+0xc>
 65a:	87 95       	ror	r24
 65c:	77 95       	ror	r23
 65e:	67 95       	ror	r22
 660:	b7 95       	ror	r27
 662:	88 0f       	add	r24, r24
 664:	91 1d       	adc	r25, r1
 666:	96 95       	lsr	r25
 668:	87 95       	ror	r24
 66a:	97 f9       	bld	r25, 7
 66c:	08 95       	ret

0000066e <_exit>:
 66e:	f8 94       	cli

00000670 <__stop_program>:
 670:	ff cf       	rjmp	.-2      	; 0x670 <__stop_program>
