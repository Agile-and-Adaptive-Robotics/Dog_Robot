
Valve_Manifold_Testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000366  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  000003da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000835  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ff  00000000  00000000  00000cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000335  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  000016e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000483  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000196  00000000  00000000  00001c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001d9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	71 c0       	rjmp	.+226    	; 0xfa <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e6 e6       	ldi	r30, 0x66	; 102
  48:	f3 e0       	ldi	r31, 0x03	; 3
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 31       	cpi	r26, 0x10	; 16
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	08 d0       	rcall	.+16     	; 0x78 <main>
  68:	7c c1       	rjmp	.+760    	; 0x362 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <spi_write_read>:
const float Kp = 1.0;

// SPI write read function
unsigned char spi_write_read(unsigned char spi_data)
{
	SPDR=spi_data;
  6c:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR & (1<<SPIF))==0);	// Wait until the data transfer is complete.
  6e:	0d b4       	in	r0, 0x2d	; 45
  70:	07 fe       	sbrs	r0, 7
  72:	fd cf       	rjmp	.-6      	; 0x6e <spi_write_read+0x2>
	return SPDR;
  74:	8e b5       	in	r24, 0x2e	; 46
}
  76:	08 95       	ret

00000078 <main>:

int main (void)
{

	//Compute the pressure conversion factor.
	pressure_conversion = 5./1023;
  78:	8a e0       	ldi	r24, 0x0A	; 10
  7a:	98 e2       	ldi	r25, 0x28	; 40
  7c:	a0 ea       	ldi	r26, 0xA0	; 160
  7e:	bb e3       	ldi	r27, 0x3B	; 59
  80:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pressure_conversion>
  84:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <pressure_conversion+0x1>
  88:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <pressure_conversion+0x2>
  8c:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <pressure_conversion+0x3>
	
	//Compute the dac conversion factor.
	dac_conversion = 4095/5.;
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 ec       	ldi	r25, 0xC0	; 192
  94:	ac e4       	ldi	r26, 0x4C	; 76
  96:	b4 e4       	ldi	r27, 0x44	; 68
  98:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dac_conversion>
  9c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <dac_conversion+0x1>
  a0:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <dac_conversion+0x2>
  a4:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <dac_conversion+0x3>
	
	//Setup pins for SPI Interface, Chip Select, LEDs, and Serial Communication.
	DDRB = 0b00101111;		//Set Output Ports for the SPI Interface & Chip Select.
  a8:	8f e2       	ldi	r24, 0x2F	; 47
  aa:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00111000;		//Set pins 3, 4, & 5 on Port C as output for LEDs.
  ac:	88 e3       	ldi	r24, 0x38	; 56
  ae:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11100010;		//Set pin 1 on port D as output for serial communication.  Set pins 5, 6, & 7 on Port D as output for LEDs.
  b0:	82 ee       	ldi	r24, 0xE2	; 226
  b2:	8a b9       	out	0x0a, r24	; 10
	
	//Initialize the DAC Pins.
	sbi(PORTB,0);			//Set the Chip Select high.
  b4:	28 9a       	sbi	0x05, 0	; 5
	sbi(PORTB,1);			//Set the LDAC high.
  b6:	29 9a       	sbi	0x05, 1	; 5
	
	//Initialize the LED Pins.
	sbi(PORTC,3);
  b8:	43 9a       	sbi	0x08, 3	; 8
	sbi(PORTC,4);
  ba:	44 9a       	sbi	0x08, 4	; 8
	sbi(PORTC,5);
  bc:	45 9a       	sbi	0x08, 5	; 8
	
	sbi(PORTD,5);
  be:	5d 9a       	sbi	0x0b, 5	; 11
	sbi(PORTD,6);
  c0:	5e 9a       	sbi	0x0b, 6	; 11
	sbi(PORTD,7);
  c2:	5f 9a       	sbi	0x0b, 7	; 11
	
	//Setup for ADC.
	ADCSRA = 0b10000111;	//ADC on, /128 for a 16 MHz clock, interrupt off.
  c4:	87 e8       	ldi	r24, 0x87	; 135
  c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	
	// Setup for SPI Communication.
	SPCR=0b01010010;
  ca:	82 e5       	ldi	r24, 0x52	; 82
  cc:	8c bd       	out	0x2c, r24	; 44
	SPSR=0b00000000;
  ce:	1d bc       	out	0x2d, r1	; 45
	
	//Setup the timer for the interrupts.
	TCCR1B |= (1 << WGM12); // Configure timer 1 for CTC mode
  d0:	e1 e8       	ldi	r30, 0x81	; 129
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	88 60       	ori	r24, 0x08	; 8
  d8:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
  da:	af e6       	ldi	r26, 0x6F	; 111
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	8c 91       	ld	r24, X
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	8c 93       	st	X, r24

	//Enable global interrupts.
	sei();
  e4:	78 94       	sei
	//OCR1A = 15624;	//Set CTC compare value to 1 Hz at 1MHz AVR clock, with a prescaler of 64			//Original Example.
	//OCR1A = 62499;	//Set CTC compare value to 1 Hz at 16MHz AVR clock, with a prescaler of 256			//1 Hz Example.
	//OCR1A = 1999;		//Set CTC compare value to 1 kHz at 16MHz AVR clock, with a prescaler of 8			//1 kHz Example.
	//OCR1A = 399;		//Set CTC compare value to 5 kHz at 16MHz AVR clock, with a prescaler of 8			//5 kHz Example.
	//OCR1A = 15;			//Set CTC compare value to ~416 kHz at 16MHz AVR clock, with a prescaler of 1	//Fastest Example (~416 kHz).
	OCR1A = 15999;		//16MHz clock, prescaler of 1, 1 kHz interrupt.
  e6:	8f e7       	ldi	r24, 0x7F	; 127
  e8:	9e e3       	ldi	r25, 0x3E	; 62
  ea:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
  ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
	
	//Set the timer prescaler.
	//TCCR1B |= ((1 << CS10) | (1 << CS11)); // Start timer at Fcpu/64
	//TCCR1B |= ((0 << CS10) | (0 << CS11) | (1 << CS12)); // Start timer at Fcpu/256						//1 Hz Example.
	//TCCR1B |= ((0 << CS10) | (1 << CS11) | (0 << CS12)); // Start timer at Fcpu/8							//1 kHz and 5 kHz Example.
	TCCR1B |= ((1 << CS10) | (0 << CS11) | (0 << CS12));	//Sets Prescaler to 1.
  f2:	80 81       	ld	r24, Z
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	80 83       	st	Z, r24
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <main+0x80>

000000fa <__vector_11>:
	while(1){}

}

ISR(TIMER1_COMPA_vect)
{
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	cf 92       	push	r12
 106:	df 92       	push	r13
 108:	ef 92       	push	r14
 10a:	ff 92       	push	r15
 10c:	2f 93       	push	r18
 10e:	3f 93       	push	r19
 110:	4f 93       	push	r20
 112:	5f 93       	push	r21
 114:	6f 93       	push	r22
 116:	7f 93       	push	r23
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
	//Convert the adc value for the actual pressure into a voltage.
	p_actual = pressure_conversion*adc_data2;			//[V] Pressure Sensor Reading.  Converts [0-1023] to [0-5] V.
	*/
	
	//Convert the actual pressure voltage into a dac value.
	dac_data = dac_conversion*5.;				//[0-4095] Actual Pressure.  Converts [0-5] V to [0-4095].
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	40 ea       	ldi	r20, 0xA0	; 160
 12a:	50 e4       	ldi	r21, 0x40	; 64
 12c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <dac_conversion>
 130:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <dac_conversion+0x1>
 134:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dac_conversion+0x2>
 138:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dac_conversion+0x3>
 13c:	87 d0       	rcall	.+270    	; 0x24c <__mulsf3>
 13e:	31 d0       	rcall	.+98     	; 0x1a2 <__fixunssfsi>
 140:	6b 01       	movw	r12, r22
 142:	7c 01       	movw	r14, r24
 144:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <dac_data+0x1>
 148:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <dac_data>
	
	//Output a value to the DAC.  DAC value should be [0-4095].
	
	//Convert the ADC data to a form that the DAC will recognize.
	spi_data_0 = 0x00;								//Zero spi_data_0.
	spi_data_0 = (dac_data & 0x0F00) >> 8;			//Set up the first byte to write by mapping bits 8-11 to the lower 4 bit positions.
 14c:	cb 01       	movw	r24, r22
 14e:	88 27       	eor	r24, r24
 150:	9f 70       	andi	r25, 0x0F	; 15
	spi_data_0 = spi_data_0 + 0b00110000;			//Now add the upper 4 DAC control bits.
	spi_data_1 = (dac_data & 0xFF);					//Setup the second byte to write by mapping bits 0-7 to the lower 8 bit positions.

	//Write the ADC data to the DAC.
	cbi(PORTB,0);								// Activate the chip - set chip select to zero
 152:	28 98       	cbi	0x05, 0	; 5
	dummy_read = spi_write_read(spi_data_0);	// Write/Read first byte
 154:	80 e3       	ldi	r24, 0x30	; 48
 156:	89 0f       	add	r24, r25
 158:	89 df       	rcall	.-238    	; 0x6c <spi_write_read>
	dummy_read = spi_write_read(spi_data_1);  	// Write/Read second byte
 15a:	8c 2d       	mov	r24, r12
 15c:	87 df       	rcall	.-242    	; 0x6c <spi_write_read>
	sbi(PORTB,0);								// Release the chip  - set chip select to one
 15e:	28 9a       	sbi	0x05, 0	; 5
	
	//Cycle the LDAC.
	cbi(PORTB,1);			//Set the LDAC low.
 160:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	00 c0       	rjmp	.+0      	; 0x164 <__vector_11+0x6a>
	_delay_ms(0.0001);		//Wait the specified LDAC duration.
	sbi(PORTB,1);			//Set the LDAC high.
 164:	29 9a       	sbi	0x05, 1	; 5
	
	//Advance the counter.
	++count;
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 16a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 174:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	bf 91       	pop	r27
 17e:	af 91       	pop	r26
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	7f 91       	pop	r23
 186:	6f 91       	pop	r22
 188:	5f 91       	pop	r21
 18a:	4f 91       	pop	r20
 18c:	3f 91       	pop	r19
 18e:	2f 91       	pop	r18
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	df 90       	pop	r13
 196:	cf 90       	pop	r12
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <__fixunssfsi>:
 1a2:	33 d0       	rcall	.+102    	; 0x20a <__fp_splitA>
 1a4:	88 f0       	brcs	.+34     	; 0x1c8 <__fixunssfsi+0x26>
 1a6:	9f 57       	subi	r25, 0x7F	; 127
 1a8:	90 f0       	brcs	.+36     	; 0x1ce <__fixunssfsi+0x2c>
 1aa:	b9 2f       	mov	r27, r25
 1ac:	99 27       	eor	r25, r25
 1ae:	b7 51       	subi	r27, 0x17	; 23
 1b0:	a0 f0       	brcs	.+40     	; 0x1da <__fixunssfsi+0x38>
 1b2:	d1 f0       	breq	.+52     	; 0x1e8 <__fixunssfsi+0x46>
 1b4:	66 0f       	add	r22, r22
 1b6:	77 1f       	adc	r23, r23
 1b8:	88 1f       	adc	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	1a f0       	brmi	.+6      	; 0x1c4 <__fixunssfsi+0x22>
 1be:	ba 95       	dec	r27
 1c0:	c9 f7       	brne	.-14     	; 0x1b4 <__fixunssfsi+0x12>
 1c2:	12 c0       	rjmp	.+36     	; 0x1e8 <__fixunssfsi+0x46>
 1c4:	b1 30       	cpi	r27, 0x01	; 1
 1c6:	81 f0       	breq	.+32     	; 0x1e8 <__fixunssfsi+0x46>
 1c8:	3a d0       	rcall	.+116    	; 0x23e <__fp_zero>
 1ca:	b1 e0       	ldi	r27, 0x01	; 1
 1cc:	08 95       	ret
 1ce:	37 c0       	rjmp	.+110    	; 0x23e <__fp_zero>
 1d0:	67 2f       	mov	r22, r23
 1d2:	78 2f       	mov	r23, r24
 1d4:	88 27       	eor	r24, r24
 1d6:	b8 5f       	subi	r27, 0xF8	; 248
 1d8:	39 f0       	breq	.+14     	; 0x1e8 <__fixunssfsi+0x46>
 1da:	b9 3f       	cpi	r27, 0xF9	; 249
 1dc:	cc f3       	brlt	.-14     	; 0x1d0 <__fixunssfsi+0x2e>
 1de:	86 95       	lsr	r24
 1e0:	77 95       	ror	r23
 1e2:	67 95       	ror	r22
 1e4:	b3 95       	inc	r27
 1e6:	d9 f7       	brne	.-10     	; 0x1de <__fixunssfsi+0x3c>
 1e8:	3e f4       	brtc	.+14     	; 0x1f8 <__fixunssfsi+0x56>
 1ea:	90 95       	com	r25
 1ec:	80 95       	com	r24
 1ee:	70 95       	com	r23
 1f0:	61 95       	neg	r22
 1f2:	7f 4f       	sbci	r23, 0xFF	; 255
 1f4:	8f 4f       	sbci	r24, 0xFF	; 255
 1f6:	9f 4f       	sbci	r25, 0xFF	; 255
 1f8:	08 95       	ret

000001fa <__fp_split3>:
 1fa:	57 fd       	sbrc	r21, 7
 1fc:	90 58       	subi	r25, 0x80	; 128
 1fe:	44 0f       	add	r20, r20
 200:	55 1f       	adc	r21, r21
 202:	59 f0       	breq	.+22     	; 0x21a <__fp_splitA+0x10>
 204:	5f 3f       	cpi	r21, 0xFF	; 255
 206:	71 f0       	breq	.+28     	; 0x224 <__fp_splitA+0x1a>
 208:	47 95       	ror	r20

0000020a <__fp_splitA>:
 20a:	88 0f       	add	r24, r24
 20c:	97 fb       	bst	r25, 7
 20e:	99 1f       	adc	r25, r25
 210:	61 f0       	breq	.+24     	; 0x22a <__fp_splitA+0x20>
 212:	9f 3f       	cpi	r25, 0xFF	; 255
 214:	79 f0       	breq	.+30     	; 0x234 <__fp_splitA+0x2a>
 216:	87 95       	ror	r24
 218:	08 95       	ret
 21a:	12 16       	cp	r1, r18
 21c:	13 06       	cpc	r1, r19
 21e:	14 06       	cpc	r1, r20
 220:	55 1f       	adc	r21, r21
 222:	f2 cf       	rjmp	.-28     	; 0x208 <__fp_split3+0xe>
 224:	46 95       	lsr	r20
 226:	f1 df       	rcall	.-30     	; 0x20a <__fp_splitA>
 228:	08 c0       	rjmp	.+16     	; 0x23a <__fp_splitA+0x30>
 22a:	16 16       	cp	r1, r22
 22c:	17 06       	cpc	r1, r23
 22e:	18 06       	cpc	r1, r24
 230:	99 1f       	adc	r25, r25
 232:	f1 cf       	rjmp	.-30     	; 0x216 <__fp_splitA+0xc>
 234:	86 95       	lsr	r24
 236:	71 05       	cpc	r23, r1
 238:	61 05       	cpc	r22, r1
 23a:	08 94       	sec
 23c:	08 95       	ret

0000023e <__fp_zero>:
 23e:	e8 94       	clt

00000240 <__fp_szero>:
 240:	bb 27       	eor	r27, r27
 242:	66 27       	eor	r22, r22
 244:	77 27       	eor	r23, r23
 246:	cb 01       	movw	r24, r22
 248:	97 f9       	bld	r25, 7
 24a:	08 95       	ret

0000024c <__mulsf3>:
 24c:	0b d0       	rcall	.+22     	; 0x264 <__mulsf3x>
 24e:	78 c0       	rjmp	.+240    	; 0x340 <__fp_round>
 250:	69 d0       	rcall	.+210    	; 0x324 <__fp_pscA>
 252:	28 f0       	brcs	.+10     	; 0x25e <__mulsf3+0x12>
 254:	6e d0       	rcall	.+220    	; 0x332 <__fp_pscB>
 256:	18 f0       	brcs	.+6      	; 0x25e <__mulsf3+0x12>
 258:	95 23       	and	r25, r21
 25a:	09 f0       	breq	.+2      	; 0x25e <__mulsf3+0x12>
 25c:	5a c0       	rjmp	.+180    	; 0x312 <__fp_inf>
 25e:	5f c0       	rjmp	.+190    	; 0x31e <__fp_nan>
 260:	11 24       	eor	r1, r1
 262:	ee cf       	rjmp	.-36     	; 0x240 <__fp_szero>

00000264 <__mulsf3x>:
 264:	ca df       	rcall	.-108    	; 0x1fa <__fp_split3>
 266:	a0 f3       	brcs	.-24     	; 0x250 <__mulsf3+0x4>

00000268 <__mulsf3_pse>:
 268:	95 9f       	mul	r25, r21
 26a:	d1 f3       	breq	.-12     	; 0x260 <__mulsf3+0x14>
 26c:	95 0f       	add	r25, r21
 26e:	50 e0       	ldi	r21, 0x00	; 0
 270:	55 1f       	adc	r21, r21
 272:	62 9f       	mul	r22, r18
 274:	f0 01       	movw	r30, r0
 276:	72 9f       	mul	r23, r18
 278:	bb 27       	eor	r27, r27
 27a:	f0 0d       	add	r31, r0
 27c:	b1 1d       	adc	r27, r1
 27e:	63 9f       	mul	r22, r19
 280:	aa 27       	eor	r26, r26
 282:	f0 0d       	add	r31, r0
 284:	b1 1d       	adc	r27, r1
 286:	aa 1f       	adc	r26, r26
 288:	64 9f       	mul	r22, r20
 28a:	66 27       	eor	r22, r22
 28c:	b0 0d       	add	r27, r0
 28e:	a1 1d       	adc	r26, r1
 290:	66 1f       	adc	r22, r22
 292:	82 9f       	mul	r24, r18
 294:	22 27       	eor	r18, r18
 296:	b0 0d       	add	r27, r0
 298:	a1 1d       	adc	r26, r1
 29a:	62 1f       	adc	r22, r18
 29c:	73 9f       	mul	r23, r19
 29e:	b0 0d       	add	r27, r0
 2a0:	a1 1d       	adc	r26, r1
 2a2:	62 1f       	adc	r22, r18
 2a4:	83 9f       	mul	r24, r19
 2a6:	a0 0d       	add	r26, r0
 2a8:	61 1d       	adc	r22, r1
 2aa:	22 1f       	adc	r18, r18
 2ac:	74 9f       	mul	r23, r20
 2ae:	33 27       	eor	r19, r19
 2b0:	a0 0d       	add	r26, r0
 2b2:	61 1d       	adc	r22, r1
 2b4:	23 1f       	adc	r18, r19
 2b6:	84 9f       	mul	r24, r20
 2b8:	60 0d       	add	r22, r0
 2ba:	21 1d       	adc	r18, r1
 2bc:	82 2f       	mov	r24, r18
 2be:	76 2f       	mov	r23, r22
 2c0:	6a 2f       	mov	r22, r26
 2c2:	11 24       	eor	r1, r1
 2c4:	9f 57       	subi	r25, 0x7F	; 127
 2c6:	50 40       	sbci	r21, 0x00	; 0
 2c8:	8a f0       	brmi	.+34     	; 0x2ec <__mulsf3_pse+0x84>
 2ca:	e1 f0       	breq	.+56     	; 0x304 <__mulsf3_pse+0x9c>
 2cc:	88 23       	and	r24, r24
 2ce:	4a f0       	brmi	.+18     	; 0x2e2 <__mulsf3_pse+0x7a>
 2d0:	ee 0f       	add	r30, r30
 2d2:	ff 1f       	adc	r31, r31
 2d4:	bb 1f       	adc	r27, r27
 2d6:	66 1f       	adc	r22, r22
 2d8:	77 1f       	adc	r23, r23
 2da:	88 1f       	adc	r24, r24
 2dc:	91 50       	subi	r25, 0x01	; 1
 2de:	50 40       	sbci	r21, 0x00	; 0
 2e0:	a9 f7       	brne	.-22     	; 0x2cc <__mulsf3_pse+0x64>
 2e2:	9e 3f       	cpi	r25, 0xFE	; 254
 2e4:	51 05       	cpc	r21, r1
 2e6:	70 f0       	brcs	.+28     	; 0x304 <__mulsf3_pse+0x9c>
 2e8:	14 c0       	rjmp	.+40     	; 0x312 <__fp_inf>
 2ea:	aa cf       	rjmp	.-172    	; 0x240 <__fp_szero>
 2ec:	5f 3f       	cpi	r21, 0xFF	; 255
 2ee:	ec f3       	brlt	.-6      	; 0x2ea <__mulsf3_pse+0x82>
 2f0:	98 3e       	cpi	r25, 0xE8	; 232
 2f2:	dc f3       	brlt	.-10     	; 0x2ea <__mulsf3_pse+0x82>
 2f4:	86 95       	lsr	r24
 2f6:	77 95       	ror	r23
 2f8:	67 95       	ror	r22
 2fa:	b7 95       	ror	r27
 2fc:	f7 95       	ror	r31
 2fe:	e7 95       	ror	r30
 300:	9f 5f       	subi	r25, 0xFF	; 255
 302:	c1 f7       	brne	.-16     	; 0x2f4 <__mulsf3_pse+0x8c>
 304:	fe 2b       	or	r31, r30
 306:	88 0f       	add	r24, r24
 308:	91 1d       	adc	r25, r1
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
 30e:	97 f9       	bld	r25, 7
 310:	08 95       	ret

00000312 <__fp_inf>:
 312:	97 f9       	bld	r25, 7
 314:	9f 67       	ori	r25, 0x7F	; 127
 316:	80 e8       	ldi	r24, 0x80	; 128
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	08 95       	ret

0000031e <__fp_nan>:
 31e:	9f ef       	ldi	r25, 0xFF	; 255
 320:	80 ec       	ldi	r24, 0xC0	; 192
 322:	08 95       	ret

00000324 <__fp_pscA>:
 324:	00 24       	eor	r0, r0
 326:	0a 94       	dec	r0
 328:	16 16       	cp	r1, r22
 32a:	17 06       	cpc	r1, r23
 32c:	18 06       	cpc	r1, r24
 32e:	09 06       	cpc	r0, r25
 330:	08 95       	ret

00000332 <__fp_pscB>:
 332:	00 24       	eor	r0, r0
 334:	0a 94       	dec	r0
 336:	12 16       	cp	r1, r18
 338:	13 06       	cpc	r1, r19
 33a:	14 06       	cpc	r1, r20
 33c:	05 06       	cpc	r0, r21
 33e:	08 95       	ret

00000340 <__fp_round>:
 340:	09 2e       	mov	r0, r25
 342:	03 94       	inc	r0
 344:	00 0c       	add	r0, r0
 346:	11 f4       	brne	.+4      	; 0x34c <__fp_round+0xc>
 348:	88 23       	and	r24, r24
 34a:	52 f0       	brmi	.+20     	; 0x360 <__fp_round+0x20>
 34c:	bb 0f       	add	r27, r27
 34e:	40 f4       	brcc	.+16     	; 0x360 <__fp_round+0x20>
 350:	bf 2b       	or	r27, r31
 352:	11 f4       	brne	.+4      	; 0x358 <__fp_round+0x18>
 354:	60 ff       	sbrs	r22, 0
 356:	04 c0       	rjmp	.+8      	; 0x360 <__fp_round+0x20>
 358:	6f 5f       	subi	r22, 0xFF	; 255
 35a:	7f 4f       	sbci	r23, 0xFF	; 255
 35c:	8f 4f       	sbci	r24, 0xFF	; 255
 35e:	9f 4f       	sbci	r25, 0xFF	; 255
 360:	08 95       	ret

00000362 <_exit>:
 362:	f8 94       	cli

00000364 <__stop_program>:
 364:	ff cf       	rjmp	.-2      	; 0x364 <__stop_program>
