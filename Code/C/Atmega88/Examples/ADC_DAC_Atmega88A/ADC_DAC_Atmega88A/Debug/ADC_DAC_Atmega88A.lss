
ADC_DAC_Atmega88A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a8  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d4  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033b  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000013dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000417  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000194  00000000  00000000  00001887  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	46 c0       	rjmp	.+140    	; 0xa4 <__vector_11>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	08 d0       	rcall	.+16     	; 0x52 <main>
  42:	75 c0       	rjmp	.+234    	; 0x12e <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <spi_write_read>:
#include <util/delay.h>   // Include the built in Delay Function

// SPI write read function
unsigned char spi_write_read(unsigned char spi_data)
{
	SPDR=spi_data;
  46:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR & (1<<SPIF))==0);	// Wait until the data transfer is complete.
  48:	0d b4       	in	r0, 0x2d	; 45
  4a:	07 fe       	sbrs	r0, 7
  4c:	fd cf       	rjmp	.-6      	; 0x48 <spi_write_read+0x2>
	return SPDR;
  4e:	8e b5       	in	r24, 0x2e	; 46
}
  50:	08 95       	ret

00000052 <main>:

int main (void)
{
	
	//Setup pins for SPI Interface, Chip Select, LEDs, and Serial Communication.
	DDRB = 0b00101111;		//Set Output Ports for the SPI Interface & Chip Select.
  52:	8f e2       	ldi	r24, 0x2F	; 47
  54:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00111000;		//Set pins 3, 4, & 5 on Port C as output for LEDs.
  56:	88 e3       	ldi	r24, 0x38	; 56
  58:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11100010;		//Set pin 1 on port D as output for serial communication.  Set pins 5, 6, & 7 on Port D as output for LEDs.
  5a:	82 ee       	ldi	r24, 0xE2	; 226
  5c:	8a b9       	out	0x0a, r24	; 10
	
	//Initialize the pin values.
	sbi(PORTB,0);			//Set the Chip Select high.
  5e:	28 9a       	sbi	0x05, 0	; 5
	sbi(PORTB,1);			//Set the LDAC high.
  60:	29 9a       	sbi	0x05, 1	; 5
	
	sbi(PORTC,3);			//Turn Off LEDs.
  62:	43 9a       	sbi	0x08, 3	; 8
	sbi(PORTC,4);
  64:	44 9a       	sbi	0x08, 4	; 8
	sbi(PORTC,5);
  66:	45 9a       	sbi	0x08, 5	; 8
	
	sbi(PORTD,5);
  68:	5d 9a       	sbi	0x0b, 5	; 11
	sbi(PORTD,6);
  6a:	5e 9a       	sbi	0x0b, 6	; 11
	sbi(PORTD,7);
  6c:	5f 9a       	sbi	0x0b, 7	; 11
	
	//Setup for ADC.
	ADCSRA = 0b10000111;	//ADC on, /128 for a 16 MHz clock, interrupt off.
  6e:	87 e8       	ldi	r24, 0x87	; 135
  70:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	
	// Setup for SPI.
	SPCR=0b01010010;
  74:	82 e5       	ldi	r24, 0x52	; 82
  76:	8c bd       	out	0x2c, r24	; 44
	SPSR=0b00000000;
  78:	1d bc       	out	0x2d, r1	; 45
	
	//Setup the timer for the interrupts.
	TCCR1B |= (1 << WGM12); // Configure timer 1 for CTC mode
  7a:	e1 e8       	ldi	r30, 0x81	; 129
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	88 60       	ori	r24, 0x08	; 8
  82:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
  84:	af e6       	ldi	r26, 0x6F	; 111
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	8c 91       	ld	r24, X
  8a:	82 60       	ori	r24, 0x02	; 2
  8c:	8c 93       	st	X, r24

	sei(); // Enable global interrupts
  8e:	78 94       	sei

	// OCR1A = Target_Timer_Count = (Clock_Frequency / (Prescale * Target_Frequency)) – 1

	//OCR1A = 15624;	//Set CTC compare value to 1 Hz at 1MHz AVR clock, with a prescaler of 64			//Original Example.
	//OCR1A = 62499;	//Set CTC compare value to 1 Hz at 16MHz AVR clock, with a prescaler of 256			//1 Hz Example.
	OCR1A = 1999;		//Set CTC compare value to 1 kHz at 16MHz AVR clock, with a prescaler of 8			//1 kHz Example.
  90:	8f ec       	ldi	r24, 0xCF	; 207
  92:	97 e0       	ldi	r25, 0x07	; 7
  94:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
  98:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
	//OCR1A = 399;		//Set CTC compare value to 5 kHz at 16MHz AVR clock, with a prescaler of 8			//5 kHz Example.
	//OCR1A = 15;			//Set CTC compare value to ~416 kHz at 16MHz AVR clock, with a prescaler of 1	//Fastest Example (~416 kHz).

	//TCCR1B |= ((1 << CS10) | (1 << CS11)); // Start timer at Fcpu/64
	//TCCR1B |= ((0 << CS10) | (0 << CS11) | (1 << CS12)); // Start timer at Fcpu/256						//1 Hz Example.
	TCCR1B |= ((0 << CS10) | (1 << CS11) | (0 << CS12)); // Start timer at Fcpu/8							//1 kHz and 5 kHz Example.
  9c:	80 81       	ld	r24, Z
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	80 83       	st	Z, r24
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x50>

000000a4 <__vector_11>:
	while(1){}

}

ISR(TIMER1_COMPA_vect)
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	3f 93       	push	r19
  b2:	4f 93       	push	r20
  b4:	5f 93       	push	r21
  b6:	6f 93       	push	r22
  b8:	7f 93       	push	r23
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	af 93       	push	r26
  c0:	bf 93       	push	r27
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	unsigned char			spi_data_1;
	unsigned char			dummy_read;
	unsigned int			adc_data;
	
	//Set the AD Channel.
	ADMUX  = 0b00000000;	//Set the AD input to Channel 0.
  ca:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>

	//Start the AD conversion.
	ADCSRA = ADCSRA | 0b01000000;				    // Start AD conversion.  Sets bit 7 to 1 and leaves all other bits the same.
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
	while ((ADCSRA & 0b01000000) == 0b01000000);    // Wait while AD conversion is executed.  Waits until bit 7 is set to 1.
  d8:	80 81       	ld	r24, Z
  da:	86 fd       	sbrc	r24, 6
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <__vector_11+0x34>
	
	//Retrieve the ADC value.
	adc_data = (4095/1023)*ADCW;
  de:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
  e2:	d0 91 79 00 	lds	r29, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
  e6:	cc 0f       	add	r28, r28
  e8:	dd 1f       	adc	r29, r29
  ea:	cc 0f       	add	r28, r28
  ec:	dd 1f       	adc	r29, r29

	//Convert the ADC data to a form that the DAC will recognize.
	spi_data_0 = 0x00;								//Zero spi_data_0.
	spi_data_0 = (adc_data & 0x0F00) >> 8;			//Set up the first byte to write by mapping bits 8-11 to the lower 4 bit positions.
  ee:	ce 01       	movw	r24, r28
  f0:	88 27       	eor	r24, r24
  f2:	9f 70       	andi	r25, 0x0F	; 15
	spi_data_0 = spi_data_0 + 0b00110000;			//Now add the upper 4 DAC control bits.
	spi_data_1 = (adc_data & 0xFF);					//Setup the second byte to write by mapping bits 0-7 to the lower 8 bit positions.

	//Write the ADC data to the DAC.
	cbi(PORTB,0);								// Activate the chip - set chip select to zero
  f4:	28 98       	cbi	0x05, 0	; 5
	dummy_read = spi_write_read(spi_data_0);	// Write/Read first byte
  f6:	80 e3       	ldi	r24, 0x30	; 48
  f8:	89 0f       	add	r24, r25
  fa:	a5 df       	rcall	.-182    	; 0x46 <spi_write_read>
	dummy_read = spi_write_read(spi_data_1);  	// Write/Read second byte
  fc:	8c 2f       	mov	r24, r28
  fe:	a3 df       	rcall	.-186    	; 0x46 <spi_write_read>
	sbi(PORTB,0);								// Release the chip  - set chip select to one
 100:	28 9a       	sbi	0x05, 0	; 5
	
	//Cycle the LDAC.
	cbi(PORTB,1);			//Set the LDAC low.
 102:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	00 c0       	rjmp	.+0      	; 0x106 <__vector_11+0x62>
	_delay_ms(0.0001);		//Wait the specified LDAC duration.
	sbi(PORTB,1);			//Set the LDAC high.
 106:	29 9a       	sbi	0x05, 1	; 5
	
 108:	ff 91       	pop	r31
 10a:	ef 91       	pop	r30
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	bf 91       	pop	r27
 112:	af 91       	pop	r26
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	7f 91       	pop	r23
 11a:	6f 91       	pop	r22
 11c:	5f 91       	pop	r21
 11e:	4f 91       	pop	r20
 120:	3f 91       	pop	r19
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
