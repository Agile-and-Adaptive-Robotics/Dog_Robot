
Digital_PWM_Atmega88A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000058a  0000061e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800106  00800106  00000624  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000890  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f9  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a3  00000000  00000000  00001649  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  000019ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a3  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001dd  00000000  00000000  00001f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	84 c0       	rjmp	.+264    	; 0x120 <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea e8       	ldi	r30, 0x8A	; 138
  48:	f5 e0       	ldi	r31, 0x05	; 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a6 30       	cpi	r26, 0x06	; 6
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a6 e0       	ldi	r26, 0x06	; 6
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ac 31       	cpi	r26, 0x1C	; 28
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	08 d0       	rcall	.+16     	; 0x78 <main>
  68:	8e c2       	rjmp	.+1308   	; 0x586 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <spi_write_read>:
float duty_cycle_conversion;

// SPI write read function
unsigned char spi_write_read(unsigned char spi_data)
{
	SPDR=spi_data;
  6c:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR & (1<<SPIF))==0);	// Wait until the data transfer is complete.
  6e:	0d b4       	in	r0, 0x2d	; 45
  70:	07 fe       	sbrs	r0, 7
  72:	fd cf       	rjmp	.-6      	; 0x6e <spi_write_read+0x2>
	return SPDR;
  74:	8e b5       	in	r24, 0x2e	; 46
}
  76:	08 95       	ret

00000078 <main>:

int main (void)
{
	
	//Compute the total number of points per cycle.
	num_total = freq_dac/freq_pwm;
  78:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <freq_dac>
  7c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <freq_dac+0x1>
  80:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <freq_pwm>
  84:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <freq_pwm+0x1>
  88:	6a d2       	rcall	.+1236   	; 0x55e <__udivmodhi4>
  8a:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <num_total+0x1>
  8e:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <num_total>
	
	//Compute the value to which to set the dac when we turn it on.
	dac_on_value = round((5./5.12)*4095);
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 ef       	ldi	r25, 0xF0	; 240
  96:	a9 e7       	ldi	r26, 0x79	; 121
  98:	b5 e4       	ldi	r27, 0x45	; 69
  9a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <dac_on_value>
  9e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <dac_on_value+0x1>
  a2:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <dac_on_value+0x2>
  a6:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <dac_on_value+0x3>
	
	//Compute the adc conversion factor.
	adc_conversion = 4095/1023;
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <adc_conversion+0x1>
  b2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <adc_conversion>
	
	//Compute the duty cycle conversion factor.
	duty_cycle_conversion = 1./4095;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	98 e0       	ldi	r25, 0x08	; 8
  ba:	a0 e8       	ldi	r26, 0x80	; 128
  bc:	b9 e3       	ldi	r27, 0x39	; 57
  be:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <duty_cycle_conversion>
  c2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <duty_cycle_conversion+0x1>
  c6:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <duty_cycle_conversion+0x2>
  ca:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <duty_cycle_conversion+0x3>
	
	//Setup pins for SPI Interface, Chip Select, LEDs, and Serial Communication.
	DDRB = 0b00101111;		//Set Output Ports for the SPI Interface & Chip Select.
  ce:	8f e2       	ldi	r24, 0x2F	; 47
  d0:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00111000;		//Set pins 3, 4, & 5 on Port C as output for LEDs.
  d2:	88 e3       	ldi	r24, 0x38	; 56
  d4:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11100010;		//Set pin 1 on port D as output for serial communication.  Set pins 5, 6, & 7 on Port D as output for LEDs.
  d6:	82 ee       	ldi	r24, 0xE2	; 226
  d8:	8a b9       	out	0x0a, r24	; 10
	
	//Initialize the pin values.
	sbi(PORTB,0);			//Set the Chip Select high.
  da:	28 9a       	sbi	0x05, 0	; 5
	sbi(PORTB,1);			//Set the LDAC high.
  dc:	29 9a       	sbi	0x05, 1	; 5
	
	sbi(PORTC,3);			//Turn Off LEDs.
  de:	43 9a       	sbi	0x08, 3	; 8
	sbi(PORTC,4);
  e0:	44 9a       	sbi	0x08, 4	; 8
	sbi(PORTC,5);
  e2:	45 9a       	sbi	0x08, 5	; 8
	
	sbi(PORTD,5);
  e4:	5d 9a       	sbi	0x0b, 5	; 11
	sbi(PORTD,6);
  e6:	5e 9a       	sbi	0x0b, 6	; 11
	sbi(PORTD,7);
  e8:	5f 9a       	sbi	0x0b, 7	; 11
	
	//Setup for ADC.
	ADCSRA = 0b10000111;	//ADC on, /128 for a 16 MHz clock, interrupt off.
  ea:	87 e8       	ldi	r24, 0x87	; 135
  ec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	
	// Setup for SPI.
	SPCR=0b01010010;
  f0:	82 e5       	ldi	r24, 0x52	; 82
  f2:	8c bd       	out	0x2c, r24	; 44
	SPSR=0b00000000;
  f4:	1d bc       	out	0x2d, r1	; 45
	
	//Setup the timer for the interrupts.
	TCCR1B |= (1 << WGM12); // Configure timer 1 for CTC mode
  f6:	e1 e8       	ldi	r30, 0x81	; 129
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
 100:	af e6       	ldi	r26, 0x6F	; 111
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	8c 91       	ld	r24, X
 106:	82 60       	ori	r24, 0x02	; 2
 108:	8c 93       	st	X, r24

	sei(); // Enable global interrupts
 10a:	78 94       	sei
	//OCR1A = 15624;	//Set CTC compare value to 1 Hz at 1MHz AVR clock, with a prescaler of 64			//Original Example.
	//OCR1A = 62499;	//Set CTC compare value to 1 Hz at 16MHz AVR clock, with a prescaler of 256			//1 Hz Example.
	//OCR1A = 1999;		//Set CTC compare value to 1 kHz at 16MHz AVR clock, with a prescaler of 8			//1 kHz Example.
	//OCR1A = 399;		//Set CTC compare value to 5 kHz at 16MHz AVR clock, with a prescaler of 8			//5 kHz Example.
	//OCR1A = 15;			//Set CTC compare value to ~416 kHz at 16MHz AVR clock, with a prescaler of 1	//Fastest Example (~416 kHz).
	OCR1A = 3999;		//16MHz clock, prescaler of 1, 4 kHz interrupt.
 10c:	8f e9       	ldi	r24, 0x9F	; 159
 10e:	9f e0       	ldi	r25, 0x0F	; 15
 110:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 114:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
	
	
	//TCCR1B |= ((1 << CS10) | (1 << CS11)); // Start timer at Fcpu/64
	//TCCR1B |= ((0 << CS10) | (0 << CS11) | (1 << CS12)); // Start timer at Fcpu/256						//1 Hz Example.
	//TCCR1B |= ((0 << CS10) | (1 << CS11) | (0 << CS12)); // Start timer at Fcpu/8							//1 kHz and 5 kHz Example.
	TCCR1B |= ((1 << CS10) | (0 << CS11) | (0 << CS12)); // Start timer at Fcpu/1							//1 kHz and 5 kHz Example.
 118:	80 81       	ld	r24, Z
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	80 83       	st	Z, r24
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0xa6>

00000120 <__vector_11>:
	while(1){}

}

ISR(TIMER1_COMPA_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	cf 92       	push	r12
 12c:	df 92       	push	r13
 12e:	ef 92       	push	r14
 130:	ff 92       	push	r15
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31
	unsigned char			spi_data_1;
	unsigned char			dummy_read;
	unsigned int			adc_data;
	
	//Set the AD Channel.
	ADMUX  = 0b00000000;	//Set the AD input to Channel 0.
 14e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>

	//Start the AD conversion.
	ADCSRA = ADCSRA | 0b01000000;				    // Start AD conversion.  Sets bit 7 to 1 and leaves all other bits the same.
 152:	ea e7       	ldi	r30, 0x7A	; 122
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	80 83       	st	Z, r24
	while ((ADCSRA & 0b01000000) == 0b01000000);    // Wait while AD conversion is executed.  Waits until bit 7 is set to 1.
 15c:	80 81       	ld	r24, Z
 15e:	86 fd       	sbrc	r24, 6
 160:	fd cf       	rjmp	.-6      	; 0x15c <__vector_11+0x3c>
	
	//Retrieve the ADC value.
	adc_data = adc_conversion*ADCW;
 162:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 166:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
	
	//Compute the duty cycle.
	duty_cycle = duty_cycle_conversion*adc_data;
 16a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <adc_conversion>
 16e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <adc_conversion+0x1>
 172:	28 9f       	mul	r18, r24
 174:	b0 01       	movw	r22, r0
 176:	29 9f       	mul	r18, r25
 178:	70 0d       	add	r23, r0
 17a:	38 9f       	mul	r19, r24
 17c:	70 0d       	add	r23, r0
 17e:	11 24       	eor	r1, r1
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	b2 d0       	rcall	.+356    	; 0x2ea <__floatunsisf>
 186:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <duty_cycle_conversion>
 18a:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <duty_cycle_conversion+0x1>
 18e:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <duty_cycle_conversion+0x2>
 192:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <duty_cycle_conversion+0x3>
 196:	0f d1       	rcall	.+542    	; 0x3b6 <__mulsf3>
 198:	6b 01       	movw	r12, r22
 19a:	7c 01       	movw	r14, r24
 19c:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <duty_cycle>
 1a0:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <duty_cycle+0x1>
 1a4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <duty_cycle+0x2>
 1a8:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <duty_cycle+0x3>

	//Compute the number of points for the given duty cycle.
	num_crit = round(duty_cycle*num_total);
 1ac:	c0 91 0a 01 	lds	r28, 0x010A	; 0x80010a <num_total>
 1b0:	d0 91 0b 01 	lds	r29, 0x010B	; 0x80010b <num_total+0x1>
 1b4:	be 01       	movw	r22, r28
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	97 d0       	rcall	.+302    	; 0x2ea <__floatunsisf>
 1bc:	a7 01       	movw	r20, r14
 1be:	96 01       	movw	r18, r12
 1c0:	fa d0       	rcall	.+500    	; 0x3b6 <__mulsf3>
 1c2:	5c d1       	rcall	.+696    	; 0x47c <round>
 1c4:	66 d0       	rcall	.+204    	; 0x292 <__fixunssfsi>
 1c6:	9b 01       	movw	r18, r22
 1c8:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <num_crit+0x1>
 1cc:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <num_crit>
		adc_data = 0;									//Turn the dac output off.
	}
	*/
	
	//Determine whether to turn the output pin on or off.
	if (count >= num_total)								//If the count has reached the maximum value...
 1d0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count>
 1d4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count+0x1>
 1d8:	8c 17       	cp	r24, r28
 1da:	9d 07       	cpc	r25, r29
 1dc:	c0 f0       	brcs	.+48     	; 0x20e <__vector_11+0xee>
	{
		count = 0;								//Reset the counter to zero.
 1de:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <count+0x1>
 1e2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <count>
		dac_data = dac_on_value;				//Turn the dac output on.
 1e6:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <dac_on_value>
 1ea:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <dac_on_value+0x1>
 1ee:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <dac_on_value+0x2>
 1f2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <dac_on_value+0x3>
 1f6:	4d d0       	rcall	.+154    	; 0x292 <__fixunssfsi>
 1f8:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <__data_end+0x1>
 1fc:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <__data_end>
		bDacOn = 1;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 208:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 20c:	11 c0       	rjmp	.+34     	; 0x230 <__vector_11+0x110>
	}
	else if ( bDacOn && (count >= num_crit) )								//If we are in the active part of the cycle...
 20e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 212:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
 216:	45 2b       	or	r20, r21
 218:	59 f0       	breq	.+22     	; 0x230 <__vector_11+0x110>
 21a:	82 17       	cp	r24, r18
 21c:	93 07       	cpc	r25, r19
 21e:	40 f0       	brcs	.+16     	; 0x230 <__vector_11+0x110>
	{
		dac_data = 0;									//Turn the dac output off.
 220:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 224:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		bDacOn = 0;
 228:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 22c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	
	//dac_data = adc_data;
	
	//Convert the ADC data to a form that the DAC will recognize.
	spi_data_0 = 0x00;								//Zero spi_data_0.
	spi_data_0 = (dac_data & 0x0F00) >> 8;			//Set up the first byte to write by mapping bits 8-11 to the lower 4 bit positions.
 230:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <__data_end>
 234:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <__data_end+0x1>
 238:	ce 01       	movw	r24, r28
 23a:	88 27       	eor	r24, r24
 23c:	9f 70       	andi	r25, 0x0F	; 15
	spi_data_0 = spi_data_0 + 0b00110000;			//Now add the upper 4 DAC control bits.
	spi_data_1 = (dac_data & 0xFF);					//Setup the second byte to write by mapping bits 0-7 to the lower 8 bit positions.

	//Write the ADC data to the DAC.
	cbi(PORTB,0);								// Activate the chip - set chip select to zero
 23e:	28 98       	cbi	0x05, 0	; 5
	dummy_read = spi_write_read(spi_data_0);	// Write/Read first byte
 240:	80 e3       	ldi	r24, 0x30	; 48
 242:	89 0f       	add	r24, r25
 244:	13 df       	rcall	.-474    	; 0x6c <spi_write_read>
	dummy_read = spi_write_read(spi_data_1);  	// Write/Read second byte
 246:	8c 2f       	mov	r24, r28
 248:	11 df       	rcall	.-478    	; 0x6c <spi_write_read>
	sbi(PORTB,0);								// Release the chip  - set chip select to one
 24a:	28 9a       	sbi	0x05, 0	; 5
	
	//Cycle the LDAC.
	cbi(PORTB,1);			//Set the LDAC low.
 24c:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24e:	00 c0       	rjmp	.+0      	; 0x250 <__vector_11+0x130>
	_delay_ms(0.0001);		//Wait the specified LDAC duration.
	sbi(PORTB,1);			//Set the LDAC high.
 250:	29 9a       	sbi	0x05, 1	; 5
	
	
	
	//Advance the counter.
	++count;
 252:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count>
 256:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count+0x1>
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count+0x1>
 260:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count>
	
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	7f 91       	pop	r23
 276:	6f 91       	pop	r22
 278:	5f 91       	pop	r21
 27a:	4f 91       	pop	r20
 27c:	3f 91       	pop	r19
 27e:	2f 91       	pop	r18
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	df 90       	pop	r13
 286:	cf 90       	pop	r12
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <__fixunssfsi>:
 292:	70 d0       	rcall	.+224    	; 0x374 <__fp_splitA>
 294:	88 f0       	brcs	.+34     	; 0x2b8 <__fixunssfsi+0x26>
 296:	9f 57       	subi	r25, 0x7F	; 127
 298:	90 f0       	brcs	.+36     	; 0x2be <__fixunssfsi+0x2c>
 29a:	b9 2f       	mov	r27, r25
 29c:	99 27       	eor	r25, r25
 29e:	b7 51       	subi	r27, 0x17	; 23
 2a0:	a0 f0       	brcs	.+40     	; 0x2ca <__fixunssfsi+0x38>
 2a2:	d1 f0       	breq	.+52     	; 0x2d8 <__fixunssfsi+0x46>
 2a4:	66 0f       	add	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	88 1f       	adc	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	1a f0       	brmi	.+6      	; 0x2b4 <__fixunssfsi+0x22>
 2ae:	ba 95       	dec	r27
 2b0:	c9 f7       	brne	.-14     	; 0x2a4 <__fixunssfsi+0x12>
 2b2:	12 c0       	rjmp	.+36     	; 0x2d8 <__fixunssfsi+0x46>
 2b4:	b1 30       	cpi	r27, 0x01	; 1
 2b6:	81 f0       	breq	.+32     	; 0x2d8 <__fixunssfsi+0x46>
 2b8:	77 d0       	rcall	.+238    	; 0x3a8 <__fp_zero>
 2ba:	b1 e0       	ldi	r27, 0x01	; 1
 2bc:	08 95       	ret
 2be:	74 c0       	rjmp	.+232    	; 0x3a8 <__fp_zero>
 2c0:	67 2f       	mov	r22, r23
 2c2:	78 2f       	mov	r23, r24
 2c4:	88 27       	eor	r24, r24
 2c6:	b8 5f       	subi	r27, 0xF8	; 248
 2c8:	39 f0       	breq	.+14     	; 0x2d8 <__fixunssfsi+0x46>
 2ca:	b9 3f       	cpi	r27, 0xF9	; 249
 2cc:	cc f3       	brlt	.-14     	; 0x2c0 <__fixunssfsi+0x2e>
 2ce:	86 95       	lsr	r24
 2d0:	77 95       	ror	r23
 2d2:	67 95       	ror	r22
 2d4:	b3 95       	inc	r27
 2d6:	d9 f7       	brne	.-10     	; 0x2ce <__fixunssfsi+0x3c>
 2d8:	3e f4       	brtc	.+14     	; 0x2e8 <__fixunssfsi+0x56>
 2da:	90 95       	com	r25
 2dc:	80 95       	com	r24
 2de:	70 95       	com	r23
 2e0:	61 95       	neg	r22
 2e2:	7f 4f       	sbci	r23, 0xFF	; 255
 2e4:	8f 4f       	sbci	r24, 0xFF	; 255
 2e6:	9f 4f       	sbci	r25, 0xFF	; 255
 2e8:	08 95       	ret

000002ea <__floatunsisf>:
 2ea:	e8 94       	clt
 2ec:	09 c0       	rjmp	.+18     	; 0x300 <__floatsisf+0x12>

000002ee <__floatsisf>:
 2ee:	97 fb       	bst	r25, 7
 2f0:	3e f4       	brtc	.+14     	; 0x300 <__floatsisf+0x12>
 2f2:	90 95       	com	r25
 2f4:	80 95       	com	r24
 2f6:	70 95       	com	r23
 2f8:	61 95       	neg	r22
 2fa:	7f 4f       	sbci	r23, 0xFF	; 255
 2fc:	8f 4f       	sbci	r24, 0xFF	; 255
 2fe:	9f 4f       	sbci	r25, 0xFF	; 255
 300:	99 23       	and	r25, r25
 302:	a9 f0       	breq	.+42     	; 0x32e <__floatsisf+0x40>
 304:	f9 2f       	mov	r31, r25
 306:	96 e9       	ldi	r25, 0x96	; 150
 308:	bb 27       	eor	r27, r27
 30a:	93 95       	inc	r25
 30c:	f6 95       	lsr	r31
 30e:	87 95       	ror	r24
 310:	77 95       	ror	r23
 312:	67 95       	ror	r22
 314:	b7 95       	ror	r27
 316:	f1 11       	cpse	r31, r1
 318:	f8 cf       	rjmp	.-16     	; 0x30a <__floatsisf+0x1c>
 31a:	fa f4       	brpl	.+62     	; 0x35a <__floatsisf+0x6c>
 31c:	bb 0f       	add	r27, r27
 31e:	11 f4       	brne	.+4      	; 0x324 <__floatsisf+0x36>
 320:	60 ff       	sbrs	r22, 0
 322:	1b c0       	rjmp	.+54     	; 0x35a <__floatsisf+0x6c>
 324:	6f 5f       	subi	r22, 0xFF	; 255
 326:	7f 4f       	sbci	r23, 0xFF	; 255
 328:	8f 4f       	sbci	r24, 0xFF	; 255
 32a:	9f 4f       	sbci	r25, 0xFF	; 255
 32c:	16 c0       	rjmp	.+44     	; 0x35a <__floatsisf+0x6c>
 32e:	88 23       	and	r24, r24
 330:	11 f0       	breq	.+4      	; 0x336 <__floatsisf+0x48>
 332:	96 e9       	ldi	r25, 0x96	; 150
 334:	11 c0       	rjmp	.+34     	; 0x358 <__floatsisf+0x6a>
 336:	77 23       	and	r23, r23
 338:	21 f0       	breq	.+8      	; 0x342 <__floatsisf+0x54>
 33a:	9e e8       	ldi	r25, 0x8E	; 142
 33c:	87 2f       	mov	r24, r23
 33e:	76 2f       	mov	r23, r22
 340:	05 c0       	rjmp	.+10     	; 0x34c <__floatsisf+0x5e>
 342:	66 23       	and	r22, r22
 344:	71 f0       	breq	.+28     	; 0x362 <__floatsisf+0x74>
 346:	96 e8       	ldi	r25, 0x86	; 134
 348:	86 2f       	mov	r24, r22
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	2a f0       	brmi	.+10     	; 0x35a <__floatsisf+0x6c>
 350:	9a 95       	dec	r25
 352:	66 0f       	add	r22, r22
 354:	77 1f       	adc	r23, r23
 356:	88 1f       	adc	r24, r24
 358:	da f7       	brpl	.-10     	; 0x350 <__floatsisf+0x62>
 35a:	88 0f       	add	r24, r24
 35c:	96 95       	lsr	r25
 35e:	87 95       	ror	r24
 360:	97 f9       	bld	r25, 7
 362:	08 95       	ret

00000364 <__fp_split3>:
 364:	57 fd       	sbrc	r21, 7
 366:	90 58       	subi	r25, 0x80	; 128
 368:	44 0f       	add	r20, r20
 36a:	55 1f       	adc	r21, r21
 36c:	59 f0       	breq	.+22     	; 0x384 <__fp_splitA+0x10>
 36e:	5f 3f       	cpi	r21, 0xFF	; 255
 370:	71 f0       	breq	.+28     	; 0x38e <__fp_splitA+0x1a>
 372:	47 95       	ror	r20

00000374 <__fp_splitA>:
 374:	88 0f       	add	r24, r24
 376:	97 fb       	bst	r25, 7
 378:	99 1f       	adc	r25, r25
 37a:	61 f0       	breq	.+24     	; 0x394 <__fp_splitA+0x20>
 37c:	9f 3f       	cpi	r25, 0xFF	; 255
 37e:	79 f0       	breq	.+30     	; 0x39e <__fp_splitA+0x2a>
 380:	87 95       	ror	r24
 382:	08 95       	ret
 384:	12 16       	cp	r1, r18
 386:	13 06       	cpc	r1, r19
 388:	14 06       	cpc	r1, r20
 38a:	55 1f       	adc	r21, r21
 38c:	f2 cf       	rjmp	.-28     	; 0x372 <__fp_split3+0xe>
 38e:	46 95       	lsr	r20
 390:	f1 df       	rcall	.-30     	; 0x374 <__fp_splitA>
 392:	08 c0       	rjmp	.+16     	; 0x3a4 <__fp_splitA+0x30>
 394:	16 16       	cp	r1, r22
 396:	17 06       	cpc	r1, r23
 398:	18 06       	cpc	r1, r24
 39a:	99 1f       	adc	r25, r25
 39c:	f1 cf       	rjmp	.-30     	; 0x380 <__fp_splitA+0xc>
 39e:	86 95       	lsr	r24
 3a0:	71 05       	cpc	r23, r1
 3a2:	61 05       	cpc	r22, r1
 3a4:	08 94       	sec
 3a6:	08 95       	ret

000003a8 <__fp_zero>:
 3a8:	e8 94       	clt

000003aa <__fp_szero>:
 3aa:	bb 27       	eor	r27, r27
 3ac:	66 27       	eor	r22, r22
 3ae:	77 27       	eor	r23, r23
 3b0:	cb 01       	movw	r24, r22
 3b2:	97 f9       	bld	r25, 7
 3b4:	08 95       	ret

000003b6 <__mulsf3>:
 3b6:	0b d0       	rcall	.+22     	; 0x3ce <__mulsf3x>
 3b8:	c1 c0       	rjmp	.+386    	; 0x53c <__fp_round>
 3ba:	b2 d0       	rcall	.+356    	; 0x520 <__fp_pscA>
 3bc:	28 f0       	brcs	.+10     	; 0x3c8 <__mulsf3+0x12>
 3be:	b7 d0       	rcall	.+366    	; 0x52e <__fp_pscB>
 3c0:	18 f0       	brcs	.+6      	; 0x3c8 <__mulsf3+0x12>
 3c2:	95 23       	and	r25, r21
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <__mulsf3+0x12>
 3c6:	7a c0       	rjmp	.+244    	; 0x4bc <__fp_inf>
 3c8:	a8 c0       	rjmp	.+336    	; 0x51a <__fp_nan>
 3ca:	11 24       	eor	r1, r1
 3cc:	ee cf       	rjmp	.-36     	; 0x3aa <__fp_szero>

000003ce <__mulsf3x>:
 3ce:	ca df       	rcall	.-108    	; 0x364 <__fp_split3>
 3d0:	a0 f3       	brcs	.-24     	; 0x3ba <__mulsf3+0x4>

000003d2 <__mulsf3_pse>:
 3d2:	95 9f       	mul	r25, r21
 3d4:	d1 f3       	breq	.-12     	; 0x3ca <__mulsf3+0x14>
 3d6:	95 0f       	add	r25, r21
 3d8:	50 e0       	ldi	r21, 0x00	; 0
 3da:	55 1f       	adc	r21, r21
 3dc:	62 9f       	mul	r22, r18
 3de:	f0 01       	movw	r30, r0
 3e0:	72 9f       	mul	r23, r18
 3e2:	bb 27       	eor	r27, r27
 3e4:	f0 0d       	add	r31, r0
 3e6:	b1 1d       	adc	r27, r1
 3e8:	63 9f       	mul	r22, r19
 3ea:	aa 27       	eor	r26, r26
 3ec:	f0 0d       	add	r31, r0
 3ee:	b1 1d       	adc	r27, r1
 3f0:	aa 1f       	adc	r26, r26
 3f2:	64 9f       	mul	r22, r20
 3f4:	66 27       	eor	r22, r22
 3f6:	b0 0d       	add	r27, r0
 3f8:	a1 1d       	adc	r26, r1
 3fa:	66 1f       	adc	r22, r22
 3fc:	82 9f       	mul	r24, r18
 3fe:	22 27       	eor	r18, r18
 400:	b0 0d       	add	r27, r0
 402:	a1 1d       	adc	r26, r1
 404:	62 1f       	adc	r22, r18
 406:	73 9f       	mul	r23, r19
 408:	b0 0d       	add	r27, r0
 40a:	a1 1d       	adc	r26, r1
 40c:	62 1f       	adc	r22, r18
 40e:	83 9f       	mul	r24, r19
 410:	a0 0d       	add	r26, r0
 412:	61 1d       	adc	r22, r1
 414:	22 1f       	adc	r18, r18
 416:	74 9f       	mul	r23, r20
 418:	33 27       	eor	r19, r19
 41a:	a0 0d       	add	r26, r0
 41c:	61 1d       	adc	r22, r1
 41e:	23 1f       	adc	r18, r19
 420:	84 9f       	mul	r24, r20
 422:	60 0d       	add	r22, r0
 424:	21 1d       	adc	r18, r1
 426:	82 2f       	mov	r24, r18
 428:	76 2f       	mov	r23, r22
 42a:	6a 2f       	mov	r22, r26
 42c:	11 24       	eor	r1, r1
 42e:	9f 57       	subi	r25, 0x7F	; 127
 430:	50 40       	sbci	r21, 0x00	; 0
 432:	8a f0       	brmi	.+34     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 434:	e1 f0       	breq	.+56     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 436:	88 23       	and	r24, r24
 438:	4a f0       	brmi	.+18     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 43a:	ee 0f       	add	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	bb 1f       	adc	r27, r27
 440:	66 1f       	adc	r22, r22
 442:	77 1f       	adc	r23, r23
 444:	88 1f       	adc	r24, r24
 446:	91 50       	subi	r25, 0x01	; 1
 448:	50 40       	sbci	r21, 0x00	; 0
 44a:	a9 f7       	brne	.-22     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 44c:	9e 3f       	cpi	r25, 0xFE	; 254
 44e:	51 05       	cpc	r21, r1
 450:	70 f0       	brcs	.+28     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 452:	34 c0       	rjmp	.+104    	; 0x4bc <__fp_inf>
 454:	aa cf       	rjmp	.-172    	; 0x3aa <__fp_szero>
 456:	5f 3f       	cpi	r21, 0xFF	; 255
 458:	ec f3       	brlt	.-6      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 45a:	98 3e       	cpi	r25, 0xE8	; 232
 45c:	dc f3       	brlt	.-10     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 45e:	86 95       	lsr	r24
 460:	77 95       	ror	r23
 462:	67 95       	ror	r22
 464:	b7 95       	ror	r27
 466:	f7 95       	ror	r31
 468:	e7 95       	ror	r30
 46a:	9f 5f       	subi	r25, 0xFF	; 255
 46c:	c1 f7       	brne	.-16     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 46e:	fe 2b       	or	r31, r30
 470:	88 0f       	add	r24, r24
 472:	91 1d       	adc	r25, r1
 474:	96 95       	lsr	r25
 476:	87 95       	ror	r24
 478:	97 f9       	bld	r25, 7
 47a:	08 95       	ret

0000047c <round>:
 47c:	7b df       	rcall	.-266    	; 0x374 <__fp_splitA>
 47e:	e0 f0       	brcs	.+56     	; 0x4b8 <round+0x3c>
 480:	9e 37       	cpi	r25, 0x7E	; 126
 482:	d8 f0       	brcs	.+54     	; 0x4ba <round+0x3e>
 484:	96 39       	cpi	r25, 0x96	; 150
 486:	b8 f4       	brcc	.+46     	; 0x4b6 <round+0x3a>
 488:	9e 38       	cpi	r25, 0x8E	; 142
 48a:	48 f4       	brcc	.+18     	; 0x49e <round+0x22>
 48c:	67 2f       	mov	r22, r23
 48e:	78 2f       	mov	r23, r24
 490:	88 27       	eor	r24, r24
 492:	98 5f       	subi	r25, 0xF8	; 248
 494:	f9 cf       	rjmp	.-14     	; 0x488 <round+0xc>
 496:	86 95       	lsr	r24
 498:	77 95       	ror	r23
 49a:	67 95       	ror	r22
 49c:	93 95       	inc	r25
 49e:	95 39       	cpi	r25, 0x95	; 149
 4a0:	d0 f3       	brcs	.-12     	; 0x496 <round+0x1a>
 4a2:	b6 2f       	mov	r27, r22
 4a4:	b1 70       	andi	r27, 0x01	; 1
 4a6:	6b 0f       	add	r22, r27
 4a8:	71 1d       	adc	r23, r1
 4aa:	81 1d       	adc	r24, r1
 4ac:	20 f4       	brcc	.+8      	; 0x4b6 <round+0x3a>
 4ae:	87 95       	ror	r24
 4b0:	77 95       	ror	r23
 4b2:	67 95       	ror	r22
 4b4:	93 95       	inc	r25
 4b6:	08 c0       	rjmp	.+16     	; 0x4c8 <__fp_mintl>
 4b8:	22 c0       	rjmp	.+68     	; 0x4fe <__fp_mpack>
 4ba:	77 cf       	rjmp	.-274    	; 0x3aa <__fp_szero>

000004bc <__fp_inf>:
 4bc:	97 f9       	bld	r25, 7
 4be:	9f 67       	ori	r25, 0x7F	; 127
 4c0:	80 e8       	ldi	r24, 0x80	; 128
 4c2:	70 e0       	ldi	r23, 0x00	; 0
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	08 95       	ret

000004c8 <__fp_mintl>:
 4c8:	88 23       	and	r24, r24
 4ca:	71 f4       	brne	.+28     	; 0x4e8 <__fp_mintl+0x20>
 4cc:	77 23       	and	r23, r23
 4ce:	21 f0       	breq	.+8      	; 0x4d8 <__fp_mintl+0x10>
 4d0:	98 50       	subi	r25, 0x08	; 8
 4d2:	87 2b       	or	r24, r23
 4d4:	76 2f       	mov	r23, r22
 4d6:	07 c0       	rjmp	.+14     	; 0x4e6 <__fp_mintl+0x1e>
 4d8:	66 23       	and	r22, r22
 4da:	11 f4       	brne	.+4      	; 0x4e0 <__fp_mintl+0x18>
 4dc:	99 27       	eor	r25, r25
 4de:	0d c0       	rjmp	.+26     	; 0x4fa <__fp_mintl+0x32>
 4e0:	90 51       	subi	r25, 0x10	; 16
 4e2:	86 2b       	or	r24, r22
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	2a f0       	brmi	.+10     	; 0x4f4 <__fp_mintl+0x2c>
 4ea:	9a 95       	dec	r25
 4ec:	66 0f       	add	r22, r22
 4ee:	77 1f       	adc	r23, r23
 4f0:	88 1f       	adc	r24, r24
 4f2:	da f7       	brpl	.-10     	; 0x4ea <__fp_mintl+0x22>
 4f4:	88 0f       	add	r24, r24
 4f6:	96 95       	lsr	r25
 4f8:	87 95       	ror	r24
 4fa:	97 f9       	bld	r25, 7
 4fc:	08 95       	ret

000004fe <__fp_mpack>:
 4fe:	9f 3f       	cpi	r25, 0xFF	; 255
 500:	31 f0       	breq	.+12     	; 0x50e <__fp_mpack_finite+0xc>

00000502 <__fp_mpack_finite>:
 502:	91 50       	subi	r25, 0x01	; 1
 504:	20 f4       	brcc	.+8      	; 0x50e <__fp_mpack_finite+0xc>
 506:	87 95       	ror	r24
 508:	77 95       	ror	r23
 50a:	67 95       	ror	r22
 50c:	b7 95       	ror	r27
 50e:	88 0f       	add	r24, r24
 510:	91 1d       	adc	r25, r1
 512:	96 95       	lsr	r25
 514:	87 95       	ror	r24
 516:	97 f9       	bld	r25, 7
 518:	08 95       	ret

0000051a <__fp_nan>:
 51a:	9f ef       	ldi	r25, 0xFF	; 255
 51c:	80 ec       	ldi	r24, 0xC0	; 192
 51e:	08 95       	ret

00000520 <__fp_pscA>:
 520:	00 24       	eor	r0, r0
 522:	0a 94       	dec	r0
 524:	16 16       	cp	r1, r22
 526:	17 06       	cpc	r1, r23
 528:	18 06       	cpc	r1, r24
 52a:	09 06       	cpc	r0, r25
 52c:	08 95       	ret

0000052e <__fp_pscB>:
 52e:	00 24       	eor	r0, r0
 530:	0a 94       	dec	r0
 532:	12 16       	cp	r1, r18
 534:	13 06       	cpc	r1, r19
 536:	14 06       	cpc	r1, r20
 538:	05 06       	cpc	r0, r21
 53a:	08 95       	ret

0000053c <__fp_round>:
 53c:	09 2e       	mov	r0, r25
 53e:	03 94       	inc	r0
 540:	00 0c       	add	r0, r0
 542:	11 f4       	brne	.+4      	; 0x548 <__fp_round+0xc>
 544:	88 23       	and	r24, r24
 546:	52 f0       	brmi	.+20     	; 0x55c <__fp_round+0x20>
 548:	bb 0f       	add	r27, r27
 54a:	40 f4       	brcc	.+16     	; 0x55c <__fp_round+0x20>
 54c:	bf 2b       	or	r27, r31
 54e:	11 f4       	brne	.+4      	; 0x554 <__fp_round+0x18>
 550:	60 ff       	sbrs	r22, 0
 552:	04 c0       	rjmp	.+8      	; 0x55c <__fp_round+0x20>
 554:	6f 5f       	subi	r22, 0xFF	; 255
 556:	7f 4f       	sbci	r23, 0xFF	; 255
 558:	8f 4f       	sbci	r24, 0xFF	; 255
 55a:	9f 4f       	sbci	r25, 0xFF	; 255
 55c:	08 95       	ret

0000055e <__udivmodhi4>:
 55e:	aa 1b       	sub	r26, r26
 560:	bb 1b       	sub	r27, r27
 562:	51 e1       	ldi	r21, 0x11	; 17
 564:	07 c0       	rjmp	.+14     	; 0x574 <__udivmodhi4_ep>

00000566 <__udivmodhi4_loop>:
 566:	aa 1f       	adc	r26, r26
 568:	bb 1f       	adc	r27, r27
 56a:	a6 17       	cp	r26, r22
 56c:	b7 07       	cpc	r27, r23
 56e:	10 f0       	brcs	.+4      	; 0x574 <__udivmodhi4_ep>
 570:	a6 1b       	sub	r26, r22
 572:	b7 0b       	sbc	r27, r23

00000574 <__udivmodhi4_ep>:
 574:	88 1f       	adc	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	5a 95       	dec	r21
 57a:	a9 f7       	brne	.-22     	; 0x566 <__udivmodhi4_loop>
 57c:	80 95       	com	r24
 57e:	90 95       	com	r25
 580:	bc 01       	movw	r22, r24
 582:	cd 01       	movw	r24, r26
 584:	08 95       	ret

00000586 <_exit>:
 586:	f8 94       	cli

00000588 <__stop_program>:
 588:	ff cf       	rjmp	.-2      	; 0x588 <__stop_program>
