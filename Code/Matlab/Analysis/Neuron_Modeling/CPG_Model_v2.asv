%% CPG Model

% Clear Everything.
clear, close('all'), clc

%% Define the Network Properties.

% Define the number of neurons in the simulation.
num_neurons = 2;

% Define the voltage range for the CPG to oscillator over.
R = 20e-3;                                          % [V] Biphasic Equilibrium Voltage Range.

% Define membrane properties.
Cm = 5e-9;                   % [C] Membrane Capacitance.
Gm = 1e-6;                   % [S] Membrane Conductance.
Er = -60e-3;                 % [V] Membrane Resting (Equilibrium) Potential.

% Define synapse properties.
Elo = Er;                    % [V] Presynaptic Threshold.
Ehi = Elo + R;               % [V] Presynaptic Saturation Level.
Es = -100e-3;                % [V] Synaptic Equilibrium Potential.
Es_tilde = Es - Er;         % [V] Synaptic Equilibrium Potential With Respect to
delta = 0.01e-3;                 % [V] Voltage Difference Between Inhibited Neuron's Equilibrium Potential & the Presynaptic Threshold.

% Define sodium channel activation properties.
Am = 1;
Sm = -50;
Em = Ehi;
Em_tilde = Em - Er;

% Define sodium channel deactivation properties.
Ah = 0.5;
Sh = 50;
Eh = Elo;
Eh_tilde = Eh - Er;

% Define the steady state sodium channel activation & deactivation parameters.
minf_func = @(U) 1./(1 + Am.*exp(-Sm.*(Em_tilde - U)));
hinf_func = @(U) 1./(1 + Ah.*exp(-Sh.*(Eh_tilde - U)));

% Define the sodium channel reversal potential.
Ena = 50e-3;                % [V] Sodium Channel Reversal Potential.
Ena_tilde = Ena - Er;       % [V] Sodium Channel Reversal Potential With Respect to the Resting Potential.

% Compute the sodium channel conductance.
Gna = (Gm*R)/(minf_func(R)*hinf_func(R)*(Ena_tilde - R));       % [S] Sodium Channel Conductance.

% Define the maximum sodium channel time constant.
tauhmax = 0.3;             % [s] Maximum Sodium Channel Time Constant.

% Define the sodium channel time constant.
tauh_func = @(U) tauhmax*hinf_func(U).*sqrt(Ah.*exp(-Sh.*(Eh_tilde - U)));       % [s] Sodium Channel Time Constant.

% Compute the maximum synaptic conductance.
gsynmax = (-delta*(10^(-6)) - delta*Gna*minf_func(delta)*hinf_func(delta) + Gna*minf_func(delta)*hinf_func(delta)*Ena_tilde)/(delta - Es_tilde);

% Define a function to compute the synaptic conductance.
gsyn_func = @(Upre) gsynmax*min( max( Upre/R, 0 ), 1 );

% Define a function to compute the leak current.
Ileak_func = @(U) -Gm*U;

% Define a function to compute the synaptic current.
Isyn_func = @(Upre, Upost) gsyn_func(Upre).*( Es_tilde - Upost );

% Define a function to compute the sodium channel current.
Ina_func = @(U, h) Gna*minf_func(U).*h.*( Ena_tilde - U );

% Define a function to compute the applied current.
Iapp_func = @(t) zeros(num_neurons, 1);


% Us = (-R):0.0001:(3*R);
% minfs = minf_func(Us);
% hinfs = hinf_func(Us);
% tauhs = tauh_func(Us);
% 
% figure, hold on, grid on, xlabel('U [V]'), ylabel('m_{inf} [-]'), title('m_{inf} vs U'), plot(Us, minfs)
% figure, hold on, grid on, xlabel('U [V]'), ylabel('h_{inf} [-]'), title('h_{inf} vs U'), plot(Us, hinfs)
% figure, hold on, grid on, xlabel('U [V]'), ylabel('$\tau_{inf}$ [s]', 'Interpreter', 'latex'), title('$\tau_{inf}$ [s] vs U', 'Interpreter', 'latex'), plot(Us, tauhs)


%% Simulate the System.


% Define simulation properties.
t_sim_duration = 5;         % [s] Simulation Duration.
dt_sim = 1e-3;              % [s] Simulation Time Step.

% Create the simulation time vector.
ts = 0:dt_sim:t_sim_duration;       % [s] Simulation Time Vector.

% Compute the number of simulation time steps.
num_steps = length(ts) - 1;

% Create variables to store the simulation data.
[Us, hs, dUs, dhs, Ileaks, Isyns, Inas, Iapps, Itotals, Gsyns, minfs, hinfs, tauhs] = deal( zeros(num_neurons, length(ts)) );

% Initialize the simulation.
hs(:, 1) = hinf_func(Us(:, 1));
Iapps(1, 1) = 1e-9;

% Run the Simulation.
for k = 1:num_steps             % Iterate through each of the simulation time steps...
    
    % Compute the steady state sodium channel activation and deactivation parameters.
    minfs(:, k) = minf_func(Us(:, k));
    hinfs(:, k) = hinf_func(Us(:, k));

    % Compute the sodium channel time constant.
    tauhs(:, k) = tauh_func(Us(:, k));
    
    % Compute the synaptic conductances.
    Gsyns(:, k) = gsyn_func(flipud(Us(:, k)));

    % Compute the leak currents.
    Ileaks(:, k) = Ileak_func(Us(:, k));
    
    % Compute the synaptic currents.
    Isyns(:, k) = Isyn_func(flipud(Us(:, k)), Us(:, k));
    
    % Compute the sodium channel currents.
    Inas(:, k) = Ina_func(Us(:, k), hs(:, k));
    
%     % Compute the applied currents.
%     Iapps(:, k) = Iapp_func(ts(k));
    
    % Compute the total current.
    Itotals(:, k) = Ileaks(:, k) + Isyns(:, k) + Inas(:, k) + Iapps(:, k);

    % Compute the membrane voltage derivative.
    dUs(:, k) = Itotals(:, k)/Cm;
    
    % Compute the sodium channel deactivation parameter derivative.
    dhs(:, k) = (hinfs(:, k) - hs(:, k))./tauhs(:, k);
    
    % Estimate the next states.
    Us(:, k + 1) = Us(:, k) + dt_sim*dUs(:, k);
    hs(:, k + 1) = hs(:, k) + dt_sim*dhs(:, k);

end


%% Plot the Simulation Results.

% Create a figure to store the system state space trajectory.
fig_state_trajectory = figure('color', 'w', 'name', 'Network State Space Trajectory'); hold on, grid on, xlabel('Membrane Voltage w.r.t Resting Potential, U [V]'), ylabel('Na Ch. Deactivation, h [-]'), title('Network State Space Trajectory')
plot(Us(1, :), hs(1, :), '-', 'Linewidth', 3)
plot(Us(2, :), hs(2, :), '-', 'Linewidth', 3)

% Create a figure to store the system states over time.
fig_states_vs_time = figure('color', 'w', 'name', 'Network States Over Time');

subplot(2, 1, 1), hold on, grid on, xlabel('Time [s]'), ylabel('Membrane Voltage w.r.t. Resting Voltage, $U$ [V]', 'Interpreter', 'latex'), title('Membrane Voltage w.r.t. Resting Voltage, $U$ [V] vs Time [s]', 'Interpreter', 'latex')
plot(ts, Us, '-', 'Linewidth', 3)

subplot(2, 1, 2), hold on, grid on, xlabel('Time [s]'), ylabel('Sodium Channel Deactivation Parameter $h$, [-]', 'Interpreter', 'latex'), title('Sodium Channel Deactivation Parameter $h$, [-] vs Time [s]', 'Interpreter', 'latex')
plot(ts, hs, '-', 'Linewidth', 3)


% Create a figure to store the currents over time.
fig_currents_vs_time = figure('color', 'w', 'name', 'Network Currents Over Time');

subplot(5, 1, 1), hold on, grid on, xlabel('Time [s]'), ylabel('Leak Currents, $I_{leak}$ [A]', 'Interpreter', 'latex'), title('Leak Currents, $I_{leak}$ [A] vs Time [s]', 'Interpreter', 'latex')
plot(ts(1:end-1), Ileaks(:, 1:end-1), '-', 'Linewidth', 3) 

subplot(5, 1, 2), hold on, grid on, xlabel('Time [s]'), ylabel('Synaptic Currents, $I_{syn}$ [A]', 'Interpreter', 'latex'), title('Synaptic Currents, $I_{syn}$ [A] vs Time [s]', 'Interpreter', 'latex')
plot(ts(1:end-1), Isyns(:, 1:end-1), '-', 'Linewidth', 3) 

subplot(5, 1, 3), hold on, grid on, xlabel('Time [s]'), ylabel('Na Ch. Currents, $I_{Na}$ [A]', 'Interpreter', 'latex'), title('Na Ch. Currents, $I_{Na}$ [A] vs Time [s]', 'Interpreter', 'latex')
plot(ts(1:end-1), Inas(:, 1:end-1), '-', 'Linewidth', 3) 

subplot(5, 1, 4), hold on, grid on, xlabel('Time [s]'), ylabel('Applied Currents, $I_{app}$ [A]', 'Interpreter', 'latex'), title('Applied Currents, $I_{app}$ [A] vs Time [s]', 'Interpreter', 'latex')
plot(ts(1:end-1), Iapps(:, 1:end-1), '-', 'Linewidth', 3) 

subplot(5, 1, 5), hold on, grid on, xlabel('Time [s]'), ylabel('Total Currents, $I_{total}$ [A]', 'Interpreter', 'latex'), title('Total Currents, $I_{total}$ [A] vs Time [s]', 'Interpreter', 'latex')
plot(ts(1:end-1), Itotals(:, 1:end-1), '-', 'Linewidth', 3) 


% Create a figure to store the sodium channel activation & deactivation parameters over time.
fig_mhinf_vs_time = figure('color', 'w', 'name', 'Steady State Sodium Channel Activation ($m_{\infty}$) & Deactivation ($h_{\infty}$) Over Time', 'Interpreter', 'latex');

subplot(2, 1, 1), hold on, grid on, xlabel('Time [s]'), ylabel('Steady State Sodium Channel Activation, $m_{\infty}$ [-]', 'Interpreter', 'latex'), title('Steady State Sodium Channel Activation, $m_{\infty}$ [-]'


% %% Simulate the System.
% 
% 
% 
% % Define the simulation properties.
% V0 = [-60e-3; -60e-3; -60e-3; -60e-3];
% % h0 = [0; 0; 0; 0];
% h0 = [0.67; 0.67; 0.67; 0.67];
% x0 = [V0; h0];
% tspan = [0 5];
% 
% % Simulate the system.
% [ts, ys] = ode45(@HalfCenter, tspan, x0);
% 
% % Create arrays to store the hidden system states.
% 
% dxdt = zeros(size(ys));
% [Ileaks, Isyns, Inas, Iapps, Itotals] = deal( zeros(size(ys, 1), num_neurons) );
% 
% % Reconstruct the hidden system states.
% for k = 1:size(ys, 1)               % Iterate through each of the time steps...
%     
%     % Compute the hidden states for this time step.
%     [dxdt(k, :), Ileaks(k, :), Isyns(k, :), Inas(k, :), Iapps(k, :), Itotals(k, :)] = HalfCenter(0, ys(k, :));
% 
% end
% 
% %% Plot the System Response.
% 
% % Create figures to store the simulation data.
% fig_voltages_vs_time = figure('color', 'w', 'name', 'Membrane Voltage vs Time');
% fig_Na_deactivation_vs_time = figure('color', 'w', 'name', 'Na Ch. Deactivation vs Time');
% fig_state_trajectories = figure('color', 'w', 'name', 'State Trajectories');
% fig_leak_current_vs_time = figure('color', 'w', 'name', 'Leak Currents vs Time');
% fig_synapse_current_vs_time = figure('color', 'w', 'name', 'Synapse Currents vs Time');
% fig_Na_current_vs_time = figure('color', 'w', 'name', 'Sodium Channel Currents vs Time');
% fig_total_current_vs_time = figure('color', 'w', 'name', 'Total Currents vs Time');
% 
% 
% % Plot the states of the CPG neurons.
% for k = 1:num_neurons           % Iterate through each of the neurons...
% 
%     % Plot the CPG neuron membrane voltage over time.
%     figure(fig_voltages_vs_time), subplot(2, 2, k), hold on, grid on, xlabel('Time [s]', 'Interpreter', 'latex'), ylabel('Membrane Voltage, $V$ [V]', 'Interpreter', 'latex'), title(sprintf('Neuron %0.0f: Membrane Voltage, $V$ [V] vs Time', k), 'Interpreter', 'latex'), plot(ts, ys(:, k), '-', 'Linewidth', 3)
%     figure(fig_Na_deactivation_vs_time), subplot(2, 2, k), hold on, grid on, xlabel('Time [s]', 'Interpreter', 'latex'), ylabel('Na Ch. Deactivation, $h$ [-]', 'Interpreter', 'latex'), title(sprintf('Neuron %0.0f: Na Ch. Deactivation, $h$ [-] vs Time', k), 'Interpreter', 'latex'), plot(ts, ys(:, k + 4), '-', 'Linewidth', 3)
%     figure(fig_leak_current_vs_time), subplot(2, 2, k), hold on, grid on, xlabel('Time [s]', 'Interpreter', 'latex'), ylabel('Leak Current, $I_{leak}$ [A]', 'Interpreter', 'latex'), title(sprintf('Neuron %0.0f: Leak Current, $I_{leak}$ [A] vs Time', k), 'Interpreter', 'latex'), plot(ts, Ileaks(:, k), '-', 'Linewidth', 3)
%     figure(fig_synapse_current_vs_time), subplot(2, 2, k), hold on, grid on, xlabel('Time [s]', 'Interpreter', 'latex'), ylabel('Synapse Current, $I_{syn}$ [A]', 'Interpreter', 'latex'), title(sprintf('Neuron %0.0f: Synapse Current, $I_{syn}$ [A] vs Time', k), 'Interpreter', 'latex'), plot(ts, Isyns(:, k), '-', 'Linewidth', 3)
%     figure(fig_Na_current_vs_time), subplot(2, 2, k), hold on, grid on, xlabel('Time [s]', 'Interpreter', 'latex'), ylabel('Na Ch. Current, $I_{Na}$ [A]', 'Interpreter', 'latex'), title(sprintf('Neuron %0.0f: Na Ch. Current, $I_{Na}$ [A] vs Time', k), 'Interpreter', 'latex'), plot(ts, Inas(:, k), '-', 'Linewidth', 3)
%     figure(fig_total_current_vs_time), subplot(2, 2, k), hold on, grid on, xlabel('Time [s]', 'Interpreter', 'latex'), ylabel('Total Current, $I_{Na}$ [A]', 'Interpreter', 'latex'), title(sprintf('Neuron %0.0f: Total Current, $I_{total}$ [A] vs Time', k), 'Interpreter', 'latex'), plot(ts, Itotals(:, k), '-', 'Linewidth', 3)
% 
%     % Plot the CPG neuron state trajectory over time.
%     figure(fig_state_trajectories), subplot(2, 2, k), hold on, grid on, xlabel('Membrane Voltage, $V$ [V]', 'Interpreter', 'latex'), ylabel('Na Ch. Deactivation, $h$, [-]', 'Interpreter', 'latex'), title(sprintf('Neuron %0.0f: State Trajectory', k), 'Interpreter', 'latex'), plot(ys(:, k), ys(:, k + 4), '-', 'Linewidth', 3)
%     
% end
% 
% % legend('Membrane Voltage, V', 'Na Ch. Deactivation, h', 'Location', 'South', 'Orientation', 'Horizontal')
% 
% 
% %% 
% 
% % %% Define the System Dynamics.
% % 
% % function [dxdt, Ileaks, Isyns, Inas, Iapps, Itotals] = HalfCenter(t, x)
% % 
% % % Retrieve the components of the input vector.
% % Vs = reshape(x(1:4), [1 4]); hs = reshape(x(5:end), [1 4]);
% % 
% % % Define the input current.
% % % Iapps = [0 0 0 0]; 
% % % Iapps = [(10*(10^(-9))) 0 0 0]; 
% % if t < 0.01
% %     Iapps = [(10*(10^(-9))) 0 0 0]; 
% % else
% %     Iapps = [0 0 0 0]; 
% % end
% %     
% % % Define membrane properties (these are the same for all four neurons).
% % Cms = (5e-9)*ones(size(Vs));                  % [C] Membrane Capacitance.
% % Gms = (1e-6)*ones(size(Vs));                  % [S] Membrane Conductance.
% % Ers = (-60e-3)*ones(size(Vs));                  % [V] Membrane Resting (Equilibrium) Potential.
% % 
% % % Define synapse properties.
% % Elos = (-60e-3)*ones(size(Vs));                 % [V] Presynaptic Threshold.
% % Ehis = (-25e-3)*ones(size(Vs));                 % [V] Presynaptic Saturation Level.
% % % gmaxs = (0.5e-6)*ones(size(Vs));
% % % gmaxs = [-1.5e-6 5e-6 -1.5e-6 5e-6];            % [S] Maximum Synaptic Conductance.
% % gmaxs = [1.5e-6 5e-6 1.5e-6 5e-6];            % [S] Maximum Synaptic Conductance.
% % % gmaxs = [0 0 0 0];                            % [S] Maximum Synaptic Conductance.
% % % gmaxs = [0 5e-6 1.5e-6 0];            % [S] Maximum Synaptic Conductance.
% % % Ess = (-10e-3)*ones(size(Vs));
% % Ess = [-70e-3 -40e-3 -70e-3 -40e-3];            % [V] Synaptic Equilibrium Potential.
% % 
% % % Define sodium channel properties.
% % Ams = 1*ones(size(Vs));
% % Sms = -50*ones(size(Vs));
% % Ems = (20e-3)*ones(size(Vs));
% % Ahs = 0.5*ones(size(Vs));
% % Shs = 50*ones(size(Vs));
% % Ehs = 0*ones(size(Vs));
% % % Gnas = [0 0 0 0];
% % % Gnas = (1e-6)*ones(size(Vs));
% % Enas = (50e-3)*ones(size(Vs));
% % tauhmaxs = 0.3*ones(size(Vs));
% % 
% % minf0 = 1./(1 + Ams); hinf0 = 1./(1 + Ahs.*exp(Shs.*(Ems - Ehs)));
% % 
% % 
% % % Compute the sodium channel synapse conductance.
% % % Gnas = [1.5e-6 0 1.5e-6 0];
% % Gnas = (Gms.*Ems)./(minf0.*hinf0.*(Enas - Ems));
% % 
% % % Compute the synapse conductance.
% % Gss = gmaxs.*min( max( (circshift(Vs, 1) - Elos)./(Ehis - Elos), 0), 1);
% % 
% % % Compute the steady state sodium channel activation and deactivation parameters.
% % minfs = 1./(1 + Ams.*exp(Sms.*(Vs - Ems))); hinfs = 1./(1 + Ahs.*exp(Shs.*(Vs - Ehs)));
% % 
% % % Compute the sodium channel deactivation time constant.
% % tauhs = tauhmaxs.*hinfs.*sqrt(Ahs.*exp(Shs.*(Vs - Ehs)));
% % 
% % % Compute the leak current.
% % Ileaks = Gms.*(Ers - Vs);
% % 
% % % Compute the synaptic current.
% % Isyns = Gss.*(Ess - Vs);
% % 
% % % Compute the sodium current.
% % Inas = Gnas.*minfs.*hs.*(Enas - Vs);
% % 
% % % Compute the total current.
% % Itotals = Ileaks + Isyns + Inas + Iapps;
% % % Itotals = Ileaks + Isyns + Iapps;
% % 
% % % Compute the membrane voltage derivative.
% % dVdts = Itotals./Cms;
% % 
% % % Compute the sodium channel deactivation derivative.
% % dhdts = (hinfs - hs)./tauhs;
% % 
% % % Compute the state derivative.
% % dxdt = [dVdts'; dhdts'];
% % 
% % end
% 



