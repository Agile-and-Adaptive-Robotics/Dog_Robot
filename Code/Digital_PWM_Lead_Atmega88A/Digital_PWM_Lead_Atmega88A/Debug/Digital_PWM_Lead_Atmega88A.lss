
Digital_PWM_Lead_Atmega88A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000007a0  00000834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800102  00800102  00000836  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000836  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000097a  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000711  00000000  00000000  0000124e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f6  00000000  00000000  0000195f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cf  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023f  00000000  00000000  000022e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002522  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	83 c0       	rjmp	.+262    	; 0x11e <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e0 ea       	ldi	r30, 0xA0	; 160
  48:	f7 e0       	ldi	r31, 0x07	; 7
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a2 e0       	ldi	r26, 0x02	; 2
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ae 32       	cpi	r26, 0x2E	; 46
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	08 d0       	rcall	.+16     	; 0x78 <main>
  68:	99 c3       	rjmp	.+1842   	; 0x79c <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <spi_write_read>:
float	u_km1 = 0.;

// SPI write read function
unsigned char spi_write_read(unsigned char spi_data)
{
	SPDR=spi_data;
  6c:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR & (1<<SPIF))==0);	// Wait until the data transfer is complete.
  6e:	0d b4       	in	r0, 0x2d	; 45
  70:	07 fe       	sbrs	r0, 7
  72:	fd cf       	rjmp	.-6      	; 0x6e <spi_write_read+0x2>
	return SPDR;
  74:	8e b5       	in	r24, 0x2e	; 46
}
  76:	08 95       	ret

00000078 <main>:

int main (void)
{
	
	//Compute the total number of points per cycle.
	num_total = freq_dac/freq_pwm;
  78:	88 e2       	ldi	r24, 0x28	; 40
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <num_total+0x1>
  80:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <num_total>
	
	//Compute the value to which to set the dac when we turn it on.
	dac_on_value = round((5./5.12)*4095);
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 ef       	ldi	r25, 0xF0	; 240
  88:	a9 e7       	ldi	r26, 0x79	; 121
  8a:	b5 e4       	ldi	r27, 0x45	; 69
  8c:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <dac_on_value>
  90:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <dac_on_value+0x1>
  94:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <dac_on_value+0x2>
  98:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <dac_on_value+0x3>
	
	//Compute the pressure conversion factor.
	pressure_conversion = 5.0/1023;
  9c:	8a e0       	ldi	r24, 0x0A	; 10
  9e:	98 e2       	ldi	r25, 0x28	; 40
  a0:	a0 ea       	ldi	r26, 0xA0	; 160
  a2:	bb e3       	ldi	r27, 0x3B	; 59
  a4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <pressure_conversion>
  a8:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <pressure_conversion+0x1>
  ac:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <pressure_conversion+0x2>
  b0:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <pressure_conversion+0x3>
	
	//Compute the duty cycle conversion factor.
	duty_cycle_conversion = 1./5.;
  b4:	8d ec       	ldi	r24, 0xCD	; 205
  b6:	9c ec       	ldi	r25, 0xCC	; 204
  b8:	ac e4       	ldi	r26, 0x4C	; 76
  ba:	be e3       	ldi	r27, 0x3E	; 62
  bc:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <duty_cycle_conversion>
  c0:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <duty_cycle_conversion+0x1>
  c4:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <duty_cycle_conversion+0x2>
  c8:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <duty_cycle_conversion+0x3>
	
	//Setup pins for SPI Interface, Chip Select, LEDs, and Serial Communication.
	DDRB = 0b00101111;		//Set Output Ports for the SPI Interface & Chip Select.
  cc:	8f e2       	ldi	r24, 0x2F	; 47
  ce:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00111000;		//Set pins 3, 4, & 5 on Port C as output for LEDs.
  d0:	88 e3       	ldi	r24, 0x38	; 56
  d2:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11100010;		//Set pin 1 on port D as output for serial communication.  Set pins 5, 6, & 7 on Port D as output for LEDs.
  d4:	82 ee       	ldi	r24, 0xE2	; 226
  d6:	8a b9       	out	0x0a, r24	; 10
	
	//Initialize the pin values.
	sbi(PORTB,0);			//Set the Chip Select high.
  d8:	28 9a       	sbi	0x05, 0	; 5
	sbi(PORTB,1);			//Set the LDAC high.
  da:	29 9a       	sbi	0x05, 1	; 5
	
	sbi(PORTC,3);			//Turn Off LEDs.
  dc:	43 9a       	sbi	0x08, 3	; 8
	sbi(PORTC,4);
  de:	44 9a       	sbi	0x08, 4	; 8
	sbi(PORTC,5);
  e0:	45 9a       	sbi	0x08, 5	; 8
	
	sbi(PORTD,5);
  e2:	5d 9a       	sbi	0x0b, 5	; 11
	sbi(PORTD,6);
  e4:	5e 9a       	sbi	0x0b, 6	; 11
	sbi(PORTD,7);
  e6:	5f 9a       	sbi	0x0b, 7	; 11
	
	//Setup for ADC.
	ADCSRA = 0b10000111;	//ADC on, /128 for a 16 MHz clock, interrupt off.
  e8:	87 e8       	ldi	r24, 0x87	; 135
  ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
	
	// Setup for SPI.
	SPCR=0b01010010;
  ee:	82 e5       	ldi	r24, 0x52	; 82
  f0:	8c bd       	out	0x2c, r24	; 44
	SPSR=0b00000000;
  f2:	1d bc       	out	0x2d, r1	; 45
	
	//Setup the timer for the interrupts.
	TCCR1B |= (1 << WGM12); // Configure timer 1 for CTC mode
  f4:	e1 e8       	ldi	r30, 0x81	; 129
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
  fe:	af e6       	ldi	r26, 0x6F	; 111
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	8c 91       	ld	r24, X
 104:	82 60       	ori	r24, 0x02	; 2
 106:	8c 93       	st	X, r24

	//Enable global interrupts.
	sei(); // Enable global interrupts
 108:	78 94       	sei

	//Set the target timer count.
	OCR1A = 3999;		//16MHz clock, prescaler of 1, 4 kHz interrupt.
 10a:	8f e9       	ldi	r24, 0x9F	; 159
 10c:	9f e0       	ldi	r25, 0x0F	; 15
 10e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
 112:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
	
	//Set the timer prescaler.
	TCCR1B |= ((1 << CS10) | (0 << CS11) | (0 << CS12)); // Start timer at Fcpu/1							//1 kHz and 5 kHz Example.
 116:	80 81       	ld	r24, Z
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	80 83       	st	Z, r24
 11c:	ff cf       	rjmp	.-2      	; 0x11c <main+0xa4>

0000011e <__vector_11>:
	while(1){}

}

ISR(TIMER1_COMPA_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 92       	push	r8
 12a:	9f 92       	push	r9
 12c:	af 92       	push	r10
 12e:	bf 92       	push	r11
 130:	cf 92       	push	r12
 132:	df 92       	push	r13
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31

	
	//Read from the ADC Channels.
	
	//Set the AD Channel.
	ADMUX  = 0b00000000;	//Set the AD input to Channel 0.
 154:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>

	//Start the AD conversion.
	ADCSRA = ADCSRA | 0b01000000;				    // Start AD conversion.  Sets bit 7 to 1 and leaves all other bits the same.
 158:	ea e7       	ldi	r30, 0x7A	; 122
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	80 83       	st	Z, r24
	while ((ADCSRA & 0b01000000) == 0b01000000);    // Wait while AD conversion is executed.  Waits until bit 7 is set to 1.
 162:	80 81       	ld	r24, Z
 164:	86 fd       	sbrc	r24, 6
 166:	fd cf       	rjmp	.-6      	; 0x162 <__vector_11+0x44>
	
	//Retrieve the ADC value from Channel 0.
	adc_data1 = ADCW;					//Converts from [0-1023] to [0-4095].
 168:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 16c:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
	
	//Set the AD Channel.
	ADMUX  = 0b00000001;	//Set the AD input to Channel 1.
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
	
	//Start the AD conversion.
	ADCSRA = ADCSRA | 0b01000000;				    // Start AD conversion.  Sets bit 7 to 1 and leaves all other bits the same.
 176:	ea e7       	ldi	r30, 0x7A	; 122
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	80 83       	st	Z, r24
	while ((ADCSRA & 0b01000000) == 0b01000000);    // Wait while AD conversion is executed.  Waits until bit 7 is set to 1.
 180:	80 81       	ld	r24, Z
 182:	86 fd       	sbrc	r24, 6
 184:	fd cf       	rjmp	.-6      	; 0x180 <__vector_11+0x62>
	
	//Retrieve the ADC value from Channel 1.
	adc_data2 = ADCW;					//Converts from [0-1023] to [0-4095].
 186:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
 18a:	d0 91 79 00 	lds	r29, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>


	//Compute the Control Signal.
	
	//Convert the adc value for the desired pressure into a voltage.
	r_k = pressure_conversion*adc_data1;			//[V] Desired Pressure. Converts [0-1023] to [0-5] V.
 18e:	c0 90 20 01 	lds	r12, 0x0120	; 0x800120 <pressure_conversion>
 192:	d0 90 21 01 	lds	r13, 0x0121	; 0x800121 <pressure_conversion+0x1>
 196:	e0 90 22 01 	lds	r14, 0x0122	; 0x800122 <pressure_conversion+0x2>
 19a:	f0 90 23 01 	lds	r15, 0x0123	; 0x800123 <pressure_conversion+0x3>
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	9a d1       	rcall	.+820    	; 0x4d8 <__floatunsisf>
 1a4:	a7 01       	movw	r20, r14
 1a6:	96 01       	movw	r18, r12
 1a8:	4d d2       	rcall	.+1178   	; 0x644 <__mulsf3>
 1aa:	4b 01       	movw	r8, r22
 1ac:	5c 01       	movw	r10, r24
 1ae:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <r_k>
 1b2:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <r_k+0x1>
 1b6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <r_k+0x2>
 1ba:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <r_k+0x3>
	
	//Convert the adc value for the actual pressure into a voltage.
	c_k = pressure_conversion*adc_data2;			//[V] Pressure Sensor Reading.  Converts [0-1023] to [0-5] V.
 1be:	be 01       	movw	r22, r28
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	89 d1       	rcall	.+786    	; 0x4d8 <__floatunsisf>
 1c6:	a7 01       	movw	r20, r14
 1c8:	96 01       	movw	r18, r12
 1ca:	3c d2       	rcall	.+1144   	; 0x644 <__mulsf3>
 1cc:	9b 01       	movw	r18, r22
 1ce:	ac 01       	movw	r20, r24
 1d0:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <c_k>
 1d4:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <c_k+0x1>
 1d8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <c_k+0x2>
 1dc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <c_k+0x3>
	
	//Compute the pressure error value.
	e_k = r_k - c_k;			//[V] Pressure Error.
 1e0:	c5 01       	movw	r24, r10
 1e2:	b4 01       	movw	r22, r8
 1e4:	e4 d0       	rcall	.+456    	; 0x3ae <__subsf3>
 1e6:	6b 01       	movw	r12, r22
 1e8:	7c 01       	movw	r14, r24
 1ea:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <e_k>
 1ee:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <e_k+0x1>
 1f2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <e_k+0x2>
 1f6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <e_k+0x3>
	//u_k = r_k;													//[V] Open Loop.
	u_k = Kp*e_k;													//[V] Proportional Controller.
	//u_k = d*u_km1 + a*e_k - b*e_km1;								//[V] Lead Controller.

	//Limit the controller voltage to the maximum available.
	if (u_k > u_max)			//Saturation check
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	40 ea       	ldi	r20, 0xA0	; 160
 200:	50 e4       	ldi	r21, 0x40	; 64
 202:	1c d2       	rcall	.+1080   	; 0x63c <__gesf2>
 204:	18 16       	cp	r1, r24
 206:	6c f4       	brge	.+26     	; 0x222 <__vector_11+0x104>
	{
		//Set the controller voltage to be the maximum voltage.
		u_k = u_max;
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	a0 ea       	ldi	r26, 0xA0	; 160
 20e:	b0 e4       	ldi	r27, 0x40	; 64
 210:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <u_k>
 214:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <u_k+0x1>
 218:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <u_k+0x2>
 21c:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <u_k+0x3>
 220:	19 c0       	rjmp	.+50     	; 0x254 <__vector_11+0x136>
	}
	else if (u_k < 0)
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	a9 01       	movw	r20, r18
 228:	c7 01       	movw	r24, r14
 22a:	b6 01       	movw	r22, r12
 22c:	25 d1       	rcall	.+586    	; 0x478 <__cmpsf2>
 22e:	88 23       	and	r24, r24
 230:	4c f0       	brlt	.+18     	; 0x244 <__vector_11+0x126>
	//Compute the pressure error value.
	e_k = r_k - c_k;			//[V] Pressure Error.
	
	//Compute the control signal.
	//u_k = r_k;													//[V] Open Loop.
	u_k = Kp*e_k;													//[V] Proportional Controller.
 232:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <u_k>
 236:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <u_k+0x1>
 23a:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <u_k+0x2>
 23e:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <u_k+0x3>
 242:	08 c0       	rjmp	.+16     	; 0x254 <__vector_11+0x136>
		u_k = u_max;
	}
	else if (u_k < 0)
	{
		//Set the controller voltage to be zero.
		u_k = 0;
 244:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <u_k>
 248:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <u_k+0x1>
 24c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <u_k+0x2>
 250:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <u_k+0x3>

	//duty_cycle = (1./1023)*adc_data1;
	//duty_cycle = (1./1023)*adc_data2;

	//Compute the number of points for the given duty cycle.
	num_crit = round(duty_cycle*num_total);
 254:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <num_total>
 258:	d0 91 1f 01 	lds	r29, 0x011F	; 0x80011f <num_total+0x1>
 25c:	2d ec       	ldi	r18, 0xCD	; 205
 25e:	3c ec       	ldi	r19, 0xCC	; 204
 260:	4c e4       	ldi	r20, 0x4C	; 76
 262:	5d e3       	ldi	r21, 0x3D	; 61
 264:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <u_k>
 268:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <u_k+0x1>
 26c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <u_k+0x2>
 270:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <u_k+0x3>
 274:	e7 d1       	rcall	.+974    	; 0x644 <__mulsf3>
 276:	2c e5       	ldi	r18, 0x5C	; 92
 278:	3f e8       	ldi	r19, 0x8F	; 143
 27a:	42 e8       	ldi	r20, 0x82	; 130
 27c:	5e e3       	ldi	r21, 0x3E	; 62
 27e:	98 d0       	rcall	.+304    	; 0x3b0 <__addsf3>
 280:	6b 01       	movw	r12, r22
 282:	7c 01       	movw	r14, r24
 284:	be 01       	movw	r22, r28
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	26 d1       	rcall	.+588    	; 0x4d8 <__floatunsisf>
 28c:	9b 01       	movw	r18, r22
 28e:	ac 01       	movw	r20, r24
 290:	c7 01       	movw	r24, r14
 292:	b6 01       	movw	r22, r12
 294:	d7 d1       	rcall	.+942    	; 0x644 <__mulsf3>
 296:	39 d2       	rcall	.+1138   	; 0x70a <round>
 298:	f3 d0       	rcall	.+486    	; 0x480 <__fixunssfsi>
 29a:	9b 01       	movw	r18, r22
 29c:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <num_crit+0x1>
 2a0:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <num_crit>
	
	//Determine whether to turn the output pin on or off.
	if (count >= num_total)								//If the count has reached the maximum value...
 2a4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <count>
 2a8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <count+0x1>
 2ac:	8c 17       	cp	r24, r28
 2ae:	9d 07       	cpc	r25, r29
 2b0:	c0 f0       	brcs	.+48     	; 0x2e2 <__vector_11+0x1c4>
	{
		count = 0;								//Reset the counter to zero.
 2b2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <count+0x1>
 2b6:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <count>
		dac_data = dac_on_value;				//Turn the dac output on.
 2ba:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <dac_on_value>
 2be:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <dac_on_value+0x1>
 2c2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <dac_on_value+0x2>
 2c6:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <dac_on_value+0x3>
 2ca:	da d0       	rcall	.+436    	; 0x480 <__fixunssfsi>
 2cc:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <dac_data+0x1>
 2d0:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <dac_data>
		bDacOn = 1;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2e0:	11 c0       	rjmp	.+34     	; 0x304 <__vector_11+0x1e6>
	}
	else if ( bDacOn && (count >= num_crit) )			//If we are in the active part of the cycle...
 2e2:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 2e6:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
 2ea:	45 2b       	or	r20, r21
 2ec:	59 f0       	breq	.+22     	; 0x304 <__vector_11+0x1e6>
 2ee:	82 17       	cp	r24, r18
 2f0:	93 07       	cpc	r25, r19
 2f2:	40 f0       	brcs	.+16     	; 0x304 <__vector_11+0x1e6>
	{
		dac_data = 0;									//Turn the dac output off.
 2f4:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <dac_data+0x1>
 2f8:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <dac_data>
		bDacOn = 0;
 2fc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 300:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	
	//Output the PWM to the Valve Manifold.
	
	//Convert the ADC data to a form that the DAC will recognize.
	spi_data_0 = 0x00;								//Zero spi_data_0.
	spi_data_0 = (dac_data & 0x0F00) >> 8;			//Set up the first byte to write by mapping bits 8-11 to the lower 4 bit positions.
 304:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <dac_data>
 308:	d0 91 1d 01 	lds	r29, 0x011D	; 0x80011d <dac_data+0x1>
 30c:	ce 01       	movw	r24, r28
 30e:	88 27       	eor	r24, r24
 310:	9f 70       	andi	r25, 0x0F	; 15
	spi_data_0 = spi_data_0 + 0b00110000;			//Now add the upper 4 DAC control bits.
	spi_data_1 = (dac_data & 0xFF);					//Setup the second byte to write by mapping bits 0-7 to the lower 8 bit positions.

	//Write the ADC data to the DAC.
	cbi(PORTB,0);								// Activate the chip - set chip select to zero
 312:	28 98       	cbi	0x05, 0	; 5
	dummy_read = spi_write_read(spi_data_0);	// Write/Read first byte
 314:	80 e3       	ldi	r24, 0x30	; 48
 316:	89 0f       	add	r24, r25
 318:	a9 de       	rcall	.-686    	; 0x6c <spi_write_read>
	dummy_read = spi_write_read(spi_data_1);  	// Write/Read second byte
 31a:	8c 2f       	mov	r24, r28
 31c:	a7 de       	rcall	.-690    	; 0x6c <spi_write_read>
	sbi(PORTB,0);								// Release the chip  - set chip select to one
 31e:	28 9a       	sbi	0x05, 0	; 5
	
	//Cycle the LDAC.
	cbi(PORTB,1);			//Set the LDAC low.
 320:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 322:	00 c0       	rjmp	.+0      	; 0x324 <__vector_11+0x206>
	_delay_ms(0.0001);		//Wait the specified LDAC duration.
	sbi(PORTB,1);			//Set the LDAC high.
 324:	29 9a       	sbi	0x05, 1	; 5
	
	//Advance the control variables.
	e_km1 = e_k;
 326:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <e_k>
 32a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <e_k+0x1>
 32e:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <e_k+0x2>
 332:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <e_k+0x3>
 336:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <e_km1>
 33a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <e_km1+0x1>
 33e:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <e_km1+0x2>
 342:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <e_km1+0x3>
	u_km1 = u_k;
 346:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <u_k>
 34a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <u_k+0x1>
 34e:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <u_k+0x2>
 352:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <u_k+0x3>
 356:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 35a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 35e:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
 362:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
	
	//Advance the counter.
	++count;
 366:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <count>
 36a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <count+0x1>
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <count+0x1>
 374:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <count>
	
 378:	ff 91       	pop	r31
 37a:	ef 91       	pop	r30
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	bf 91       	pop	r27
 382:	af 91       	pop	r26
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	7f 91       	pop	r23
 38a:	6f 91       	pop	r22
 38c:	5f 91       	pop	r21
 38e:	4f 91       	pop	r20
 390:	3f 91       	pop	r19
 392:	2f 91       	pop	r18
 394:	ff 90       	pop	r15
 396:	ef 90       	pop	r14
 398:	df 90       	pop	r13
 39a:	cf 90       	pop	r12
 39c:	bf 90       	pop	r11
 39e:	af 90       	pop	r10
 3a0:	9f 90       	pop	r9
 3a2:	8f 90       	pop	r8
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <__subsf3>:
 3ae:	50 58       	subi	r21, 0x80	; 128

000003b0 <__addsf3>:
 3b0:	bb 27       	eor	r27, r27
 3b2:	aa 27       	eor	r26, r26
 3b4:	0e d0       	rcall	.+28     	; 0x3d2 <__addsf3x>
 3b6:	08 c1       	rjmp	.+528    	; 0x5c8 <__fp_round>
 3b8:	f9 d0       	rcall	.+498    	; 0x5ac <__fp_pscA>
 3ba:	30 f0       	brcs	.+12     	; 0x3c8 <__addsf3+0x18>
 3bc:	fe d0       	rcall	.+508    	; 0x5ba <__fp_pscB>
 3be:	20 f0       	brcs	.+8      	; 0x3c8 <__addsf3+0x18>
 3c0:	31 f4       	brne	.+12     	; 0x3ce <__addsf3+0x1e>
 3c2:	9f 3f       	cpi	r25, 0xFF	; 255
 3c4:	11 f4       	brne	.+4      	; 0x3ca <__addsf3+0x1a>
 3c6:	1e f4       	brtc	.+6      	; 0x3ce <__addsf3+0x1e>
 3c8:	ee c0       	rjmp	.+476    	; 0x5a6 <__fp_nan>
 3ca:	0e f4       	brtc	.+2      	; 0x3ce <__addsf3+0x1e>
 3cc:	e0 95       	com	r30
 3ce:	e7 fb       	bst	r30, 7
 3d0:	e4 c0       	rjmp	.+456    	; 0x59a <__fp_inf>

000003d2 <__addsf3x>:
 3d2:	e9 2f       	mov	r30, r25
 3d4:	0a d1       	rcall	.+532    	; 0x5ea <__fp_split3>
 3d6:	80 f3       	brcs	.-32     	; 0x3b8 <__addsf3+0x8>
 3d8:	ba 17       	cp	r27, r26
 3da:	62 07       	cpc	r22, r18
 3dc:	73 07       	cpc	r23, r19
 3de:	84 07       	cpc	r24, r20
 3e0:	95 07       	cpc	r25, r21
 3e2:	18 f0       	brcs	.+6      	; 0x3ea <__addsf3x+0x18>
 3e4:	71 f4       	brne	.+28     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e6:	9e f5       	brtc	.+102    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 3e8:	22 c1       	rjmp	.+580    	; 0x62e <__fp_zero>
 3ea:	0e f4       	brtc	.+2      	; 0x3ee <__addsf3x+0x1c>
 3ec:	e0 95       	com	r30
 3ee:	0b 2e       	mov	r0, r27
 3f0:	ba 2f       	mov	r27, r26
 3f2:	a0 2d       	mov	r26, r0
 3f4:	0b 01       	movw	r0, r22
 3f6:	b9 01       	movw	r22, r18
 3f8:	90 01       	movw	r18, r0
 3fa:	0c 01       	movw	r0, r24
 3fc:	ca 01       	movw	r24, r20
 3fe:	a0 01       	movw	r20, r0
 400:	11 24       	eor	r1, r1
 402:	ff 27       	eor	r31, r31
 404:	59 1b       	sub	r21, r25
 406:	99 f0       	breq	.+38     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 408:	59 3f       	cpi	r21, 0xF9	; 249
 40a:	50 f4       	brcc	.+20     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 40c:	50 3e       	cpi	r21, 0xE0	; 224
 40e:	68 f1       	brcs	.+90     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 410:	1a 16       	cp	r1, r26
 412:	f0 40       	sbci	r31, 0x00	; 0
 414:	a2 2f       	mov	r26, r18
 416:	23 2f       	mov	r18, r19
 418:	34 2f       	mov	r19, r20
 41a:	44 27       	eor	r20, r20
 41c:	58 5f       	subi	r21, 0xF8	; 248
 41e:	f3 cf       	rjmp	.-26     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 420:	46 95       	lsr	r20
 422:	37 95       	ror	r19
 424:	27 95       	ror	r18
 426:	a7 95       	ror	r26
 428:	f0 40       	sbci	r31, 0x00	; 0
 42a:	53 95       	inc	r21
 42c:	c9 f7       	brne	.-14     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 42e:	7e f4       	brtc	.+30     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 430:	1f 16       	cp	r1, r31
 432:	ba 0b       	sbc	r27, r26
 434:	62 0b       	sbc	r22, r18
 436:	73 0b       	sbc	r23, r19
 438:	84 0b       	sbc	r24, r20
 43a:	ba f0       	brmi	.+46     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 43c:	91 50       	subi	r25, 0x01	; 1
 43e:	a1 f0       	breq	.+40     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 440:	ff 0f       	add	r31, r31
 442:	bb 1f       	adc	r27, r27
 444:	66 1f       	adc	r22, r22
 446:	77 1f       	adc	r23, r23
 448:	88 1f       	adc	r24, r24
 44a:	c2 f7       	brpl	.-16     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 44c:	0e c0       	rjmp	.+28     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 44e:	ba 0f       	add	r27, r26
 450:	62 1f       	adc	r22, r18
 452:	73 1f       	adc	r23, r19
 454:	84 1f       	adc	r24, r20
 456:	48 f4       	brcc	.+18     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 458:	87 95       	ror	r24
 45a:	77 95       	ror	r23
 45c:	67 95       	ror	r22
 45e:	b7 95       	ror	r27
 460:	f7 95       	ror	r31
 462:	9e 3f       	cpi	r25, 0xFE	; 254
 464:	08 f0       	brcs	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 466:	b3 cf       	rjmp	.-154    	; 0x3ce <__addsf3+0x1e>
 468:	93 95       	inc	r25
 46a:	88 0f       	add	r24, r24
 46c:	08 f0       	brcs	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46e:	99 27       	eor	r25, r25
 470:	ee 0f       	add	r30, r30
 472:	97 95       	ror	r25
 474:	87 95       	ror	r24
 476:	08 95       	ret

00000478 <__cmpsf2>:
 478:	6c d0       	rcall	.+216    	; 0x552 <__fp_cmp>
 47a:	08 f4       	brcc	.+2      	; 0x47e <__cmpsf2+0x6>
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	08 95       	ret

00000480 <__fixunssfsi>:
 480:	bc d0       	rcall	.+376    	; 0x5fa <__fp_splitA>
 482:	88 f0       	brcs	.+34     	; 0x4a6 <__fixunssfsi+0x26>
 484:	9f 57       	subi	r25, 0x7F	; 127
 486:	90 f0       	brcs	.+36     	; 0x4ac <__fixunssfsi+0x2c>
 488:	b9 2f       	mov	r27, r25
 48a:	99 27       	eor	r25, r25
 48c:	b7 51       	subi	r27, 0x17	; 23
 48e:	a0 f0       	brcs	.+40     	; 0x4b8 <__fixunssfsi+0x38>
 490:	d1 f0       	breq	.+52     	; 0x4c6 <__fixunssfsi+0x46>
 492:	66 0f       	add	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	88 1f       	adc	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	1a f0       	brmi	.+6      	; 0x4a2 <__fixunssfsi+0x22>
 49c:	ba 95       	dec	r27
 49e:	c9 f7       	brne	.-14     	; 0x492 <__fixunssfsi+0x12>
 4a0:	12 c0       	rjmp	.+36     	; 0x4c6 <__fixunssfsi+0x46>
 4a2:	b1 30       	cpi	r27, 0x01	; 1
 4a4:	81 f0       	breq	.+32     	; 0x4c6 <__fixunssfsi+0x46>
 4a6:	c3 d0       	rcall	.+390    	; 0x62e <__fp_zero>
 4a8:	b1 e0       	ldi	r27, 0x01	; 1
 4aa:	08 95       	ret
 4ac:	c0 c0       	rjmp	.+384    	; 0x62e <__fp_zero>
 4ae:	67 2f       	mov	r22, r23
 4b0:	78 2f       	mov	r23, r24
 4b2:	88 27       	eor	r24, r24
 4b4:	b8 5f       	subi	r27, 0xF8	; 248
 4b6:	39 f0       	breq	.+14     	; 0x4c6 <__fixunssfsi+0x46>
 4b8:	b9 3f       	cpi	r27, 0xF9	; 249
 4ba:	cc f3       	brlt	.-14     	; 0x4ae <__fixunssfsi+0x2e>
 4bc:	86 95       	lsr	r24
 4be:	77 95       	ror	r23
 4c0:	67 95       	ror	r22
 4c2:	b3 95       	inc	r27
 4c4:	d9 f7       	brne	.-10     	; 0x4bc <__fixunssfsi+0x3c>
 4c6:	3e f4       	brtc	.+14     	; 0x4d6 <__fixunssfsi+0x56>
 4c8:	90 95       	com	r25
 4ca:	80 95       	com	r24
 4cc:	70 95       	com	r23
 4ce:	61 95       	neg	r22
 4d0:	7f 4f       	sbci	r23, 0xFF	; 255
 4d2:	8f 4f       	sbci	r24, 0xFF	; 255
 4d4:	9f 4f       	sbci	r25, 0xFF	; 255
 4d6:	08 95       	ret

000004d8 <__floatunsisf>:
 4d8:	e8 94       	clt
 4da:	09 c0       	rjmp	.+18     	; 0x4ee <__floatsisf+0x12>

000004dc <__floatsisf>:
 4dc:	97 fb       	bst	r25, 7
 4de:	3e f4       	brtc	.+14     	; 0x4ee <__floatsisf+0x12>
 4e0:	90 95       	com	r25
 4e2:	80 95       	com	r24
 4e4:	70 95       	com	r23
 4e6:	61 95       	neg	r22
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ea:	8f 4f       	sbci	r24, 0xFF	; 255
 4ec:	9f 4f       	sbci	r25, 0xFF	; 255
 4ee:	99 23       	and	r25, r25
 4f0:	a9 f0       	breq	.+42     	; 0x51c <__stack+0x1d>
 4f2:	f9 2f       	mov	r31, r25
 4f4:	96 e9       	ldi	r25, 0x96	; 150
 4f6:	bb 27       	eor	r27, r27
 4f8:	93 95       	inc	r25
 4fa:	f6 95       	lsr	r31
 4fc:	87 95       	ror	r24
 4fe:	77 95       	ror	r23
 500:	67 95       	ror	r22
 502:	b7 95       	ror	r27
 504:	f1 11       	cpse	r31, r1
 506:	f8 cf       	rjmp	.-16     	; 0x4f8 <__floatsisf+0x1c>
 508:	fa f4       	brpl	.+62     	; 0x548 <__stack+0x49>
 50a:	bb 0f       	add	r27, r27
 50c:	11 f4       	brne	.+4      	; 0x512 <__stack+0x13>
 50e:	60 ff       	sbrs	r22, 0
 510:	1b c0       	rjmp	.+54     	; 0x548 <__stack+0x49>
 512:	6f 5f       	subi	r22, 0xFF	; 255
 514:	7f 4f       	sbci	r23, 0xFF	; 255
 516:	8f 4f       	sbci	r24, 0xFF	; 255
 518:	9f 4f       	sbci	r25, 0xFF	; 255
 51a:	16 c0       	rjmp	.+44     	; 0x548 <__stack+0x49>
 51c:	88 23       	and	r24, r24
 51e:	11 f0       	breq	.+4      	; 0x524 <__stack+0x25>
 520:	96 e9       	ldi	r25, 0x96	; 150
 522:	11 c0       	rjmp	.+34     	; 0x546 <__stack+0x47>
 524:	77 23       	and	r23, r23
 526:	21 f0       	breq	.+8      	; 0x530 <__stack+0x31>
 528:	9e e8       	ldi	r25, 0x8E	; 142
 52a:	87 2f       	mov	r24, r23
 52c:	76 2f       	mov	r23, r22
 52e:	05 c0       	rjmp	.+10     	; 0x53a <__stack+0x3b>
 530:	66 23       	and	r22, r22
 532:	71 f0       	breq	.+28     	; 0x550 <__stack+0x51>
 534:	96 e8       	ldi	r25, 0x86	; 134
 536:	86 2f       	mov	r24, r22
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	2a f0       	brmi	.+10     	; 0x548 <__stack+0x49>
 53e:	9a 95       	dec	r25
 540:	66 0f       	add	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	88 1f       	adc	r24, r24
 546:	da f7       	brpl	.-10     	; 0x53e <__stack+0x3f>
 548:	88 0f       	add	r24, r24
 54a:	96 95       	lsr	r25
 54c:	87 95       	ror	r24
 54e:	97 f9       	bld	r25, 7
 550:	08 95       	ret

00000552 <__fp_cmp>:
 552:	99 0f       	add	r25, r25
 554:	00 08       	sbc	r0, r0
 556:	55 0f       	add	r21, r21
 558:	aa 0b       	sbc	r26, r26
 55a:	e0 e8       	ldi	r30, 0x80	; 128
 55c:	fe ef       	ldi	r31, 0xFE	; 254
 55e:	16 16       	cp	r1, r22
 560:	17 06       	cpc	r1, r23
 562:	e8 07       	cpc	r30, r24
 564:	f9 07       	cpc	r31, r25
 566:	c0 f0       	brcs	.+48     	; 0x598 <__fp_cmp+0x46>
 568:	12 16       	cp	r1, r18
 56a:	13 06       	cpc	r1, r19
 56c:	e4 07       	cpc	r30, r20
 56e:	f5 07       	cpc	r31, r21
 570:	98 f0       	brcs	.+38     	; 0x598 <__fp_cmp+0x46>
 572:	62 1b       	sub	r22, r18
 574:	73 0b       	sbc	r23, r19
 576:	84 0b       	sbc	r24, r20
 578:	95 0b       	sbc	r25, r21
 57a:	39 f4       	brne	.+14     	; 0x58a <__fp_cmp+0x38>
 57c:	0a 26       	eor	r0, r26
 57e:	61 f0       	breq	.+24     	; 0x598 <__fp_cmp+0x46>
 580:	23 2b       	or	r18, r19
 582:	24 2b       	or	r18, r20
 584:	25 2b       	or	r18, r21
 586:	21 f4       	brne	.+8      	; 0x590 <__fp_cmp+0x3e>
 588:	08 95       	ret
 58a:	0a 26       	eor	r0, r26
 58c:	09 f4       	brne	.+2      	; 0x590 <__fp_cmp+0x3e>
 58e:	a1 40       	sbci	r26, 0x01	; 1
 590:	a6 95       	lsr	r26
 592:	8f ef       	ldi	r24, 0xFF	; 255
 594:	81 1d       	adc	r24, r1
 596:	81 1d       	adc	r24, r1
 598:	08 95       	ret

0000059a <__fp_inf>:
 59a:	97 f9       	bld	r25, 7
 59c:	9f 67       	ori	r25, 0x7F	; 127
 59e:	80 e8       	ldi	r24, 0x80	; 128
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	08 95       	ret

000005a6 <__fp_nan>:
 5a6:	9f ef       	ldi	r25, 0xFF	; 255
 5a8:	80 ec       	ldi	r24, 0xC0	; 192
 5aa:	08 95       	ret

000005ac <__fp_pscA>:
 5ac:	00 24       	eor	r0, r0
 5ae:	0a 94       	dec	r0
 5b0:	16 16       	cp	r1, r22
 5b2:	17 06       	cpc	r1, r23
 5b4:	18 06       	cpc	r1, r24
 5b6:	09 06       	cpc	r0, r25
 5b8:	08 95       	ret

000005ba <__fp_pscB>:
 5ba:	00 24       	eor	r0, r0
 5bc:	0a 94       	dec	r0
 5be:	12 16       	cp	r1, r18
 5c0:	13 06       	cpc	r1, r19
 5c2:	14 06       	cpc	r1, r20
 5c4:	05 06       	cpc	r0, r21
 5c6:	08 95       	ret

000005c8 <__fp_round>:
 5c8:	09 2e       	mov	r0, r25
 5ca:	03 94       	inc	r0
 5cc:	00 0c       	add	r0, r0
 5ce:	11 f4       	brne	.+4      	; 0x5d4 <__fp_round+0xc>
 5d0:	88 23       	and	r24, r24
 5d2:	52 f0       	brmi	.+20     	; 0x5e8 <__fp_round+0x20>
 5d4:	bb 0f       	add	r27, r27
 5d6:	40 f4       	brcc	.+16     	; 0x5e8 <__fp_round+0x20>
 5d8:	bf 2b       	or	r27, r31
 5da:	11 f4       	brne	.+4      	; 0x5e0 <__fp_round+0x18>
 5dc:	60 ff       	sbrs	r22, 0
 5de:	04 c0       	rjmp	.+8      	; 0x5e8 <__fp_round+0x20>
 5e0:	6f 5f       	subi	r22, 0xFF	; 255
 5e2:	7f 4f       	sbci	r23, 0xFF	; 255
 5e4:	8f 4f       	sbci	r24, 0xFF	; 255
 5e6:	9f 4f       	sbci	r25, 0xFF	; 255
 5e8:	08 95       	ret

000005ea <__fp_split3>:
 5ea:	57 fd       	sbrc	r21, 7
 5ec:	90 58       	subi	r25, 0x80	; 128
 5ee:	44 0f       	add	r20, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	59 f0       	breq	.+22     	; 0x60a <__fp_splitA+0x10>
 5f4:	5f 3f       	cpi	r21, 0xFF	; 255
 5f6:	71 f0       	breq	.+28     	; 0x614 <__fp_splitA+0x1a>
 5f8:	47 95       	ror	r20

000005fa <__fp_splitA>:
 5fa:	88 0f       	add	r24, r24
 5fc:	97 fb       	bst	r25, 7
 5fe:	99 1f       	adc	r25, r25
 600:	61 f0       	breq	.+24     	; 0x61a <__fp_splitA+0x20>
 602:	9f 3f       	cpi	r25, 0xFF	; 255
 604:	79 f0       	breq	.+30     	; 0x624 <__fp_splitA+0x2a>
 606:	87 95       	ror	r24
 608:	08 95       	ret
 60a:	12 16       	cp	r1, r18
 60c:	13 06       	cpc	r1, r19
 60e:	14 06       	cpc	r1, r20
 610:	55 1f       	adc	r21, r21
 612:	f2 cf       	rjmp	.-28     	; 0x5f8 <__fp_split3+0xe>
 614:	46 95       	lsr	r20
 616:	f1 df       	rcall	.-30     	; 0x5fa <__fp_splitA>
 618:	08 c0       	rjmp	.+16     	; 0x62a <__fp_splitA+0x30>
 61a:	16 16       	cp	r1, r22
 61c:	17 06       	cpc	r1, r23
 61e:	18 06       	cpc	r1, r24
 620:	99 1f       	adc	r25, r25
 622:	f1 cf       	rjmp	.-30     	; 0x606 <__fp_splitA+0xc>
 624:	86 95       	lsr	r24
 626:	71 05       	cpc	r23, r1
 628:	61 05       	cpc	r22, r1
 62a:	08 94       	sec
 62c:	08 95       	ret

0000062e <__fp_zero>:
 62e:	e8 94       	clt

00000630 <__fp_szero>:
 630:	bb 27       	eor	r27, r27
 632:	66 27       	eor	r22, r22
 634:	77 27       	eor	r23, r23
 636:	cb 01       	movw	r24, r22
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret

0000063c <__gesf2>:
 63c:	8a df       	rcall	.-236    	; 0x552 <__fp_cmp>
 63e:	08 f4       	brcc	.+2      	; 0x642 <__gesf2+0x6>
 640:	8f ef       	ldi	r24, 0xFF	; 255
 642:	08 95       	ret

00000644 <__mulsf3>:
 644:	0b d0       	rcall	.+22     	; 0x65c <__mulsf3x>
 646:	c0 cf       	rjmp	.-128    	; 0x5c8 <__fp_round>
 648:	b1 df       	rcall	.-158    	; 0x5ac <__fp_pscA>
 64a:	28 f0       	brcs	.+10     	; 0x656 <__mulsf3+0x12>
 64c:	b6 df       	rcall	.-148    	; 0x5ba <__fp_pscB>
 64e:	18 f0       	brcs	.+6      	; 0x656 <__mulsf3+0x12>
 650:	95 23       	and	r25, r21
 652:	09 f0       	breq	.+2      	; 0x656 <__mulsf3+0x12>
 654:	a2 cf       	rjmp	.-188    	; 0x59a <__fp_inf>
 656:	a7 cf       	rjmp	.-178    	; 0x5a6 <__fp_nan>
 658:	11 24       	eor	r1, r1
 65a:	ea cf       	rjmp	.-44     	; 0x630 <__fp_szero>

0000065c <__mulsf3x>:
 65c:	c6 df       	rcall	.-116    	; 0x5ea <__fp_split3>
 65e:	a0 f3       	brcs	.-24     	; 0x648 <__mulsf3+0x4>

00000660 <__mulsf3_pse>:
 660:	95 9f       	mul	r25, r21
 662:	d1 f3       	breq	.-12     	; 0x658 <__mulsf3+0x14>
 664:	95 0f       	add	r25, r21
 666:	50 e0       	ldi	r21, 0x00	; 0
 668:	55 1f       	adc	r21, r21
 66a:	62 9f       	mul	r22, r18
 66c:	f0 01       	movw	r30, r0
 66e:	72 9f       	mul	r23, r18
 670:	bb 27       	eor	r27, r27
 672:	f0 0d       	add	r31, r0
 674:	b1 1d       	adc	r27, r1
 676:	63 9f       	mul	r22, r19
 678:	aa 27       	eor	r26, r26
 67a:	f0 0d       	add	r31, r0
 67c:	b1 1d       	adc	r27, r1
 67e:	aa 1f       	adc	r26, r26
 680:	64 9f       	mul	r22, r20
 682:	66 27       	eor	r22, r22
 684:	b0 0d       	add	r27, r0
 686:	a1 1d       	adc	r26, r1
 688:	66 1f       	adc	r22, r22
 68a:	82 9f       	mul	r24, r18
 68c:	22 27       	eor	r18, r18
 68e:	b0 0d       	add	r27, r0
 690:	a1 1d       	adc	r26, r1
 692:	62 1f       	adc	r22, r18
 694:	73 9f       	mul	r23, r19
 696:	b0 0d       	add	r27, r0
 698:	a1 1d       	adc	r26, r1
 69a:	62 1f       	adc	r22, r18
 69c:	83 9f       	mul	r24, r19
 69e:	a0 0d       	add	r26, r0
 6a0:	61 1d       	adc	r22, r1
 6a2:	22 1f       	adc	r18, r18
 6a4:	74 9f       	mul	r23, r20
 6a6:	33 27       	eor	r19, r19
 6a8:	a0 0d       	add	r26, r0
 6aa:	61 1d       	adc	r22, r1
 6ac:	23 1f       	adc	r18, r19
 6ae:	84 9f       	mul	r24, r20
 6b0:	60 0d       	add	r22, r0
 6b2:	21 1d       	adc	r18, r1
 6b4:	82 2f       	mov	r24, r18
 6b6:	76 2f       	mov	r23, r22
 6b8:	6a 2f       	mov	r22, r26
 6ba:	11 24       	eor	r1, r1
 6bc:	9f 57       	subi	r25, 0x7F	; 127
 6be:	50 40       	sbci	r21, 0x00	; 0
 6c0:	8a f0       	brmi	.+34     	; 0x6e4 <__mulsf3_pse+0x84>
 6c2:	e1 f0       	breq	.+56     	; 0x6fc <__mulsf3_pse+0x9c>
 6c4:	88 23       	and	r24, r24
 6c6:	4a f0       	brmi	.+18     	; 0x6da <__mulsf3_pse+0x7a>
 6c8:	ee 0f       	add	r30, r30
 6ca:	ff 1f       	adc	r31, r31
 6cc:	bb 1f       	adc	r27, r27
 6ce:	66 1f       	adc	r22, r22
 6d0:	77 1f       	adc	r23, r23
 6d2:	88 1f       	adc	r24, r24
 6d4:	91 50       	subi	r25, 0x01	; 1
 6d6:	50 40       	sbci	r21, 0x00	; 0
 6d8:	a9 f7       	brne	.-22     	; 0x6c4 <__mulsf3_pse+0x64>
 6da:	9e 3f       	cpi	r25, 0xFE	; 254
 6dc:	51 05       	cpc	r21, r1
 6de:	70 f0       	brcs	.+28     	; 0x6fc <__mulsf3_pse+0x9c>
 6e0:	5c cf       	rjmp	.-328    	; 0x59a <__fp_inf>
 6e2:	a6 cf       	rjmp	.-180    	; 0x630 <__fp_szero>
 6e4:	5f 3f       	cpi	r21, 0xFF	; 255
 6e6:	ec f3       	brlt	.-6      	; 0x6e2 <__mulsf3_pse+0x82>
 6e8:	98 3e       	cpi	r25, 0xE8	; 232
 6ea:	dc f3       	brlt	.-10     	; 0x6e2 <__mulsf3_pse+0x82>
 6ec:	86 95       	lsr	r24
 6ee:	77 95       	ror	r23
 6f0:	67 95       	ror	r22
 6f2:	b7 95       	ror	r27
 6f4:	f7 95       	ror	r31
 6f6:	e7 95       	ror	r30
 6f8:	9f 5f       	subi	r25, 0xFF	; 255
 6fa:	c1 f7       	brne	.-16     	; 0x6ec <__mulsf3_pse+0x8c>
 6fc:	fe 2b       	or	r31, r30
 6fe:	88 0f       	add	r24, r24
 700:	91 1d       	adc	r25, r1
 702:	96 95       	lsr	r25
 704:	87 95       	ror	r24
 706:	97 f9       	bld	r25, 7
 708:	08 95       	ret

0000070a <round>:
 70a:	77 df       	rcall	.-274    	; 0x5fa <__fp_splitA>
 70c:	e0 f0       	brcs	.+56     	; 0x746 <round+0x3c>
 70e:	9e 37       	cpi	r25, 0x7E	; 126
 710:	d8 f0       	brcs	.+54     	; 0x748 <round+0x3e>
 712:	96 39       	cpi	r25, 0x96	; 150
 714:	b8 f4       	brcc	.+46     	; 0x744 <round+0x3a>
 716:	9e 38       	cpi	r25, 0x8E	; 142
 718:	48 f4       	brcc	.+18     	; 0x72c <round+0x22>
 71a:	67 2f       	mov	r22, r23
 71c:	78 2f       	mov	r23, r24
 71e:	88 27       	eor	r24, r24
 720:	98 5f       	subi	r25, 0xF8	; 248
 722:	f9 cf       	rjmp	.-14     	; 0x716 <round+0xc>
 724:	86 95       	lsr	r24
 726:	77 95       	ror	r23
 728:	67 95       	ror	r22
 72a:	93 95       	inc	r25
 72c:	95 39       	cpi	r25, 0x95	; 149
 72e:	d0 f3       	brcs	.-12     	; 0x724 <round+0x1a>
 730:	b6 2f       	mov	r27, r22
 732:	b1 70       	andi	r27, 0x01	; 1
 734:	6b 0f       	add	r22, r27
 736:	71 1d       	adc	r23, r1
 738:	81 1d       	adc	r24, r1
 73a:	20 f4       	brcc	.+8      	; 0x744 <round+0x3a>
 73c:	87 95       	ror	r24
 73e:	77 95       	ror	r23
 740:	67 95       	ror	r22
 742:	93 95       	inc	r25
 744:	02 c0       	rjmp	.+4      	; 0x74a <__fp_mintl>
 746:	1c c0       	rjmp	.+56     	; 0x780 <__fp_mpack>
 748:	73 cf       	rjmp	.-282    	; 0x630 <__fp_szero>

0000074a <__fp_mintl>:
 74a:	88 23       	and	r24, r24
 74c:	71 f4       	brne	.+28     	; 0x76a <__fp_mintl+0x20>
 74e:	77 23       	and	r23, r23
 750:	21 f0       	breq	.+8      	; 0x75a <__fp_mintl+0x10>
 752:	98 50       	subi	r25, 0x08	; 8
 754:	87 2b       	or	r24, r23
 756:	76 2f       	mov	r23, r22
 758:	07 c0       	rjmp	.+14     	; 0x768 <__fp_mintl+0x1e>
 75a:	66 23       	and	r22, r22
 75c:	11 f4       	brne	.+4      	; 0x762 <__fp_mintl+0x18>
 75e:	99 27       	eor	r25, r25
 760:	0d c0       	rjmp	.+26     	; 0x77c <__fp_mintl+0x32>
 762:	90 51       	subi	r25, 0x10	; 16
 764:	86 2b       	or	r24, r22
 766:	70 e0       	ldi	r23, 0x00	; 0
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	2a f0       	brmi	.+10     	; 0x776 <__fp_mintl+0x2c>
 76c:	9a 95       	dec	r25
 76e:	66 0f       	add	r22, r22
 770:	77 1f       	adc	r23, r23
 772:	88 1f       	adc	r24, r24
 774:	da f7       	brpl	.-10     	; 0x76c <__fp_mintl+0x22>
 776:	88 0f       	add	r24, r24
 778:	96 95       	lsr	r25
 77a:	87 95       	ror	r24
 77c:	97 f9       	bld	r25, 7
 77e:	08 95       	ret

00000780 <__fp_mpack>:
 780:	9f 3f       	cpi	r25, 0xFF	; 255
 782:	31 f0       	breq	.+12     	; 0x790 <__fp_mpack_finite+0xc>

00000784 <__fp_mpack_finite>:
 784:	91 50       	subi	r25, 0x01	; 1
 786:	20 f4       	brcc	.+8      	; 0x790 <__fp_mpack_finite+0xc>
 788:	87 95       	ror	r24
 78a:	77 95       	ror	r23
 78c:	67 95       	ror	r22
 78e:	b7 95       	ror	r27
 790:	88 0f       	add	r24, r24
 792:	91 1d       	adc	r25, r1
 794:	96 95       	lsr	r25
 796:	87 95       	ror	r24
 798:	97 f9       	bld	r25, 7
 79a:	08 95       	ret

0000079c <_exit>:
 79c:	f8 94       	cli

0000079e <__stop_program>:
 79e:	ff cf       	rjmp	.-2      	; 0x79e <__stop_program>
